68000 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J.Fondse

Date: 13 Dec 2015      Time: 15:43:37          Source: C:\M68KV6.0 - DE2 - 640BY480 - FOR 465 STUDENTS\M68KDEBUG.SRC

                       1          section   code
                       2   
                       3   ; CSTART.ASM  -  C startup-code
                       4   
00000000               5                   org $00000000          ;start of rom based vector table
00000000  0088 0000    6   InitialSP       dc.l $00880000         ;initial supervisor state stack pointer(stack decrements first before being used
00000004  0000 0400    7   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 084A    8   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 085E    9   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0872   10   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0886   11   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 089A   12   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 08AE   13   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 08C2   14   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 08D6   15   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 08EA   16   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08FE   17   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 0912   18   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 0912   19   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 0912   20   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 0912   21   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 0912   22   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 0912   23   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 0912   24   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 0912   25   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 0912   26   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 0912   27   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 0912   28   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 0912   29   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 0912   30   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      31   *
                      32   *
00000064  0000 04B6   33   Level1IRQ       dc.l Level1RamISR
00000068  0000 04CA   34   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04DE   35   Level3IRQ       dc.l Level3RamISR
00000070  0000 04F2   36   Level4IRQ       dc.l Level4RamISR
00000074  0000 0506   37   Level5IRQ       dc.l Level5RamISR
00000078  0000 0612   38   Level6IRQ       dc.l Level6RamISR
0000007C  0000 0626   39   Level7IRQ       dc.l Level7RamISR
                      40   *
                      41   *
00000080  0000 063A   42   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 064E   43   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0662   44   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0676   45   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 068A   46   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 069E   47   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 06B2   48   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 06C6   49   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06DA   50   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06EE   51   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 0702   52   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 0716   53   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 072A   54   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 073E   55   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 0752   56   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 0844   57   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      58   
                      59   *
                      60   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      61   *
                      62   
00000400              63                   org       $00000400
                      64   
00000400  46FC 2700   65   start:          move.w     #$2700,SR             set interrupts to disable until later
                      66   
                      67   *************************************************************************************
                      68   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      69   ** important, it just creates read and write bus cycles to specific addresses which
                      70   ** help with debugging hardware in Quartus simulations
                      71   **************************************************************************************
                      72   
                      73   * graphics
                      74   *	move.w	  #$0001,$FF100000	x1
                      75   *	move.w	  #$0001,$FF100002	y1
                      76   *	move.w	  #$FFFF,$FF100008	colour
                      77   *	move.w	  #$ffFF,$FF100010	font reg
                      78   *	move.w	  #$ffFF,$FF100012	font reg
                      79   *	move.w	  #$ffFF,$FF100014	font reg
                      80   *	move.w	  #$ffFF,$FF100016	font reg
                      81   *	move.w	  #$ffFF,$FF100018	font reg
                      82   *	move.w	  #$ffFF,$FF10001a	font reg
                      83   *	move.w	  #$ffFF,$FF10001c	font reg
                      84   *	move.w	  #$0005,$FF10000A	command char
                      85   
                      86   
00000404  13FC 0055   87                   move.b     #$55,$F0000000       write to memory
00000408  F000 0000 
0000040C  1039 F000   88                   move.b     $F0000000,d0         read it back
00000410  0000      
00000412  13FC 0055   89                   move.b     #$55,$01000000       write to the flash (ignored without proper protocol)
00000416  0100 0000 
0000041A  1039 0100   90                   move.b     $01000000,d0         read it back
0000041E  0000      
00000420  23FC 1122   91                   move.l     #$11223344,$00860000       write 32 bits, to memory
00000424  3344 0086 
00000428  0000      
0000042A  2039 0086   92                   move.l     $00860000,d0         read 32 bits back
0000042E  0000      
00000430  13FC 0000   93                   move.b     #0,$00400000         write to the output ports
00000434  0040 0000 
00000438  13FC 0000   94                   move.b     #0,$00400002         write to the output ports
0000043C  0040 0002 
00000440  13FC 0000   95                   move.b     #0,$00400004         write to the output ports
00000444  0040 0004 
00000448  13FC 0000   96                   move.b     #0,$00400006         write to the output ports
0000044C  0040 0006 
00000450  13FC 0000   97                   move.b     #0,$00400008         write to the output ports
00000454  0040 0008 
00000458  13FC 0000   98                   move.b     #0,$00400010         write to the hex display ports
0000045C  0040 0010 
00000460  13FC 0000   99                   move.b     #0,$00400012         write to the hex display ports
00000464  0040 0012 
00000468  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
0000046C  0040 0020 
00000470  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000474  0040 0022 
00000478  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
0000047C  0040 0030 
00000480  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000484  0040 0032 
                     104   
                     105                   ; program DMA
00000488  23FC 0000  106                   move.l     #$00000000,$FF000000     write to DMA From address
0000048C  0000 FF00 
00000490  0000      
00000492  23FC 0086  107                   move.l     #$00860000,$FF000004     write to DMA to
00000496  0000 FF00 
0000049A  0004      
0000049C  23FC 0000  108                   move.l     #$00000010,$FF000008     count = hex 10 (16) words
000004A0  0010 FF00 
000004A4  0008      
000004A6  33FC 0014  109                   move.w     #%000000000010100,$FF00000C             go DMA increment from/to by 2, word trasnfer
000004AA  FF00 000C 
                     110   
                     111   *************************************************************************************
                     112   * Copy initialised variables to Ram at startup
                     113   ************************************************************************************
                     114   
000004AE  4EB9 0000  115   mainloop        jsr       _main
000004B2  2AD4      
000004B4  60F8       116                   bra       mainloop
                     117   
                     118   *********************************************************************************************************
                     119   * Code to call Ram Based Interrupt handler and other exeception handler code
                     120   *********************************************************************************************************
000004B6  48E7 FFFE  121   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004BA  2079 0084  122                   move.l    VL1IRQ,a0               get ram based address into a0
000004BE  0064      
000004C0  4EA8 0000  123                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004C4  4CDF 7FFF  124                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004C8  4E73       125                   rte
000004CA  48E7 FFFE  126   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004CE  2079 0084  127                   move.l    VL2IRQ,a0               get ram based address into a0
000004D2  0068      
000004D4  4EA8 0000  128                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004D8  4CDF 7FFF  129                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004DC  4E73       130                   rte
000004DE  48E7 FFFE  131   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004E2  2079 0084  132                   move.l    VL3IRQ,a0               get ram based address into a0
000004E6  006C      
000004E8  4EA8 0000  133                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004EC  4CDF 7FFF  134                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004F0  4E73       135                   rte
000004F2  48E7 FFFE  136   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004F6  2079 0084  137                   move.l    VL4IRQ,a0               get ram based address into a0
000004FA  0070      
000004FC  4EA8 0000  138                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
00000500  4CDF 7FFF  139                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000504  4E73       140                   rte
                     141   
                     142   * Trace trap Handler
                     143   
                     144   Level5RamISR
                     145   *
                     146   **         Copy 68000 registers from debug monitor Variables,
                     147   *
                     148   *
00000506  23FC 0000  149                   move.l    #1,_Trace              switch on Trace Mode
0000050A  0001 0084 
0000050E  00D6      
00000510  13FC 0000  150                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
00000514  0040 000A 
00000518  33DF 0084  151                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
0000051C  0126      
0000051E  23DF 0084  152                   move.l    (sp)+,_PC              get at the users program counter and copy
00000522  011A      
                     153   *
00000524  23CF 0084  154                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000528  011E      
0000052A  23C0 0084  155                   move.l    d0,_d0
0000052E  00DE      
00000530  23C1 0084  156                   move.l    d1,_d1
00000534  00E2      
00000536  23C2 0084  157                   move.l    d2,_d2
0000053A  00E6      
0000053C  23C3 0084  158                   move.l    d3,_d3
00000540  00EA      
00000542  23C4 0084  159                   move.l    d4,_d4
00000546  00EE      
00000548  23C5 0084  160                   move.l    d5,_d5
0000054C  00F2      
0000054E  23C6 0084  161                   move.l    d6,_d6
00000552  00F6      
00000554  23C7 0084  162                   move.l    d7,_d7
00000558  00FA      
                     163   *
0000055A  23C8 0084  164                   move.l    a0,_a0
0000055E  00FE      
00000560  23C9 0084  165                   move.l    a1,_a1
00000564  0102      
00000566  23CA 0084  166                   move.l    a2,_a2
0000056A  0106      
0000056C  23CB 0084  167                   move.l    a3,_a3
00000570  010A      
00000572  23CC 0084  168                   move.l    a4,_a4
00000576  010E      
00000578  23CD 0084  169                   move.l    a5,_a5
0000057C  0112      
0000057E  23CE 0084  170                   move.l    a6,_a6
00000582  0116      
00000584  4E68       171                   move.l    usp,a0
00000586  23C8 0084  172                   move.l    a0,_USP
0000058A  0122      
                     173   *
0000058C  2079 0084  174                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
00000590  0074      
00000592  4EA8 0000  175                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     176   
                     177   ** After trace, reload 68000 registers with new values before continuing
                     178   
00000596  2039 0084  179                   move.l   _d0,d0
0000059A  00DE      
0000059C  2239 0084  180                   move.l   _d1,d1
000005A0  00E2      
000005A2  2439 0084  181                   move.l   _d2,d2
000005A6  00E6      
000005A8  2639 0084  182                   move.l   _d3,d3
000005AC  00EA      
000005AE  2839 0084  183                   move.l   _d4,d4
000005B2  00EE      
000005B4  2A39 0084  184                   move.l   _d5,d5
000005B8  00F2      
000005BA  2C39 0084  185                   move.l   _d6,d6
000005BE  00F6      
000005C0  2E39 0084  186                   move.l   _d7,d7
000005C4  00FA      
                     187   
000005C6  2079 0084  188                   move.l   _USP,a0
000005CA  0122      
000005CC  4E60       189                   move.l   a0,USP                     load user stack pointer
000005CE  2079 0084  190                   move.l   _a0,a0
000005D2  00FE      
000005D4  2279 0084  191                   move.l   _a1,a1
000005D8  0102      
000005DA  2479 0084  192                   move.l   _a2,a2
000005DE  0106      
000005E0  2679 0084  193                   move.l   _a3,a3
000005E4  010A      
000005E6  2879 0084  194                   move.l   _a4,a4
000005EA  010E      
000005EC  2A79 0084  195                   move.l   _a5,a5
000005F0  0112      
000005F2  2C79 0084  196                   move.l   _a6,a6
000005F6  0116      
                     197   
000005F8  2E79 0084  198                   move.l   _SSP,sp
000005FC  011E      
000005FE  2F39 0084  199                   move.l   _PC,-(sp)
00000602  011A      
00000604  3F39 0084  200                   move.w   _SR,-(sp)
00000608  0126      
0000060A  11F8 0074  201                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
0000060E  0000      
00000610  4E73       202                   rte
                     203   
                     204   * address trap handler
                     205   
00000612  48E7 FFFE  206   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000616  2079 0084  207                   move.l    VL6IRQ,a0               get ram based address into a0
0000061A  0078      
0000061C  4EA8 0000  208                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
00000620  4CDF 7FFF  209                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000624  4E73       210                   rte
                     211   
00000626  48E7 FFFE  212   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000062A  2079 0084  213                   move.l    VL7IRQ,a0               get ram based address into a0
0000062E  007C      
00000630  4EA8 0000  214                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
00000634  4CDF 7FFF  215                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000638  4E73       216                   rte
                     217   
                     218   
                     219   ********************************************************************************************************
                     220   * Ram based Trap handler and other exeception handler code
                     221   *********************************************************************************************************
                     222   
0000063A  48E7 FFFE  223   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000063E  2079 0084  224                   move.l    VTrap0,a0                get ram based address into a0
00000642  0080      
00000644  4EA8 0000  225                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000648  4CDF 7FFF  226                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000064C  4E73       227                   rte
                     228   
0000064E  48E7 FFFE  229   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000652  2079 0084  230                   move.l    VTrap1,a0                get ram based address into a0
00000656  0084      
00000658  4EA8 0000  231                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000065C  4CDF 7FFF  232                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000660  4E73       233                   rte
                     234   
00000662  48E7 FFFE  235   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000666  2079 0084  236                   move.l    VTrap2,a0                get ram based address into a0
0000066A  0088      
0000066C  4EA8 0000  237                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000670  4CDF 7FFF  238                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000674  4E73       239                   rte
                     240   
00000676  48E7 FFFE  241   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000067A  2079 0084  242                   move.l    VTrap3,a0                get ram based address into a0
0000067E  008C      
00000680  4EA8 0000  243                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000684  4CDF 7FFF  244                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000688  4E73       245                   rte
                     246   
0000068A  48E7 FFFE  247   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000068E  2079 0084  248                   move.l    VTrap4,a0                get ram based address into a0
00000692  0090      
00000694  4EA8 0000  249                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000698  4CDF 7FFF  250                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069C  4E73       251                   rte
                     252   
0000069E  48E7 FFFE  253   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A2  2079 0084  254                   move.l    VTrap5,a0                get ram based address into a0
000006A6  0094      
000006A8  4EA8 0000  255                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  256                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       257                   rte
                     258   
000006B2  48E7 FFFE  259   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0084  260                   move.l    VTrap6,a0                get ram based address into a0
000006BA  0098      
000006BC  4EA8 0000  261                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006C0  4CDF 7FFF  262                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C4  4E73       263                   rte
                     264   
000006C6  48E7 FFFE  265   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006CA  2079 0084  266                   move.l    VTrap7,a0                get ram based address into a0
000006CE  009C      
000006D0  4EA8 0000  267                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D4  4CDF 7FFF  268                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D8  4E73       269                   rte
                     270   
000006DA  48E7 FFFE  271   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DE  2079 0084  272                   move.l    VTrap8,a0                get ram based address into a0
000006E2  00A0      
000006E4  4EA8 0000  273                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E8  4CDF 7FFF  274                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006EC  4E73       275                   rte
                     276   
000006EE  48E7 FFFE  277   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006F2  2079 0084  278                   move.l    VTrap9,a0                get ram based address into a0
000006F6  00A4      
000006F8  4EA8 0000  279                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006FC  4CDF 7FFF  280                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000700  4E73       281                   rte
                     282   
00000702  48E7 FFFE  283   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000706  2079 0084  284                   move.l    VTrap10,a0                get ram based address into a0
0000070A  00A8      
0000070C  4EA8 0000  285                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000710  4CDF 7FFF  286                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000714  4E73       287                   rte
                     288   
00000716  48E7 FFFE  289   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000071A  2079 0084  290                   move.l    VTrap11,a0                get ram based address into a0
0000071E  00AC      
00000720  4EA8 0000  291                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000724  4CDF 7FFF  292                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000728  4E73       293                   rte
                     294   
0000072A  48E7 FFFE  295   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000072E  2079 0084  296                   move.l    VTrap12,a0                get ram based address into a0
00000732  00B0      
00000734  4EA8 0000  297                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000738  4CDF 7FFF  298                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000073C  4E73       299                   rte
                     300   
0000073E  48E7 FFFE  301   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000742  2079 0084  302                   move.l    VTrap13,a0                get ram based address into a0
00000746  00B4      
00000748  4EA8 0000  303                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000074C  4CDF 7FFF  304                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000750  4E73       305                   rte
                     306   
                     307   Trap14RamISR    ;Break Point Handler
                     308   *
                     309   **         Copy 68000 registers from debug monitor Variables
                     310   *
00000752  23FC 0000  311                   move.l    #1,_Trace      switch on Trace Mode
00000756  0001 0084 
0000075A  00D6      
0000075C  33DF 0084  312                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
00000760  0126      
00000762  23DF 0084  313                   move.l    (sp)+,_PC      get at the users program counter and copy
00000766  011A      
                     314   *
00000768  23C0 0084  315                   move.l    d0,_d0
0000076C  00DE      
0000076E  23C1 0084  316                   move.l    d1,_d1
00000772  00E2      
00000774  23C2 0084  317                   move.l    d2,_d2
00000778  00E6      
0000077A  23C3 0084  318                   move.l    d3,_d3
0000077E  00EA      
00000780  23C4 0084  319                   move.l    d4,_d4
00000784  00EE      
00000786  23C5 0084  320                   move.l    d5,_d5
0000078A  00F2      
0000078C  23C6 0084  321                   move.l    d6,_d6
00000790  00F6      
00000792  23C7 0084  322                   move.l    d7,_d7
00000796  00FA      
                     323   *
00000798  23C8 0084  324                   move.l    a0,_a0
0000079C  00FE      
0000079E  23C9 0084  325                   move.l    a1,_a1
000007A2  0102      
000007A4  23CA 0084  326                   move.l    a2,_a2
000007A8  0106      
000007AA  23CB 0084  327                   move.l    a3,_a3
000007AE  010A      
000007B0  23CC 0084  328                   move.l    a4,_a4
000007B4  010E      
000007B6  23CD 0084  329                   move.l    a5,_a5
000007BA  0112      
000007BC  23CE 0084  330                   move.l    a6,_a6
000007C0  0116      
000007C2  4E68       331                   move.l    USP,a0
000007C4  23C8 0084  332                   move.l    a0,_USP
000007C8  0122      
                     333   *
000007CA  2079 0084  334                   move.l    VTrap14,a0             get ram based address into a0
000007CE  00B8      
000007D0  4EA8 0000  335                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     336   
                     337   ** After breakpoint reload 68000 registers with new values before continuing
                     338   
                     339   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
000007D4  2039 0084  340                   move.l   _d0,d0
000007D8  00DE      
000007DA  2239 0084  341                   move.l   _d1,d1
000007DE  00E2      
000007E0  2439 0084  342                   move.l   _d2,d2
000007E4  00E6      
000007E6  2639 0084  343                   move.l   _d3,d3
000007EA  00EA      
000007EC  2839 0084  344                   move.l   _d4,d4
000007F0  00EE      
000007F2  2A39 0084  345                   move.l   _d5,d5
000007F6  00F2      
000007F8  2C39 0084  346                   move.l   _d6,d6
000007FC  00F6      
000007FE  2E39 0084  347                   move.l   _d7,d7
00000802  00FA      
                     348   
00000804  2079 0084  349                   move.l   _USP,a0
00000808  0122      
0000080A  4E60       350                   move.l   a0,USP        load user stack pointer A7
0000080C  2079 0084  351                   move.l   _a0,a0
00000810  00FE      
00000812  2279 0084  352                   move.l   _a1,a1
00000816  0102      
00000818  2479 0084  353                   move.l   _a2,a2
0000081C  0106      
0000081E  2679 0084  354                   move.l   _a3,a3
00000822  010A      
00000824  2879 0084  355                   move.l   _a4,a4
00000828  010E      
0000082A  2A79 0084  356                   move.l   _a5,a5
0000082E  0112      
00000830  2C79 0084  357                   move.l   _a6,a6
00000834  0116      
                     358   
00000836  2F39 0084  359                   move.l   _PC,-(sp)
0000083A  011A      
0000083C  3F39 0084  360                   move.w   _SR,-(sp)
00000840  0126      
00000842  4E73       361                   rte
                     362   
00000844  4EF9 0000  363   Trap15RamISR    jmp     _CallDebugMonitor
00000848  247C      
                     364   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     365   *                move.l    VTrap15,a0                get ram based address into a0
                     366   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     367   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     368   *                rte
                     369   
                     370   *********************************************************************************************************
                     371   *Default exception handler for everything without a specific handler
                     372   *********************************************************************************************************
                     373   
                     374   *
                     375   **              Jump here for each unhandled exception
                     376   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     377   *
                     378   
0000084A  48E7 FFFE  379   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0084  380                   move.l    VBusError,a0            get ram based address into a0
00000852  0008      
00000854  4EA8 0000  381                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000858  4CDF 7FFF  382                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085C  4E73       383                   rte
0000085E  48E7 FFFE  384   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000862  2079 0084  385                   move.l    VAddressError,a0        get ram based address into a0
00000866  000C      
00000868  4EA8 0000  386                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000086C  4CDF 7FFF  387                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000870  4E73       388                   rte
00000872  48E7 FFFE  389   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000876  2079 0084  390                   move.l    VIllegalInstr,a0        get ram based address into a0
0000087A  0010      
0000087C  4EA8 0000  391                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000880  4CDF 7FFF  392                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000884  4E73       393                   rte
00000886  48E7 FFFE  394   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000088A  2079 0084  395                   move.l    VDividebyZero,a0        get ram based address into a0
0000088E  0014      
00000890  4EA8 0000  396                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000894  4CDF 7FFF  397                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000898  4E73       398                   rte
0000089A  48E7 FFFE  399   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000089E  2079 0084  400                   move.l    VCheck,a0               get ram based address into a0
000008A2  0018      
000008A4  4EA8 0000  401                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008A8  4CDF 7FFF  402                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008AC  4E73       403                   rte
000008AE  48E7 FFFE  404   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008B2  2079 0084  405                   move.l    VTrapV,a0               get ram based address into a0
000008B6  001C      
000008B8  4EA8 0000  406                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008BC  4CDF 7FFF  407                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008C0  4E73       408                   rte
000008C2  48E7 FFFE  409   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008C6  2079 0084  410                   move.l    VPrivilege,a0           get ram based address into a0
000008CA  0020      
000008CC  4EA8 0000  411                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008D0  4CDF 7FFF  412                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008D4  4E73       413                   rte
000008D6  48E7 FFFE  414   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008DA  2079 0084  415                   move.l    VTrace,a0               get ram based address into a0
000008DE  0024      
000008E0  4EA8 0000  416                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008E4  4CDF 7FFF  417                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008E8  4E73       418                   rte
000008EA  48E7 FFFE  419   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008EE  2079 0084  420                   move.l    VLine1010emul,a0        get ram based address into a0
000008F2  0028      
000008F4  4EA8 0000  421                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008F8  4CDF 7FFF  422                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008FC  4E73       423                   rte
000008FE  48E7 FFFE  424   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000902  2079 0084  425                   move.l    VLine1111emul,a0        get ram based address into a0
00000906  002C      
00000908  4EA8 0000  426                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000090C  4CDF 7FFF  427                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000910  4E73       428                   rte
                     429   E_Unnas1
                     430   E_Unnas2
                     431   E_Unnas3
                     432   E_UnitI
                     433   E_Unnas4
                     434   E_Unnas5
                     435   E_Unnas6
                     436   E_Unnas7
                     437   E_Unnas8
                     438   E_Unnas9
                     439   E_Unnas10
                     440   E_Unnas11
                     441   E_Spuri
00000912  60FE       442   _stop            bra _stop                         stop
                     443   ***************************************************************************************************
                     444   * Go() function in debug monitor
                     445   ***************************************************************************************************
                     446   _go
00000914  2E79 0084  447                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
00000918  011E      
0000091A  2F39 0084  448                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
0000091E  011A      
00000920  3F39 0084  449                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
00000924  0126      
                     450   
00000926  1038 0078  451                   move.b   $00000078,d0  remove any spurious address exception arising after power on
0000092A  2039 0084  452                   move.l   _d0,d0
0000092E  00DE      
00000930  2239 0084  453                   move.l   _d1,d1
00000934  00E2      
00000936  2439 0084  454                   move.l   _d2,d2
0000093A  00E6      
0000093C  2639 0084  455                   move.l   _d3,d3
00000940  00EA      
00000942  2839 0084  456                   move.l   _d4,d4
00000946  00EE      
00000948  2A39 0084  457                   move.l   _d5,d5
0000094C  00F2      
0000094E  2C39 0084  458                   move.l   _d6,d6
00000952  00F6      
00000954  2E39 0084  459                   move.l   _d7,d7
00000958  00FA      
                     460   
0000095A  2079 0084  461                   move.l   _USP,a0
0000095E  0122      
00000960  4E60       462                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000962  2079 0084  463                   move.l   _a0,a0
00000966  00FE      
00000968  2279 0084  464                   move.l   _a1,a1
0000096C  0102      
0000096E  2479 0084  465                   move.l   _a2,a2
00000972  0106      
00000974  2679 0084  466                   move.l   _a3,a3
00000978  010A      
0000097A  2879 0084  467                   move.l   _a4,a4
0000097E  010E      
00000980  2A79 0084  468                   move.l   _a5,a5
00000984  0112      
00000986  2C79 0084  469                   move.l   _a6,a6
0000098A  0116      
0000098C  4E73       470                   rte                    load the status reg and PC from the stack and commence running
                     471                                          *used to be rte but this didn't load the status byte
                     472   
                     473   
                     474   ; C:\M68KV6.0 - DE2 - 640BY480 - FOR 465 STUDENTS\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J.Fondse
                     475   ; #include "DebugMonitor.h"
                     476   ; /**************************************************************
                     477   ; * 68 Debug Monitor + Disassembler
                     478   ; * Copyright Paul Davies 2014
                     479   ; ***************************************************************
                     480   ; /******************************************************************/
                     481   ; /* IMPORTANT DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     482   ; /* IMPORTANT DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     483   ; /* IMPORTANT DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     484   ; /* IMPORTANT DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     485   ; /* IMPORTANT DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     486   ; /* IMPORTANT DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     487   ; /* IMPORTANT DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     488   ; /******************************************************************/
                     489   ; unsigned int i, x, y, z, PortA_Count;
                     490   ; int     Trace, GoFlag;                       // used in tracing/single stepping
                     491   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     492   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     493   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     494   ; unsigned int PC, SSP, USP ;
                     495   ; unsigned short int SR;
                     496   ; // Breakpoint variables
                     497   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     498   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     499   ; unsigned int BreakPointSetOrCleared[8] ;
                     500   ; unsigned int InstructionSize ;
                     501   ; // watchpoint variables
                     502   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     503   ; unsigned int WatchPointSetOrCleared[8] ;
                     504   ; char WatchPointString[8][100] ;
                     505   ; // for disassembly of program
                     506   ; char    Instruction[100] ;
                     507   ; char    TempString[100] ;
                     508   ; /************************************************************************************
                     509   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     510   ; ************************************************************************************/
                     511   ; void Wait1ms(void)
                     512   ; {
                     513   _Wait1ms:
0000098E  48E7 2000  514          movem.l   D2,-(A7)
                     515   ; long int  i ;
                     516   ; for(i = 0; i < 1000; i ++)
00000992  4282       517          clr.l     D2
                     518   Wait1ms_1:
00000994  0C82 0000  519          cmp.l     #1000,D2
00000998  03E8      
0000099A  6C04       520          bge.s     Wait1ms_3
0000099C  5282       521          addq.l    #1,D2
0000099E  60F4       522          bra       Wait1ms_1
                     523   Wait1ms_3:
000009A0  4CDF 0004  524          movem.l   (A7)+,D2
000009A4  4E75       525          rts
                     526   ; ;
                     527   ; }
                     528   ; /************************************************************************************
                     529   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     530   ; **************************************************************************************/
                     531   ; void Wait3ms(void)
                     532   ; {
                     533   _Wait3ms:
000009A6  48E7 2000  534          movem.l   D2,-(A7)
                     535   ; int i ;
                     536   ; for(i = 0; i < 3; i++)
000009AA  4282       537          clr.l     D2
                     538   Wait3ms_1:
000009AC  0C82 0000  539          cmp.l     #3,D2
000009B0  0003      
000009B2  6C06       540          bge.s     Wait3ms_3
                     541   ; Wait1ms() ;
000009B4  61D8       542          bsr       _Wait1ms
000009B6  5282       543          addq.l    #1,D2
000009B8  60F2       544          bra       Wait3ms_1
                     545   Wait3ms_3:
000009BA  4CDF 0004  546          movem.l   (A7)+,D2
000009BE  4E75       547          rts
                     548   ; }
                     549   ; /*********************************************************************************************
                     550   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     551   ; *********************************************************************************************/
                     552   ; void Init_LCD(void)
                     553   ; {
                     554   _Init_LCD:
                     555   ; LCDcommand = (char)(0x0c) ;
000009C0  13FC 000C  556          move.b    #12,4194336
000009C4  0040 0020 
                     557   ; Wait3ms() ;
000009C8  61DC       558          bsr       _Wait3ms
                     559   ; LCDcommand = (char)(0x38) ;
000009CA  13FC 0038  560          move.b    #56,4194336
000009CE  0040 0020 
                     561   ; Wait3ms() ;
000009D2  61D2       562          bsr       _Wait3ms
000009D4  4E75       563          rts
                     564   ; }
                     565   ; /******************************************************************************
                     566   ; *subroutine to output a single character held in d1 to the LCD display
                     567   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     568   ; *current cursor position
                     569   ; *******************************************************************************/
                     570   ; void Outchar(int c)
                     571   ; {
                     572   _Outchar:
000009D6  4E56 0000  573          link      A6,#0
                     574   ; LCDdata = (char)(c);
000009DA  202E 0008  575          move.l    8(A6),D0
000009DE  13C0 0040  576          move.b    D0,4194338
000009E2  0022      
                     577   ; Wait1ms() ;
000009E4  61A8       578          bsr       _Wait1ms
000009E6  4E5E       579          unlk      A6
000009E8  4E75       580          rts
                     581   ; }
                     582   ; /**********************************************************************************
                     583   ; *subroutine to output a message at the current cursor position of the LCD display
                     584   ; ************************************************************************************/
                     585   ; void OutMess(char *theMessage)
                     586   ; {
                     587   _OutMess:
000009EA  4E56 FFFC  588          link      A6,#-4
                     589   ; char c ;
                     590   ; while((c = *theMessage++) != (char)(0))
                     591   OutMess_1:
000009EE  206E 0008  592          move.l    8(A6),A0
000009F2  52AE 0008  593          addq.l    #1,8(A6)
000009F6  1D50 FFFF  594          move.b    (A0),-1(A6)
000009FA  1010       595          move.b    (A0),D0
000009FC  6710       596          beq.s     OutMess_3
                     597   ; Outchar(c) ;
000009FE  122E FFFF  598          move.b    -1(A6),D1
00000A02  4881       599          ext.w     D1
00000A04  48C1       600          ext.l     D1
00000A06  2F01       601          move.l    D1,-(A7)
00000A08  61CC       602          bsr       _Outchar
00000A0A  584F       603          addq.w    #4,A7
00000A0C  60E0       604          bra       OutMess_1
                     605   OutMess_3:
00000A0E  4E5E       606          unlk      A6
00000A10  4E75       607          rts
                     608   ; }
                     609   ; /******************************************************************************
                     610   ; *subroutine to clear the line by issuing 24 space characters
                     611   ; *******************************************************************************/
                     612   ; void Clearln(void)
                     613   ; {
                     614   _Clearln:
00000A12  48E7 2000  615          movem.l   D2,-(A7)
                     616   ; unsigned char i ;
                     617   ; for(i = 0; i < 24; i ++)
00000A16  4202       618          clr.b     D2
                     619   Clearln_1:
00000A18  C4BC 0000  620          and.l     #255,D2
00000A1C  00FF      
00000A1E  0C82 0000  621          cmp.l     #24,D2
00000A22  0018      
00000A24  640C       622          bhs.s     Clearln_3
                     623   ; Outchar(' ') ;  /* write a space char to the LCD display */
00000A26  4878 0020  624          pea       32
00000A2A  61AA       625          bsr       _Outchar
00000A2C  584F       626          addq.w    #4,A7
00000A2E  5202       627          addq.b    #1,D2
00000A30  60E6       628          bra       Clearln_1
                     629   Clearln_3:
00000A32  4CDF 0004  630          movem.l   (A7)+,D2
00000A36  4E75       631          rts
                     632   ; }
                     633   ; /******************************************************************************
                     634   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     635   ; *******************************************************************************/
                     636   ; void Oline0(char *theMessage)
                     637   ; {
                     638   _Oline0:
00000A38  4E56 0000  639          link      A6,#0
                     640   ; LCDcommand = (char)(0x80) ;
00000A3C  13FC 0080  641          move.b    #128,4194336
00000A40  0040 0020 
                     642   ; Wait3ms();
00000A44  6100 FF60  643          bsr       _Wait3ms
                     644   ; Clearln() ;
00000A48  61C8       645          bsr       _Clearln
                     646   ; LCDcommand = (char)(0x80) ;
00000A4A  13FC 0080  647          move.b    #128,4194336
00000A4E  0040 0020 
                     648   ; Wait3ms() ;
00000A52  6100 FF52  649          bsr       _Wait3ms
                     650   ; OutMess(theMessage) ;
00000A56  2F2E 0008  651          move.l    8(A6),-(A7)
00000A5A  618E       652          bsr       _OutMess
00000A5C  584F       653          addq.w    #4,A7
00000A5E  4E5E       654          unlk      A6
00000A60  4E75       655          rts
                     656   ; }
                     657   ; /******************************************************************************
                     658   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     659   ; *******************************************************************************/
                     660   ; void Oline1(char *theMessage)
                     661   ; {
                     662   _Oline1:
00000A62  4E56 0000  663          link      A6,#0
                     664   ; LCDcommand = (char)(0xC0) ;
00000A66  13FC 00C0  665          move.b    #192,4194336
00000A6A  0040 0020 
                     666   ; Wait3ms();
00000A6E  6100 FF36  667          bsr       _Wait3ms
                     668   ; Clearln() ;
00000A72  619E       669          bsr       _Clearln
                     670   ; LCDcommand = (char)(0xC0) ;
00000A74  13FC 00C0  671          move.b    #192,4194336
00000A78  0040 0020 
                     672   ; Wait3ms() ;
00000A7C  6100 FF28  673          bsr       _Wait3ms
                     674   ; OutMess(theMessage) ;
00000A80  2F2E 0008  675          move.l    8(A6),-(A7)
00000A84  6100 FF64  676          bsr       _OutMess
00000A88  584F       677          addq.w    #4,A7
00000A8A  4E5E       678          unlk      A6
00000A8C  4E75       679          rts
                     680   ; }
                     681   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     682   ; {
                     683   _InstallExceptionHandler:
00000A8E  4E56 FFFC  684          link      A6,#-4
                     685   ; volatile long int *RamVectorAddress = (volatile long int *)(0x00840000) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A92  2D7C 0084  686          move.l    #8650752,-4(A6)
00000A96  0000 FFFC 
                     687   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A9A  206E FFFC  688          move.l    -4(A6),A0
00000A9E  202E 000C  689          move.l    12(A6),D0
00000AA2  E588       690          lsl.l     #2,D0
00000AA4  21AE 0008  691          move.l    8(A6),0(A0,D0.L)
00000AA8  0800      
00000AAA  4E5E       692          unlk      A6
00000AAC  4E75       693          rts
                     694   ; }
                     695   ; void TestLEDS(void)
                     696   ; {
                     697   _TestLEDS:
00000AAE  4E56 FFFC  698          link      A6,#-4
00000AB2  48E7 2000  699          movem.l   D2,-(A7)
                     700   ; int delay ;
                     701   ; unsigned char count = 0 ;
00000AB6  422E FFFF  702          clr.b     -1(A6)
                     703   ; while(1)    {
                     704   TestLEDS_1:
                     705   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = count++ ;
00000ABA  102E FFFF  706          move.b    -1(A6),D0
00000ABE  522E FFFF  707          addq.b    #1,-1(A6)
00000AC2  13C0 0040  708          move.b    D0,4194326
00000AC6  0016      
00000AC8  13C0 0040  709          move.b    D0,4194324
00000ACC  0014      
00000ACE  13C0 0040  710          move.b    D0,4194322
00000AD2  0012      
00000AD4  13C0 0040  711          move.b    D0,4194320
00000AD8  0010      
00000ADA  13C0 0040  712          move.b    D0,4194310
00000ADE  0006      
00000AE0  13C0 0040  713          move.b    D0,4194308
00000AE4  0004      
00000AE6  13C0 0040  714          move.b    D0,4194306
00000AEA  0002      
00000AEC  13C0 0040  715          move.b    D0,4194304
00000AF0  0000      
                     716   ; for(delay = 0; delay < 100000; delay ++)
00000AF2  4282       717          clr.l     D2
                     718   TestLEDS_4:
00000AF4  0C82 0001  719          cmp.l     #100000,D2
00000AF8  86A0      
00000AFA  6C04       720          bge.s     TestLEDS_6
00000AFC  5282       721          addq.l    #1,D2
00000AFE  60F4       722          bra       TestLEDS_4
                     723   TestLEDS_6:
00000B00  60B8       724          bra       TestLEDS_1
                     725   ; ;
                     726   ; }
                     727   ; }
                     728   ; void SwitchTest(void)
                     729   ; {
                     730   _SwitchTest:
00000B02  48E7 3020  731          movem.l   D2/D3/A2,-(A7)
00000B06  45F9 0000  732          lea       _printf,A2
00000B0A  5776      
                     733   ; int i, switches = 0 ;
00000B0C  4283       734          clr.l     D3
                     735   ; while(1)    {
                     736   SwitchTest_1:
                     737   ; switches = (PortB << 8) | (PortA) ;
00000B0E  1039 0040  738          move.b    4194306,D0
00000B12  0002      
00000B14  C0BC 0000  739          and.l     #255,D0
00000B18  00FF      
00000B1A  E180       740          asl.l     #8,D0
00000B1C  1239 0040  741          move.b    4194304,D1
00000B20  0000      
00000B22  C2BC 0000  742          and.l     #255,D1
00000B26  00FF      
00000B28  8081       743          or.l      D1,D0
00000B2A  2600       744          move.l    D0,D3
                     745   ; printf("\rSwitches SW[15-0] = ") ;
00000B2C  4879 0000  746          pea       @m68kde~1_1
00000B30  61A4      
00000B32  4E92       747          jsr       (A2)
00000B34  584F       748          addq.w    #4,A7
                     749   ; for( i = (int)(0x00008000); i > 0; i = i >> 1)  {
00000B36  243C 0000  750          move.l    #32768,D2
00000B3A  8000      
                     751   SwitchTest_4:
00000B3C  0C82 0000  752          cmp.l     #0,D2
00000B40  0000      
00000B42  6F20       753          ble.s     SwitchTest_6
                     754   ; if((switches & i) == 0)
00000B44  2003       755          move.l    D3,D0
00000B46  C082       756          and.l     D2,D0
00000B48  660C       757          bne.s     SwitchTest_7
                     758   ; printf("0") ;
00000B4A  4879 0000  759          pea       @m68kde~1_2
00000B4E  61BA      
00000B50  4E92       760          jsr       (A2)
00000B52  584F       761          addq.w    #4,A7
00000B54  600A       762          bra.s     SwitchTest_8
                     763   SwitchTest_7:
                     764   ; else
                     765   ; printf("1") ;
00000B56  4879 0000  766          pea       @m68kde~1_3
00000B5A  61BC      
00000B5C  4E92       767          jsr       (A2)
00000B5E  584F       768          addq.w    #4,A7
                     769   SwitchTest_8:
00000B60  E282       770          asr.l     #1,D2
00000B62  60D8       771          bra       SwitchTest_4
                     772   SwitchTest_6:
00000B64  60A8       773          bra       SwitchTest_1
                     774   ; }
                     775   ; }
                     776   ; }
                     777   ; /*********************************************************************************************
                     778   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     779   ; *********************************************************************************************/
                     780   ; void Init_RS232(void)
                     781   ; {
                     782   _Init_RS232:
                     783   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B66  13FC 0015  784          move.b    #21,4194368
00000B6A  0040 0040 
                     785   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B6E  13FC 0001  786          move.b    #1,4194372
00000B72  0040 0044 
00000B76  4E75       787          rts
                     788   ; }
                     789   ; int kbhit(void)
                     790   ; {
                     791   _kbhit:
                     792   ; if(((char)(RS232_Status) & (char)(0x02)) == (char)(0x02))    // wait for Tx bit in status register to be '1'
00000B78  1039 0040  793          move.b    4194368,D0
00000B7C  0040      
00000B7E  C03C 0002  794          and.b     #2,D0
00000B82  0C00 0002  795          cmp.b     #2,D0
00000B86  6604       796          bne.s     kbhit_1
                     797   ; return 1 ;
00000B88  7001       798          moveq     #1,D0
00000B8A  6002       799          bra.s     kbhit_3
                     800   kbhit_1:
                     801   ; else
                     802   ; return 0 ;
00000B8C  4280       803          clr.l     D0
                     804   kbhit_3:
00000B8E  4E75       805          rts
                     806   ; }
                     807   ; /*********************************************************************************************************
                     808   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     809   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     810   ; **  to allow the board to communicate with HyperTerminal Program
                     811   ; **
                     812   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     813   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     814   ; **  call _putch() also
                     815   ; *********************************************************************************************************/
                     816   ; int _putch( int c)
                     817   ; {
                     818   __putch:
00000B90  4E56 0000  819          link      A6,#0
                     820   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     821   _putch_1:
00000B94  1039 0040  822          move.b    4194368,D0
00000B98  0040      
00000B9A  C03C 0002  823          and.b     #2,D0
00000B9E  0C00 0002  824          cmp.b     #2,D0
00000BA2  6702       825          beq.s     _putch_3
00000BA4  60EE       826          bra       _putch_1
                     827   _putch_3:
                     828   ; ;
                     829   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000BA6  202E 0008  830          move.l    8(A6),D0
00000BAA  C03C 007F  831          and.b     #127,D0
00000BAE  13C0 0040  832          move.b    D0,4194370
00000BB2  0042      
                     833   ; return c ;                                              // putchar() expects the character to be returned
00000BB4  202E 0008  834          move.l    8(A6),D0
00000BB8  4E5E       835          unlk      A6
00000BBA  4E75       836          rts
                     837   ; }
                     838   ; /*********************************************************************************************************
                     839   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     840   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     841   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     842   ; **
                     843   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     844   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     845   ; **  call _getch() also
                     846   ; *********************************************************************************************************/
                     847   ; int _getch( void )
                     848   ; {
                     849   __getch:
00000BBC  48E7 2000  850          movem.l   D2,-(A7)
                     851   ; int c ;
                     852   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     853   _getch_1:
00000BC0  1039 0040  854          move.b    4194368,D0
00000BC4  0040      
00000BC6  C03C 0001  855          and.b     #1,D0
00000BCA  0C00 0001  856          cmp.b     #1,D0
00000BCE  6702       857          beq.s     _getch_3
00000BD0  60EE       858          bra       _getch_1
                     859   _getch_3:
                     860   ; ;
                     861   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000BD2  1039 0040  862          move.b    4194370,D0
00000BD6  0042      
00000BD8  C0BC 0000  863          and.l     #255,D0
00000BDC  00FF      
00000BDE  727F       864          moveq     #127,D1
00000BE0  4881       865          ext.w     D1
00000BE2  48C1       866          ext.l     D1
00000BE4  C081       867          and.l     D1,D0
00000BE6  2400       868          move.l    D0,D2
                     869   ; _putch(c);
00000BE8  2F02       870          move.l    D2,-(A7)
00000BEA  61A4       871          bsr       __putch
00000BEC  584F       872          addq.w    #4,A7
                     873   ; return c ;
00000BEE  2002       874          move.l    D2,D0
00000BF0  4CDF 0004  875          movem.l   (A7)+,D2
00000BF4  4E75       876          rts
                     877   ; }
                     878   ; // flush the input stream for any unread characters
                     879   ; void FlushKeyboard(void)
                     880   ; {
                     881   _FlushKeyboard:
00000BF6  4E56 FFFC  882          link      A6,#-4
                     883   ; char c ;
                     884   ; while(1)    {
                     885   FlushKeyboard_1:
                     886   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BFA  1039 0040  887          move.b    4194368,D0
00000BFE  0040      
00000C00  C03C 0001  888          and.b     #1,D0
00000C04  0C00 0001  889          cmp.b     #1,D0
00000C08  6610       890          bne.s     FlushKeyboard_4
                     891   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000C0A  1039 0040  892          move.b    4194370,D0
00000C0E  0042      
00000C10  C03C 007F  893          and.b     #127,D0
00000C14  1D40 FFFF  894          move.b    D0,-1(A6)
00000C18  6002       895          bra.s     FlushKeyboard_5
                     896   FlushKeyboard_4:
                     897   ; else
                     898   ; return ;
00000C1A  6002       899          bra.s     FlushKeyboard_6
                     900   FlushKeyboard_5:
00000C1C  60DC       901          bra       FlushKeyboard_1
                     902   FlushKeyboard_6:
00000C1E  4E5E       903          unlk      A6
00000C20  4E75       904          rts
                     905   ; }
                     906   ; }
                     907   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     908   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     909   ; char xtod(int c)
                     910   ; {
                     911   _xtod:
00000C22  4E56 0000  912          link      A6,#0
00000C26  48E7 2000  913          movem.l   D2,-(A7)
00000C2A  242E 0008  914          move.l    8(A6),D2
                     915   ; if ((char)(c) <= (char)('9'))
00000C2E  0C02 0039  916          cmp.b     #57,D2
00000C32  6E08       917          bgt.s     xtod_1
                     918   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000C34  1002       919          move.b    D2,D0
00000C36  0400 0030  920          sub.b     #48,D0
00000C3A  6014       921          bra.s     xtod_3
                     922   xtod_1:
                     923   ; else if((char)(c) > (char)('F'))    // assume lower case
00000C3C  0C02 0046  924          cmp.b     #70,D2
00000C40  6F08       925          ble.s     xtod_4
                     926   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000C42  1002       927          move.b    D2,D0
00000C44  0400 0057  928          sub.b     #87,D0
00000C48  6006       929          bra.s     xtod_3
                     930   xtod_4:
                     931   ; else
                     932   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000C4A  1002       933          move.b    D2,D0
00000C4C  0400 0037  934          sub.b     #55,D0
                     935   xtod_3:
00000C50  4CDF 0004  936          movem.l   (A7)+,D2
00000C54  4E5E       937          unlk      A6
00000C56  4E75       938          rts
                     939   ; }
                     940   ; int Get2HexDigits(char *CheckSumPtr)
                     941   ; {
                     942   _Get2HexDigits:
00000C58  4E56 0000  943          link      A6,#0
00000C5C  48E7 2000  944          movem.l   D2,-(A7)
                     945   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C60  2F00       946          move.l    D0,-(A7)
00000C62  6100 FF58  947          bsr       __getch
00000C66  2200       948          move.l    D0,D1
00000C68  201F       949          move.l    (A7)+,D0
00000C6A  2F01       950          move.l    D1,-(A7)
00000C6C  61B4       951          bsr       _xtod
00000C6E  584F       952          addq.w    #4,A7
00000C70  4880       953          ext.w     D0
00000C72  48C0       954          ext.l     D0
00000C74  E980       955          asl.l     #4,D0
00000C76  2F00       956          move.l    D0,-(A7)
00000C78  2F01       957          move.l    D1,-(A7)
00000C7A  6100 FF40  958          bsr       __getch
00000C7E  221F       959          move.l    (A7)+,D1
00000C80  2F00       960          move.l    D0,-(A7)
00000C82  619E       961          bsr       _xtod
00000C84  584F       962          addq.w    #4,A7
00000C86  2200       963          move.l    D0,D1
00000C88  201F       964          move.l    (A7)+,D0
00000C8A  4881       965          ext.w     D1
00000C8C  48C1       966          ext.l     D1
00000C8E  8081       967          or.l      D1,D0
00000C90  2400       968          move.l    D0,D2
                     969   ; if(CheckSumPtr)
00000C92  4AAE 0008  970          tst.l     8(A6)
00000C96  6706       971          beq.s     Get2HexDigits_1
                     972   ; *CheckSumPtr += i ;
00000C98  206E 0008  973          move.l    8(A6),A0
00000C9C  D510       974          add.b     D2,(A0)
                     975   Get2HexDigits_1:
                     976   ; return i ;
00000C9E  2002       977          move.l    D2,D0
00000CA0  4CDF 0004  978          movem.l   (A7)+,D2
00000CA4  4E5E       979          unlk      A6
00000CA6  4E75       980          rts
                     981   ; }
                     982   ; int Get4HexDigits(char *CheckSumPtr)
                     983   ; {
                     984   _Get4HexDigits:
00000CA8  4E56 0000  985          link      A6,#0
                     986   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000CAC  2F2E 0008  987          move.l    8(A6),-(A7)
00000CB0  61A6       988          bsr       _Get2HexDigits
00000CB2  584F       989          addq.w    #4,A7
00000CB4  E180       990          asl.l     #8,D0
00000CB6  2F00       991          move.l    D0,-(A7)
00000CB8  2F2E 0008  992          move.l    8(A6),-(A7)
00000CBC  619A       993          bsr       _Get2HexDigits
00000CBE  584F       994          addq.w    #4,A7
00000CC0  2200       995          move.l    D0,D1
00000CC2  201F       996          move.l    (A7)+,D0
00000CC4  8081       997          or.l      D1,D0
00000CC6  4E5E       998          unlk      A6
00000CC8  4E75       999          rts
                    1000   ; }
                    1001   ; int Get6HexDigits(char *CheckSumPtr)
                    1002   ; {
                    1003   _Get6HexDigits:
00000CCA  4E56 0000 1004          link      A6,#0
                    1005   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000CCE  2F2E 0008 1006          move.l    8(A6),-(A7)
00000CD2  61D4      1007          bsr       _Get4HexDigits
00000CD4  584F      1008          addq.w    #4,A7
00000CD6  E180      1009          asl.l     #8,D0
00000CD8  2F00      1010          move.l    D0,-(A7)
00000CDA  2F2E 0008 1011          move.l    8(A6),-(A7)
00000CDE  6100 FF78 1012          bsr       _Get2HexDigits
00000CE2  584F      1013          addq.w    #4,A7
00000CE4  2200      1014          move.l    D0,D1
00000CE6  201F      1015          move.l    (A7)+,D0
00000CE8  8081      1016          or.l      D1,D0
00000CEA  4E5E      1017          unlk      A6
00000CEC  4E75      1018          rts
                    1019   ; }
                    1020   ; int Get8HexDigits(char *CheckSumPtr)
                    1021   ; {
                    1022   _Get8HexDigits:
00000CEE  4E56 0000 1023          link      A6,#0
                    1024   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CF2  2F2E 0008 1025          move.l    8(A6),-(A7)
00000CF6  61B0      1026          bsr       _Get4HexDigits
00000CF8  584F      1027          addq.w    #4,A7
00000CFA  E180      1028          asl.l     #8,D0
00000CFC  E180      1029          asl.l     #8,D0
00000CFE  2F00      1030          move.l    D0,-(A7)
00000D00  2F2E 0008 1031          move.l    8(A6),-(A7)
00000D04  61A2      1032          bsr       _Get4HexDigits
00000D06  584F      1033          addq.w    #4,A7
00000D08  2200      1034          move.l    D0,D1
00000D0A  201F      1035          move.l    (A7)+,D0
00000D0C  8081      1036          or.l      D1,D0
00000D0E  4E5E      1037          unlk      A6
00000D10  4E75      1038          rts
                    1039   ; }
                    1040   ; char *strcatInstruction(char *s) {    return strcat(Instruction,s) ; }
                    1041   _strcatInstruction:
00000D12  4E56 0000 1042          link      A6,#0
00000D16  2F2E 0008 1043          move.l    8(A6),-(A7)
00000D1A  4879 0084 1044          pea       _Instruction
00000D1E  04DC      
00000D20  6100 4A12 1045          bsr       _strcat
00000D24  504F      1046          addq.w    #8,A7
00000D26  4E5E      1047          unlk      A6
00000D28  4E75      1048          rts
                    1049   ; char *strcpyInstruction(char *s) {    return strcpy(Instruction,s) ; }
                    1050   _strcpyInstruction:
00000D2A  4E56 0000 1051          link      A6,#0
00000D2E  2F2E 0008 1052          move.l    8(A6),-(A7)
00000D32  4879 0084 1053          pea       _Instruction
00000D36  04DC      
00000D38  6100 48E6 1054          bsr       _strcpy
00000D3C  504F      1055          addq.w    #8,A7
00000D3E  4E5E      1056          unlk      A6
00000D40  4E75      1057          rts
                    1058   ; void DisassembleProgram(void )
                    1059   ; {
                    1060   _DisassembleProgram:
00000D42  4E56 FFF8 1061          link      A6,#-8
00000D46  48E7 3038 1062          movem.l   D2/D3/A2/A3/A4,-(A7)
00000D4A  45F9 0084 1063          lea       _InstructionSize,A2
00000D4E  0178      
00000D50  47F9 0000 1064          lea       _printf,A3
00000D54  5776      
00000D56  49F9 0084 1065          lea       _Instruction,A4
00000D5A  04DC      
                    1066   ; char c ;
                    1067   ; int i, j ;
                    1068   ; unsigned short int *ProgramPtr ; // pointer to where the program is stored
                    1069   ; printf("\r\nEnter Start Address: ") ;
00000D5C  4879 0000 1070          pea       @m68kde~1_4
00000D60  61BE      
00000D62  4E93      1071          jsr       (A3)
00000D64  584F      1072          addq.w    #4,A7
                    1073   ; ProgramPtr = Get8HexDigits(0) ;
00000D66  42A7      1074          clr.l     -(A7)
00000D68  6184      1075          bsr       _Get8HexDigits
00000D6A  584F      1076          addq.w    #4,A7
00000D6C  2400      1077          move.l    D0,D2
                    1078   ; printf("\r\n<ESC> = Abort, SPACE to Continue") ;
00000D6E  4879 0000 1079          pea       @m68kde~1_5
00000D72  61D6      
00000D74  4E93      1080          jsr       (A3)
00000D76  584F      1081          addq.w    #4,A7
                    1082   ; while(1)    {
                    1083   DisassembleProgram_1:
                    1084   ; for(i = 0; i < 20; i ++)
00000D78  4283      1085          clr.l     D3
                    1086   DisassembleProgram_4:
00000D7A  0C83 0000 1087          cmp.l     #20,D3
00000D7E  0014      
00000D80  6C00 017C 1088          bge       DisassembleProgram_6
                    1089   ; {
                    1090   ; InstructionSize = 1 ;                   // assume all instruction are at least 1 word
00000D84  24BC 0000 1091          move.l    #1,(A2)
00000D88  0001      
                    1092   ; DisassembleInstruction(ProgramPtr) ;    // build up string for disassembled instruction at address in programptr
00000D8A  2F02      1093          move.l    D2,-(A7)
00000D8C  6100 2972 1094          bsr       _DisassembleInstruction
00000D90  584F      1095          addq.w    #4,A7
                    1096   ; if(InstructionSize == 1)
00000D92  2012      1097          move.l    (A2),D0
00000D94  0C80 0000 1098          cmp.l     #1,D0
00000D98  0001      
00000D9A  6620      1099          bne.s     DisassembleProgram_7
                    1100   ; printf("\r\n%08X  %04X                        %s", ProgramPtr, ProgramPtr[0], Instruction) ;
00000D9C  2F0C      1101          move.l    A4,-(A7)
00000D9E  2042      1102          move.l    D2,A0
00000DA0  3210      1103          move.w    (A0),D1
00000DA2  C2BC 0000 1104          and.l     #65535,D1
00000DA6  FFFF      
00000DA8  2F01      1105          move.l    D1,-(A7)
00000DAA  2F02      1106          move.l    D2,-(A7)
00000DAC  4879 0000 1107          pea       @m68kde~1_6
00000DB0  61FA      
00000DB2  4E93      1108          jsr       (A3)
00000DB4  DEFC 0010 1109          add.w     #16,A7
00000DB8  6000 0138 1110          bra       DisassembleProgram_15
                    1111   DisassembleProgram_7:
                    1112   ; else if(InstructionSize == 2)
00000DBC  2012      1113          move.l    (A2),D0
00000DBE  0C80 0000 1114          cmp.l     #2,D0
00000DC2  0002      
00000DC4  662E      1115          bne.s     DisassembleProgram_9
                    1116   ; printf("\r\n%08X  %04X %04X                   %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], Instruction) ;
00000DC6  2F0C      1117          move.l    A4,-(A7)
00000DC8  2042      1118          move.l    D2,A0
00000DCA  3228 0002 1119          move.w    2(A0),D1
00000DCE  C2BC 0000 1120          and.l     #65535,D1
00000DD2  FFFF      
00000DD4  2F01      1121          move.l    D1,-(A7)
00000DD6  2042      1122          move.l    D2,A0
00000DD8  3210      1123          move.w    (A0),D1
00000DDA  C2BC 0000 1124          and.l     #65535,D1
00000DDE  FFFF      
00000DE0  2F01      1125          move.l    D1,-(A7)
00000DE2  2F02      1126          move.l    D2,-(A7)
00000DE4  4879 0000 1127          pea       @m68kde~1_7
00000DE8  6222      
00000DEA  4E93      1128          jsr       (A3)
00000DEC  DEFC 0014 1129          add.w     #20,A7
00000DF0  6000 0100 1130          bra       DisassembleProgram_15
                    1131   DisassembleProgram_9:
                    1132   ; else if(InstructionSize == 3)
00000DF4  2012      1133          move.l    (A2),D0
00000DF6  0C80 0000 1134          cmp.l     #3,D0
00000DFA  0003      
00000DFC  6600 003E 1135          bne       DisassembleProgram_11
                    1136   ; printf("\r\n%08X  %04X %04X %04X              %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], Instruction) ;
00000E00  2F0C      1137          move.l    A4,-(A7)
00000E02  2042      1138          move.l    D2,A0
00000E04  3228 0004 1139          move.w    4(A0),D1
00000E08  C2BC 0000 1140          and.l     #65535,D1
00000E0C  FFFF      
00000E0E  2F01      1141          move.l    D1,-(A7)
00000E10  2042      1142          move.l    D2,A0
00000E12  3228 0002 1143          move.w    2(A0),D1
00000E16  C2BC 0000 1144          and.l     #65535,D1
00000E1A  FFFF      
00000E1C  2F01      1145          move.l    D1,-(A7)
00000E1E  2042      1146          move.l    D2,A0
00000E20  3210      1147          move.w    (A0),D1
00000E22  C2BC 0000 1148          and.l     #65535,D1
00000E26  FFFF      
00000E28  2F01      1149          move.l    D1,-(A7)
00000E2A  2F02      1150          move.l    D2,-(A7)
00000E2C  4879 0000 1151          pea       @m68kde~1_8
00000E30  624A      
00000E32  4E93      1152          jsr       (A3)
00000E34  DEFC 0018 1153          add.w     #24,A7
00000E38  6000 00B8 1154          bra       DisassembleProgram_15
                    1155   DisassembleProgram_11:
                    1156   ; else if(InstructionSize == 4)
00000E3C  2012      1157          move.l    (A2),D0
00000E3E  0C80 0000 1158          cmp.l     #4,D0
00000E42  0004      
00000E44  6600 004C 1159          bne       DisassembleProgram_13
                    1160   ; printf("\r\n%08X  %04X %04X %04X %04X         %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], ProgramPtr[3], Instruction) ;
00000E48  2F0C      1161          move.l    A4,-(A7)
00000E4A  2042      1162          move.l    D2,A0
00000E4C  3228 0006 1163          move.w    6(A0),D1
00000E50  C2BC 0000 1164          and.l     #65535,D1
00000E54  FFFF      
00000E56  2F01      1165          move.l    D1,-(A7)
00000E58  2042      1166          move.l    D2,A0
00000E5A  3228 0004 1167          move.w    4(A0),D1
00000E5E  C2BC 0000 1168          and.l     #65535,D1
00000E62  FFFF      
00000E64  2F01      1169          move.l    D1,-(A7)
00000E66  2042      1170          move.l    D2,A0
00000E68  3228 0002 1171          move.w    2(A0),D1
00000E6C  C2BC 0000 1172          and.l     #65535,D1
00000E70  FFFF      
00000E72  2F01      1173          move.l    D1,-(A7)
00000E74  2042      1174          move.l    D2,A0
00000E76  3210      1175          move.w    (A0),D1
00000E78  C2BC 0000 1176          and.l     #65535,D1
00000E7C  FFFF      
00000E7E  2F01      1177          move.l    D1,-(A7)
00000E80  2F02      1178          move.l    D2,-(A7)
00000E82  4879 0000 1179          pea       @m68kde~1_9
00000E86  6272      
00000E88  4E93      1180          jsr       (A3)
00000E8A  DEFC 001C 1181          add.w     #28,A7
00000E8E  6000 0062 1182          bra       DisassembleProgram_15
                    1183   DisassembleProgram_13:
                    1184   ; else if(InstructionSize == 5)
00000E92  2012      1185          move.l    (A2),D0
00000E94  0C80 0000 1186          cmp.l     #5,D0
00000E98  0005      
00000E9A  6600 0056 1187          bne       DisassembleProgram_15
                    1188   ; printf("\r\n%08X  %04X %04X %04X %04X %04X    %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], ProgramPtr[3], ProgramPtr[4], Instruction) ;
00000E9E  2F0C      1189          move.l    A4,-(A7)
00000EA0  2042      1190          move.l    D2,A0
00000EA2  3228 0008 1191          move.w    8(A0),D1
00000EA6  C2BC 0000 1192          and.l     #65535,D1
00000EAA  FFFF      
00000EAC  2F01      1193          move.l    D1,-(A7)
00000EAE  2042      1194          move.l    D2,A0
00000EB0  3228 0006 1195          move.w    6(A0),D1
00000EB4  C2BC 0000 1196          and.l     #65535,D1
00000EB8  FFFF      
00000EBA  2F01      1197          move.l    D1,-(A7)
00000EBC  2042      1198          move.l    D2,A0
00000EBE  3228 0004 1199          move.w    4(A0),D1
00000EC2  C2BC 0000 1200          and.l     #65535,D1
00000EC6  FFFF      
00000EC8  2F01      1201          move.l    D1,-(A7)
00000ECA  2042      1202          move.l    D2,A0
00000ECC  3228 0002 1203          move.w    2(A0),D1
00000ED0  C2BC 0000 1204          and.l     #65535,D1
00000ED4  FFFF      
00000ED6  2F01      1205          move.l    D1,-(A7)
00000ED8  2042      1206          move.l    D2,A0
00000EDA  3210      1207          move.w    (A0),D1
00000EDC  C2BC 0000 1208          and.l     #65535,D1
00000EE0  FFFF      
00000EE2  2F01      1209          move.l    D1,-(A7)
00000EE4  2F02      1210          move.l    D2,-(A7)
00000EE6  4879 0000 1211          pea       @m68kde~1_10
00000EEA  629A      
00000EEC  4E93      1212          jsr       (A3)
00000EEE  DEFC 0020 1213          add.w     #32,A7
                    1214   DisassembleProgram_15:
                    1215   ; ProgramPtr += InstructionSize ;
00000EF2  2012      1216          move.l    (A2),D0
00000EF4  E388      1217          lsl.l     #1,D0
00000EF6  D480      1218          add.l     D0,D2
00000EF8  5283      1219          addq.l    #1,D3
00000EFA  6000 FE7E 1220          bra       DisassembleProgram_4
                    1221   DisassembleProgram_6:
                    1222   ; }
                    1223   ; c = _getch() ;
00000EFE  6100 FCBC 1224          bsr       __getch
00000F02  1D40 FFFB 1225          move.b    D0,-5(A6)
                    1226   ; if(c == 0x1b)          // break on ESC
00000F06  102E FFFB 1227          move.b    -5(A6),D0
00000F0A  4880      1228          ext.w     D0
00000F0C  48C0      1229          ext.l     D0
00000F0E  0C80 0000 1230          cmp.l     #27,D0
00000F12  001B      
00000F14  6602      1231          bne.s     DisassembleProgram_17
                    1232   ; return ;
00000F16  6004      1233          bra.s     DisassembleProgram_19
                    1234   DisassembleProgram_17:
00000F18  6000 FE5E 1235          bra       DisassembleProgram_1
                    1236   DisassembleProgram_19:
00000F1C  4CDF 1C0C 1237          movem.l   (A7)+,D2/D3/A2/A3/A4
00000F20  4E5E      1238          unlk      A6
00000F22  4E75      1239          rts
                    1240   ; }
                    1241   ; }
                    1242   ; void DumpMemory(void)   // simple dump memory fn
                    1243   ; {
                    1244   _DumpMemory:
00000F24  48E7 3C30 1245          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000F28  45F9 0000 1246          lea       _printf,A2
00000F2C  5776      
00000F2E  47F9 0000 1247          lea       _putch,A3
00000F32  5668      
                    1248   ; int i, j ;
                    1249   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1250   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000F34  4879 0000 1251          pea       @m68kde~1_11
00000F38  62C2      
00000F3A  4E92      1252          jsr       (A2)
00000F3C  584F      1253          addq.w    #4,A7
                    1254   ; printf("\r\nEnter Start Address: ") ;
00000F3E  4879 0000 1255          pea       @m68kde~1_12
00000F42  62FC      
00000F44  4E92      1256          jsr       (A2)
00000F46  584F      1257          addq.w    #4,A7
                    1258   ; RamPtr = Get8HexDigits(0) ;
00000F48  42A7      1259          clr.l     -(A7)
00000F4A  6100 FDA2 1260          bsr       _Get8HexDigits
00000F4E  584F      1261          addq.w    #4,A7
00000F50  2600      1262          move.l    D0,D3
                    1263   ; while(1)    {
                    1264   DumpMemory_1:
                    1265   ; for(i = 0; i < 16; i ++)    {
00000F52  4285      1266          clr.l     D5
                    1267   DumpMemory_4:
00000F54  0C85 0000 1268          cmp.l     #16,D5
00000F58  0010      
00000F5A  6C00 009C 1269          bge       DumpMemory_6
                    1270   ; printf("\r\n%08x ", RamPtr) ;
00000F5E  2F03      1271          move.l    D3,-(A7)
00000F60  4879 0000 1272          pea       @m68kde~1_13
00000F64  6314      
00000F66  4E92      1273          jsr       (A2)
00000F68  504F      1274          addq.w    #8,A7
                    1275   ; for(j=0; j < 16; j ++)  {
00000F6A  4282      1276          clr.l     D2
                    1277   DumpMemory_7:
00000F6C  0C82 0000 1278          cmp.l     #16,D2
00000F70  0010      
00000F72  6C24      1279          bge.s     DumpMemory_9
                    1280   ; printf("%02X",RamPtr[j]) ;
00000F74  2043      1281          move.l    D3,A0
00000F76  1230 2800 1282          move.b    0(A0,D2.L),D1
00000F7A  C2BC 0000 1283          and.l     #255,D1
00000F7E  00FF      
00000F80  2F01      1284          move.l    D1,-(A7)
00000F82  4879 0000 1285          pea       @m68kde~1_14
00000F86  631C      
00000F88  4E92      1286          jsr       (A2)
00000F8A  504F      1287          addq.w    #8,A7
                    1288   ; putchar(' ') ;
00000F8C  4878 0020 1289          pea       32
00000F90  4E93      1290          jsr       (A3)
00000F92  584F      1291          addq.w    #4,A7
00000F94  5282      1292          addq.l    #1,D2
00000F96  60D4      1293          bra       DumpMemory_7
                    1294   DumpMemory_9:
                    1295   ; }
                    1296   ; // now display the data as ASCII at the end
                    1297   ; printf("  ") ;
00000F98  4879 0000 1298          pea       @m68kde~1_15
00000F9C  6322      
00000F9E  4E92      1299          jsr       (A2)
00000FA0  584F      1300          addq.w    #4,A7
                    1301   ; for(j = 0; j < 16; j++) {
00000FA2  4282      1302          clr.l     D2
                    1303   DumpMemory_10:
00000FA4  0C82 0000 1304          cmp.l     #16,D2
00000FA8  0010      
00000FAA  6C00 0040 1305          bge       DumpMemory_12
                    1306   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000FAE  2043      1307          move.l    D3,A0
00000FB0  1030 2800 1308          move.b    0(A0,D2.L),D0
00000FB4  4880      1309          ext.w     D0
00000FB6  48C0      1310          ext.l     D0
00000FB8  C0BC 0000 1311          and.l     #127,D0
00000FBC  007F      
00000FBE  1800      1312          move.b    D0,D4
                    1313   ; if((c > (char)(0x7f)) || (c < ' '))
00000FC0  0C04 007F 1314          cmp.b     #127,D4
00000FC4  6206      1315          bhi.s     DumpMemory_15
00000FC6  0C04 0020 1316          cmp.b     #32,D4
00000FCA  640A      1317          bhs.s     DumpMemory_13
                    1318   DumpMemory_15:
                    1319   ; putchar('.') ;
00000FCC  4878 002E 1320          pea       46
00000FD0  4E93      1321          jsr       (A3)
00000FD2  584F      1322          addq.w    #4,A7
00000FD4  6012      1323          bra.s     DumpMemory_14
                    1324   DumpMemory_13:
                    1325   ; else
                    1326   ; putchar(RamPtr[j]) ;
00000FD6  2043      1327          move.l    D3,A0
00000FD8  1230 2800 1328          move.b    0(A0,D2.L),D1
00000FDC  C2BC 0000 1329          and.l     #255,D1
00000FE0  00FF      
00000FE2  2F01      1330          move.l    D1,-(A7)
00000FE4  4E93      1331          jsr       (A3)
00000FE6  584F      1332          addq.w    #4,A7
                    1333   DumpMemory_14:
00000FE8  5282      1334          addq.l    #1,D2
00000FEA  60B8      1335          bra       DumpMemory_10
                    1336   DumpMemory_12:
                    1337   ; }
                    1338   ; RamPtr = RamPtr + 16 ;
00000FEC  0683 0000 1339          add.l     #16,D3
00000FF0  0010      
00000FF2  5285      1340          addq.l    #1,D5
00000FF4  6000 FF5E 1341          bra       DumpMemory_4
                    1342   DumpMemory_6:
                    1343   ; }
                    1344   ; printf("\r\n") ;
00000FF8  4879 0000 1345          pea       @m68kde~1_16
00000FFC  6326      
00000FFE  4E92      1346          jsr       (A2)
00001000  584F      1347          addq.w    #4,A7
                    1348   ; c = _getch() ;
00001002  6100 FBB8 1349          bsr       __getch
00001006  1800      1350          move.b    D0,D4
                    1351   ; if(c == 0x1b)          // break on ESC
00001008  C8BC 0000 1352          and.l     #255,D4
0000100C  00FF      
0000100E  0C84 0000 1353          cmp.l     #27,D4
00001012  001B      
00001014  6602      1354          bne.s     DumpMemory_16
                    1355   ; break ;
00001016  6004      1356          bra.s     DumpMemory_3
                    1357   DumpMemory_16:
00001018  6000 FF38 1358          bra       DumpMemory_1
                    1359   DumpMemory_3:
0000101C  4CDF 0C3C 1360          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00001020  4E75      1361          rts
                    1362   ; }
                    1363   ; }
                    1364   ; void FillMemory()
                    1365   ; {
                    1366   _FillMemory:
00001022  48E7 3820 1367          movem.l   D2/D3/D4/A2,-(A7)
00001026  45F9 0000 1368          lea       _printf,A2
0000102A  5776      
                    1369   ; char *StartRamPtr, *EndRamPtr ;
                    1370   ; unsigned char FillData ;
                    1371   ; printf("\r\nFill Memory Block") ;
0000102C  4879 0000 1372          pea       @m68kde~1_17
00001030  632A      
00001032  4E92      1373          jsr       (A2)
00001034  584F      1374          addq.w    #4,A7
                    1375   ; printf("\r\nEnter Start Address: ") ;
00001036  4879 0000 1376          pea       @m68kde~1_18
0000103A  633E      
0000103C  4E92      1377          jsr       (A2)
0000103E  584F      1378          addq.w    #4,A7
                    1379   ; StartRamPtr = Get8HexDigits(0) ;
00001040  42A7      1380          clr.l     -(A7)
00001042  6100 FCAA 1381          bsr       _Get8HexDigits
00001046  584F      1382          addq.w    #4,A7
00001048  2400      1383          move.l    D0,D2
                    1384   ; printf("\r\nEnter End Address: ") ;
0000104A  4879 0000 1385          pea       @m68kde~1_19
0000104E  6356      
00001050  4E92      1386          jsr       (A2)
00001052  584F      1387          addq.w    #4,A7
                    1388   ; EndRamPtr = Get8HexDigits(0) ;
00001054  42A7      1389          clr.l     -(A7)
00001056  6100 FC96 1390          bsr       _Get8HexDigits
0000105A  584F      1391          addq.w    #4,A7
0000105C  2800      1392          move.l    D0,D4
                    1393   ; printf("\r\nEnter Fill Data: ") ;
0000105E  4879 0000 1394          pea       @m68kde~1_20
00001062  636C      
00001064  4E92      1395          jsr       (A2)
00001066  584F      1396          addq.w    #4,A7
                    1397   ; FillData = Get2HexDigits(0) ;
00001068  42A7      1398          clr.l     -(A7)
0000106A  6100 FBEC 1399          bsr       _Get2HexDigits
0000106E  584F      1400          addq.w    #4,A7
00001070  1600      1401          move.b    D0,D3
                    1402   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00001072  C6BC 0000 1403          and.l     #255,D3
00001076  00FF      
00001078  2F03      1404          move.l    D3,-(A7)
0000107A  2F04      1405          move.l    D4,-(A7)
0000107C  2F02      1406          move.l    D2,-(A7)
0000107E  4879 0000 1407          pea       @m68kde~1_21
00001082  6380      
00001084  4E92      1408          jsr       (A2)
00001086  DEFC 0010 1409          add.w     #16,A7
                    1410   ; while(StartRamPtr < EndRamPtr)
                    1411   FillMemory_1:
0000108A  B484      1412          cmp.l     D4,D2
0000108C  6408      1413          bhs.s     FillMemory_3
                    1414   ; *StartRamPtr++ = FillData ;
0000108E  2042      1415          move.l    D2,A0
00001090  5282      1416          addq.l    #1,D2
00001092  1083      1417          move.b    D3,(A0)
00001094  60F4      1418          bra       FillMemory_1
                    1419   FillMemory_3:
00001096  4CDF 041C 1420          movem.l   (A7)+,D2/D3/D4/A2
0000109A  4E75      1421          rts
                    1422   ; }
                    1423   ; void Load_SRecordFile()
                    1424   ; {
                    1425   _Load_SRecordFile:
0000109C  4E56 FFE0 1426          link      A6,#-32
000010A0  48E7 3F38 1427          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4,-(A7)
000010A4  45EE FFFA 1428          lea       -6(A6),A2
000010A8  47F8 0C58 1429          lea       _Get2HexDigits,A3
000010AC  49F9 0000 1430          lea       _printf,A4
000010B0  5776      
                    1431   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail ;
                    1432   ; int result, ByteCount ;
                    1433   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1434   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1435   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
000010B2  7E00      1436          moveq     #0,D7
                    1437   ; AddressFail = 0 ;
000010B4  42AE FFEE 1438          clr.l     -18(A6)
                    1439   ; printf("\r\nDownload Program to Memory....<ESC> to Cancel") ;
000010B8  4879 0000 1440          pea       @m68kde~1_22
000010BC  63B0      
000010BE  4E94      1441          jsr       (A4)
000010C0  584F      1442          addq.w    #4,A7
                    1443   ; printf("\r\nWaiting for Laptop to send '.HEX' file:\r\n") ;
000010C2  4879 0000 1444          pea       @m68kde~1_23
000010C6  63E0      
000010C8  4E94      1445          jsr       (A4)
000010CA  584F      1446          addq.w    #4,A7
                    1447   ; while(1)    {
                    1448   Load_SRecordFile_1:
                    1449   ; CheckSum = 0 ;
000010CC  4212      1450          clr.b     (A2)
                    1451   ; do {
                    1452   Load_SRecordFile_4:
                    1453   ; c = toupper(_getch()) ;
000010CE  2F00      1454          move.l    D0,-(A7)
000010D0  6100 FAEA 1455          bsr       __getch
000010D4  2200      1456          move.l    D0,D1
000010D6  201F      1457          move.l    (A7)+,D0
000010D8  2F01      1458          move.l    D1,-(A7)
000010DA  6100 466E 1459          bsr       _toupper
000010DE  584F      1460          addq.w    #4,A7
000010E0  1C00      1461          move.b    D0,D6
                    1462   ; if(c == 0x1b )      // if break
000010E2  4886      1463          ext.w     D6
000010E4  48C6      1464          ext.l     D6
000010E6  0C86 0000 1465          cmp.l     #27,D6
000010EA  001B      
000010EC  6604      1466          bne.s     Load_SRecordFile_6
                    1467   ; return;
000010EE  6000 0110 1468          bra       Load_SRecordFile_8
                    1469   Load_SRecordFile_6:
000010F2  0C06 0053 1470          cmp.b     #83,D6
000010F6  66D6      1471          bne       Load_SRecordFile_4
                    1472   ; }while(c != (char)('S'));   // wait for S start of header
                    1473   ; HeaderType = _getch() ;
000010F8  6100 FAC2 1474          bsr       __getch
000010FC  1600      1475          move.b    D0,D3
                    1476   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
000010FE  0C03 0030 1477          cmp.b     #48,D3
00001102  6706      1478          beq.s     Load_SRecordFile_11
00001104  0C03 0035 1479          cmp.b     #53,D3
00001108  6604      1480          bne.s     Load_SRecordFile_9
                    1481   Load_SRecordFile_11:
                    1482   ; continue ;
0000110A  6000 00BA 1483          bra       Load_SRecordFile_2
                    1484   Load_SRecordFile_9:
                    1485   ; if(HeaderType >= (char)('7'))
0000110E  0C03 0037 1486          cmp.b     #55,D3
00001112  6D04      1487          blt.s     Load_SRecordFile_12
                    1488   ; break ;                 // end load on s7,s8,s9 records
00001114  6000 00B4 1489          bra       Load_SRecordFile_3
                    1490   Load_SRecordFile_12:
                    1491   ; // get the bytecount
                    1492   ; ByteCount = Get2HexDigits(&CheckSum) ;
00001118  2F0A      1493          move.l    A2,-(A7)
0000111A  4E93      1494          jsr       (A3)
0000111C  584F      1495          addq.w    #4,A7
0000111E  2D40 FFF6 1496          move.l    D0,-10(A6)
                    1497   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1498   ; if(HeaderType == (char)('1')) {
00001122  0C03 0031 1499          cmp.b     #49,D3
00001126  660E      1500          bne.s     Load_SRecordFile_14
                    1501   ; AddressSize = 2 ;       // 2 byte address
00001128  7A02      1502          moveq     #2,D5
                    1503   ; Address = Get4HexDigits(&CheckSum);
0000112A  2F0A      1504          move.l    A2,-(A7)
0000112C  6100 FB7A 1505          bsr       _Get4HexDigits
00001130  584F      1506          addq.w    #4,A7
00001132  2800      1507          move.l    D0,D4
00001134  6020      1508          bra.s     Load_SRecordFile_17
                    1509   Load_SRecordFile_14:
                    1510   ; }
                    1511   ; else if (HeaderType == (char)('2')) {
00001136  0C03 0032 1512          cmp.b     #50,D3
0000113A  660E      1513          bne.s     Load_SRecordFile_16
                    1514   ; AddressSize = 3 ;       // 3 byte address
0000113C  7A03      1515          moveq     #3,D5
                    1516   ; Address = Get6HexDigits(&CheckSum) ;
0000113E  2F0A      1517          move.l    A2,-(A7)
00001140  6100 FB88 1518          bsr       _Get6HexDigits
00001144  584F      1519          addq.w    #4,A7
00001146  2800      1520          move.l    D0,D4
00001148  600C      1521          bra.s     Load_SRecordFile_17
                    1522   Load_SRecordFile_16:
                    1523   ; }
                    1524   ; else    {
                    1525   ; AddressSize = 4 ;       // 4 byte address
0000114A  7A04      1526          moveq     #4,D5
                    1527   ; Address = Get8HexDigits(&CheckSum) ;
0000114C  2F0A      1528          move.l    A2,-(A7)
0000114E  6100 FB9E 1529          bsr       _Get8HexDigits
00001152  584F      1530          addq.w    #4,A7
00001154  2800      1531          move.l    D0,D4
                    1532   Load_SRecordFile_17:
                    1533   ; }
                    1534   ; RamPtr = (char *)(Address) ;                            // point to download area
00001156  2D44 FFFC 1535          move.l    D4,-4(A6)
                    1536   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
0000115A  202E FFF6 1537          move.l    -10(A6),D0
0000115E  9085      1538          sub.l     D5,D0
00001160  5380      1539          subq.l    #1,D0
00001162  2D40 FFE6 1540          move.l    D0,-26(A6)
                    1541   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00001166  4282      1542          clr.l     D2
                    1543   Load_SRecordFile_18:
00001168  B4AE FFE6 1544          cmp.l     -26(A6),D2
0000116C  6C1C      1545          bge.s     Load_SRecordFile_20
                    1546   ; DataByte = Get2HexDigits(&CheckSum) ;
0000116E  2F0A      1547          move.l    A2,-(A7)
00001170  4E93      1548          jsr       (A3)
00001172  584F      1549          addq.w    #4,A7
00001174  2D40 FFE2 1550          move.l    D0,-30(A6)
                    1551   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00001178  202E FFE2 1552          move.l    -30(A6),D0
0000117C  206E FFFC 1553          move.l    -4(A6),A0
00001180  52AE FFFC 1554          addq.l    #1,-4(A6)
00001184  1080      1555          move.b    D0,(A0)
00001186  5282      1556          addq.l    #1,D2
00001188  60DE      1557          bra       Load_SRecordFile_18
                    1558   Load_SRecordFile_20:
                    1559   ; }
                    1560   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1561   ; ReadCheckSum = Get2HexDigits(0) ;
0000118A  42A7      1562          clr.l     -(A7)
0000118C  4E93      1563          jsr       (A3)
0000118E  584F      1564          addq.w    #4,A7
00001190  1D40 FFFB 1565          move.b    D0,-5(A6)
                    1566   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00001194  1012      1567          move.b    (A2),D0
00001196  4600      1568          not.b     D0
00001198  4880      1569          ext.w     D0
0000119A  48C0      1570          ext.l     D0
0000119C  C0BC 0000 1571          and.l     #255,D0
000011A0  00FF      
000011A2  122E FFFB 1572          move.b    -5(A6),D1
000011A6  4881      1573          ext.w     D1
000011A8  48C1      1574          ext.l     D1
000011AA  C2BC 0000 1575          and.l     #255,D1
000011AE  00FF      
000011B0  B081      1576          cmp.l     D1,D0
000011B2  6708      1577          beq.s     Load_SRecordFile_21
                    1578   ; LoadFailed = 1 ;
000011B4  7E01      1579          moveq     #1,D7
                    1580   ; FailedAddress = Address ;
000011B6  2D44 FFEA 1581          move.l    D4,-22(A6)
                    1582   ; break;
000011BA  600E      1583          bra.s     Load_SRecordFile_3
                    1584   Load_SRecordFile_21:
                    1585   ; }
                    1586   ; putchar('\n') ;
000011BC  4878 000A 1587          pea       10
000011C0  6100 44A6 1588          bsr       _putch
000011C4  584F      1589          addq.w    #4,A7
                    1590   Load_SRecordFile_2:
000011C6  6000 FF04 1591          bra       Load_SRecordFile_1
                    1592   Load_SRecordFile_3:
                    1593   ; }
                    1594   ; if(LoadFailed == 1) {
000011CA  0C87 0000 1595          cmp.l     #1,D7
000011CE  0001      
000011D0  6610      1596          bne.s     Load_SRecordFile_23
                    1597   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
000011D2  2F2E FFEA 1598          move.l    -22(A6),-(A7)
000011D6  4879 0000 1599          pea       @m68kde~1_24
000011DA  640C      
000011DC  4E94      1600          jsr       (A4)
000011DE  504F      1601          addq.w    #8,A7
000011E0  600C      1602          bra.s     Load_SRecordFile_24
                    1603   Load_SRecordFile_23:
                    1604   ; }
                    1605   ; else
                    1606   ; puts("\r\nLoad Successful.....\r\n");
000011E2  4879 0000 1607          pea       @m68kde~1_25
000011E6  6432      
000011E8  6100 4446 1608          bsr       _puts
000011EC  584F      1609          addq.w    #4,A7
                    1610   Load_SRecordFile_24:
                    1611   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1612   ; for(i = 0; i < 400000; i ++)
000011EE  4282      1613          clr.l     D2
                    1614   Load_SRecordFile_25:
000011F0  0C82 0006 1615          cmp.l     #400000,D2
000011F4  1A80      
000011F6  6C04      1616          bge.s     Load_SRecordFile_27
000011F8  5282      1617          addq.l    #1,D2
000011FA  60F4      1618          bra       Load_SRecordFile_25
                    1619   Load_SRecordFile_27:
                    1620   ; ;
                    1621   ; FlushKeyboard() ;
000011FC  6100 F9F8 1622          bsr       _FlushKeyboard
                    1623   Load_SRecordFile_8:
00001200  4CDF 1CFC 1624          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4
00001204  4E5E      1625          unlk      A6
00001206  4E75      1626          rts
                    1627   ; }
                    1628   ; void MemoryChange(void)
                    1629   ; {
                    1630   _MemoryChange:
00001208  48E7 3820 1631          movem.l   D2/D3/D4/A2,-(A7)
0000120C  45F9 0000 1632          lea       _printf,A2
00001210  5776      
                    1633   ; unsigned char *RamPtr,c ; // pointer to memory
                    1634   ; int Data ;
                    1635   ; printf("\r\nExamine and Change Memory") ;
00001212  4879 0000 1636          pea       @m68kde~1_26
00001216  644C      
00001218  4E92      1637          jsr       (A2)
0000121A  584F      1638          addq.w    #4,A7
                    1639   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
0000121C  4879 0000 1640          pea       @m68kde~1_27
00001220  6468      
00001222  4E92      1641          jsr       (A2)
00001224  584F      1642          addq.w    #4,A7
                    1643   ; printf("\r\nEnter Address: ") ;
00001226  4879 0000 1644          pea       @m68kde~1_28
0000122A  64AE      
0000122C  4E92      1645          jsr       (A2)
0000122E  584F      1646          addq.w    #4,A7
                    1647   ; RamPtr = Get8HexDigits(0) ;
00001230  42A7      1648          clr.l     -(A7)
00001232  6100 FABA 1649          bsr       _Get8HexDigits
00001236  584F      1650          addq.w    #4,A7
00001238  2600      1651          move.l    D0,D3
                    1652   ; while(1)    {
                    1653   MemoryChange_1:
                    1654   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
0000123A  2043      1655          move.l    D3,A0
0000123C  1210      1656          move.b    (A0),D1
0000123E  C2BC 0000 1657          and.l     #255,D1
00001242  00FF      
00001244  2F01      1658          move.l    D1,-(A7)
00001246  2F03      1659          move.l    D3,-(A7)
00001248  4879 0000 1660          pea       @m68kde~1_29
0000124C  64C0      
0000124E  4E92      1661          jsr       (A2)
00001250  DEFC 000C 1662          add.w     #12,A7
                    1663   ; c = tolower(_getch()) ;
00001254  2F00      1664          move.l    D0,-(A7)
00001256  6100 F964 1665          bsr       __getch
0000125A  2200      1666          move.l    D0,D1
0000125C  201F      1667          move.l    (A7)+,D0
0000125E  2F01      1668          move.l    D1,-(A7)
00001260  6100 4472 1669          bsr       _tolower
00001264  584F      1670          addq.w    #4,A7
00001266  1400      1671          move.b    D0,D2
                    1672   ; if(c == (char)(0x1b))
00001268  0C02 001B 1673          cmp.b     #27,D2
0000126C  6604      1674          bne.s     MemoryChange_4
                    1675   ; return ;                                // abort on escape
0000126E  6000 008C 1676          bra       MemoryChange_6
                    1677   MemoryChange_4:
                    1678   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001272  0C02 0030 1679          cmp.b     #48,D2
00001276  6506      1680          blo.s     MemoryChange_10
00001278  0C02 0039 1681          cmp.b     #57,D2
0000127C  6310      1682          bls.s     MemoryChange_9
                    1683   MemoryChange_10:
0000127E  0C02 0061 1684          cmp.b     #97,D2
00001282  6500 006A 1685          blo       MemoryChange_7
00001286  0C02 0066 1686          cmp.b     #102,D2
0000128A  6200 0062 1687          bhi       MemoryChange_7
                    1688   MemoryChange_9:
                    1689   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000128E  C4BC 0000 1690          and.l     #255,D2
00001292  00FF      
00001294  2F02      1691          move.l    D2,-(A7)
00001296  6100 F98A 1692          bsr       _xtod
0000129A  584F      1693          addq.w    #4,A7
0000129C  4880      1694          ext.w     D0
0000129E  48C0      1695          ext.l     D0
000012A0  E980      1696          asl.l     #4,D0
000012A2  2F00      1697          move.l    D0,-(A7)
000012A4  2F01      1698          move.l    D1,-(A7)
000012A6  6100 F914 1699          bsr       __getch
000012AA  221F      1700          move.l    (A7)+,D1
000012AC  2F00      1701          move.l    D0,-(A7)
000012AE  6100 F972 1702          bsr       _xtod
000012B2  584F      1703          addq.w    #4,A7
000012B4  2200      1704          move.l    D0,D1
000012B6  201F      1705          move.l    (A7)+,D0
000012B8  4881      1706          ext.w     D1
000012BA  48C1      1707          ext.l     D1
000012BC  8081      1708          or.l      D1,D0
000012BE  2800      1709          move.l    D0,D4
                    1710   ; *RamPtr = (char)(Data) ;
000012C0  2043      1711          move.l    D3,A0
000012C2  1084      1712          move.b    D4,(A0)
                    1713   ; if(*RamPtr != Data) {
000012C4  2043      1714          move.l    D3,A0
000012C6  1010      1715          move.b    (A0),D0
000012C8  C0BC 0000 1716          and.l     #255,D0
000012CC  00FF      
000012CE  B084      1717          cmp.l     D4,D0
000012D0  671A      1718          beq.s     MemoryChange_11
                    1719   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
000012D2  2043      1720          move.l    D3,A0
000012D4  1210      1721          move.b    (A0),D1
000012D6  C2BC 0000 1722          and.l     #255,D1
000012DA  00FF      
000012DC  2F01      1723          move.l    D1,-(A7)
000012DE  2F04      1724          move.l    D4,-(A7)
000012E0  4879 0000 1725          pea       @m68kde~1_30
000012E4  64D2      
000012E6  4E92      1726          jsr       (A2)
000012E8  DEFC 000C 1727          add.w     #12,A7
                    1728   MemoryChange_11:
000012EC  6008      1729          bra.s     MemoryChange_13
                    1730   MemoryChange_7:
                    1731   ; }
                    1732   ; }
                    1733   ; else if(c == (char)('-'))
000012EE  0C02 002D 1734          cmp.b     #45,D2
000012F2  6602      1735          bne.s     MemoryChange_13
                    1736   ; RamPtr -= 2 ; ;
000012F4  5583      1737          subq.l    #2,D3
                    1738   MemoryChange_13:
                    1739   ; RamPtr ++ ;
000012F6  5283      1740          addq.l    #1,D3
000012F8  6000 FF40 1741          bra       MemoryChange_1
                    1742   MemoryChange_6:
000012FC  4CDF 041C 1743          movem.l   (A7)+,D2/D3/D4/A2
00001300  4E75      1744          rts
                    1745   ; }
                    1746   ; }
                    1747   ; void ProgramFlashChip(void)
                    1748   ; {
                    1749   _ProgramFlashChip:
00001302  4E56 FFF8 1750          link      A6,#-8
00001306  48E7 3020 1751          movem.l   D2/D3/A2,-(A7)
0000130A  45F9 0000 1752          lea       _printf,A2
0000130E  5776      
                    1753   ; char c;
                    1754   ; int i ;
                    1755   ; unsigned char *RamPtr = (unsigned char *)(ProgramStart) ;      // pointer to start of user program
00001310  263C 0080 1756          move.l    #8388608,D3
00001314  0000      
                    1757   ; unsigned char *FlashPtr = (unsigned char *)(FlashStart);		// pointer to flash chip base address;
00001316  2D7C 0100 1758          move.l    #16777216,-4(A6)
0000131A  0000 FFFC 
                    1759   ; printf("\r\nProgram Flash Memory.....[Y/N]?") ;
0000131E  4879 0000 1760          pea       @m68kde~1_31
00001322  6506      
00001324  4E92      1761          jsr       (A2)
00001326  584F      1762          addq.w    #4,A7
                    1763   ; c = tolower(_getch()) ;
00001328  2F00      1764          move.l    D0,-(A7)
0000132A  6100 F890 1765          bsr       __getch
0000132E  2200      1766          move.l    D0,D1
00001330  201F      1767          move.l    (A7)+,D0
00001332  2F01      1768          move.l    D1,-(A7)
00001334  6100 439E 1769          bsr       _tolower
00001338  584F      1770          addq.w    #4,A7
0000133A  1D40 FFFB 1771          move.b    D0,-5(A6)
                    1772   ; if(c != 'y') {
0000133E  102E FFFB 1773          move.b    -5(A6),D0
00001342  4880      1774          ext.w     D0
00001344  48C0      1775          ext.l     D0
00001346  0C80 0000 1776          cmp.l     #121,D0
0000134A  0079      
0000134C  670E      1777          beq.s     ProgramFlashChip_1
                    1778   ; printf("\r\nProgramming ABANDONED.....") ;
0000134E  4879 0000 1779          pea       @m68kde~1_32
00001352  6528      
00001354  4E92      1780          jsr       (A2)
00001356  584F      1781          addq.w    #4,A7
                    1782   ; return ;
00001358  6000 00B8 1783          bra       ProgramFlashChip_3
                    1784   ProgramFlashChip_1:
                    1785   ; }
                    1786   ; FlashReset() ;
0000135C  6100 42A6 1787          bsr       _FlashReset
                    1788   ; printf("\r\nErasing Flash Memory.....") ;
00001360  4879 0000 1789          pea       @m68kde~1_33
00001364  6546      
00001366  4E92      1790          jsr       (A2)
00001368  584F      1791          addq.w    #4,A7
                    1792   ; //erase first 64 as 8 sectors of 8k each
                    1793   ; for(i = 0; i < 8; i++)
0000136A  4282      1794          clr.l     D2
                    1795   ProgramFlashChip_4:
0000136C  0C82 0000 1796          cmp.l     #8,D2
00001370  0008      
00001372  6C0C      1797          bge.s     ProgramFlashChip_6
                    1798   ; FlashSectorErase( i );
00001374  2F02      1799          move.l    D2,-(A7)
00001376  6100 428E 1800          bsr       _FlashSectorErase
0000137A  584F      1801          addq.w    #4,A7
0000137C  5282      1802          addq.l    #1,D2
0000137E  60EC      1803          bra       ProgramFlashChip_4
                    1804   ProgramFlashChip_6:
                    1805   ; //erase next sectors of 64 k block
                    1806   ; for(i = 1; i < Num_FlashSectors + 1 ; i++)
00001380  7401      1807          moveq     #1,D2
                    1808   ProgramFlashChip_7:
00001382  7003      1809          moveq     #3,D0
00001384  5280      1810          addq.l    #1,D0
00001386  B480      1811          cmp.l     D0,D2
00001388  6C10      1812          bge.s     ProgramFlashChip_9
                    1813   ; FlashSectorErase( i << 3 );
0000138A  2202      1814          move.l    D2,D1
0000138C  E781      1815          asl.l     #3,D1
0000138E  2F01      1816          move.l    D1,-(A7)
00001390  6100 4274 1817          bsr       _FlashSectorErase
00001394  584F      1818          addq.w    #4,A7
00001396  5282      1819          addq.l    #1,D2
00001398  60E8      1820          bra       ProgramFlashChip_7
                    1821   ProgramFlashChip_9:
                    1822   ; printf("\r\nProgramming Flash Memory.....") ;
0000139A  4879 0000 1823          pea       @m68kde~1_34
0000139E  6562      
000013A0  4E92      1824          jsr       (A2)
000013A2  584F      1825          addq.w    #4,A7
                    1826   ; for(i = 0; i < FlashSize; i ++) {   // i = address offset to the Flash chip
000013A4  4282      1827          clr.l     D2
                    1828   ProgramFlashChip_10:
000013A6  0C82 0003 1829          cmp.l     #262143,D2
000013AA  FFFF      
000013AC  6C1A      1830          bge.s     ProgramFlashChip_12
                    1831   ; FlashProgram(i, *RamPtr++) ;    // address offset into flash, byte data
000013AE  2043      1832          move.l    D3,A0
000013B0  5283      1833          addq.l    #1,D3
000013B2  1210      1834          move.b    (A0),D1
000013B4  C2BC 0000 1835          and.l     #255,D1
000013B8  00FF      
000013BA  2F01      1836          move.l    D1,-(A7)
000013BC  2F02      1837          move.l    D2,-(A7)
000013BE  6100 424E 1838          bsr       _FlashProgram
000013C2  504F      1839          addq.w    #8,A7
000013C4  5282      1840          addq.l    #1,D2
000013C6  60DE      1841          bra       ProgramFlashChip_10
                    1842   ProgramFlashChip_12:
                    1843   ; }
                    1844   ; printf("\r\nVerifying.....");
000013C8  4879 0000 1845          pea       @m68kde~1_35
000013CC  6582      
000013CE  4E92      1846          jsr       (A2)
000013D0  584F      1847          addq.w    #4,A7
                    1848   ; FlashReset() ;
000013D2  6100 4230 1849          bsr       _FlashReset
                    1850   ; RamPtr = (unsigned char *)(ProgramStart) ;      // reset pointer to start of user program
000013D6  263C 0080 1851          move.l    #8388608,D3
000013DA  0000      
                    1852   ; for(i = 0; i < FlashSize; i ++) {
000013DC  4282      1853          clr.l     D2
                    1854   ProgramFlashChip_13:
000013DE  0C82 0003 1855          cmp.l     #262143,D2
000013E2  FFFF      
000013E4  6C22      1856          bge.s     ProgramFlashChip_15
                    1857   ; if(FlashRead(i) != *RamPtr++) {
000013E6  2F02      1858          move.l    D2,-(A7)
000013E8  6100 422C 1859          bsr       _FlashRead
000013EC  584F      1860          addq.w    #4,A7
000013EE  2043      1861          move.l    D3,A0
000013F0  5283      1862          addq.l    #1,D3
000013F2  B010      1863          cmp.b     (A0),D0
000013F4  670E      1864          beq.s     ProgramFlashChip_16
                    1865   ; RamPtr -- ;
000013F6  5383      1866          subq.l    #1,D3
                    1867   ; printf("\r\nFAILED.....") ;
000013F8  4879 0000 1868          pea       @m68kde~1_36
000013FC  6594      
000013FE  4E92      1869          jsr       (A2)
00001400  584F      1870          addq.w    #4,A7
                    1871   ; return ;
00001402  600E      1872          bra.s     ProgramFlashChip_3
                    1873   ProgramFlashChip_16:
00001404  5282      1874          addq.l    #1,D2
00001406  60D6      1875          bra       ProgramFlashChip_13
                    1876   ProgramFlashChip_15:
                    1877   ; }
                    1878   ; }
                    1879   ; printf("\r\nPASSED") ;
00001408  4879 0000 1880          pea       @m68kde~1_37
0000140C  65A2      
0000140E  4E92      1881          jsr       (A2)
00001410  584F      1882          addq.w    #4,A7
                    1883   ProgramFlashChip_3:
00001412  4CDF 040C 1884          movem.l   (A7)+,D2/D3/A2
00001416  4E5E      1885          unlk      A6
00001418  4E75      1886          rts
                    1887   ; }
                    1888   ; //
                    1889   ; // Load a program from Flash Chip and copies to Dram
                    1890   ; //
                    1891   ; void LoadFromFlashChip(void)
                    1892   ; {
                    1893   _LoadFromFlashChip:
0000141A  4E56 FFE4 1894          link      A6,#-28
0000141E  48E7 2020 1895          movem.l   D2/A2,-(A7)
00001422  45F9 0000 1896          lea       _printf,A2
00001426  5776      
                    1897   ; char c;
                    1898   ; int i ;
                    1899   ; unsigned char *RamPtr = (unsigned char *)(ProgramStart) ;      // pointer to start of user program
00001428  2D7C 0080 1900          move.l    #8388608,-24(A6)
0000142C  0000 FFE8 
                    1901   ; unsigned char *FlashPtr = (unsigned char *)(FlashStart);		// pointer to flash chip base address;
00001430  2D7C 0100 1902          move.l    #16777216,-20(A6)
00001434  0000 FFEC 
                    1903   ; unsigned  int *DMAFrom          = (unsigned int *)(0xFF000000) ;
00001438  2D7C FF00 1904          move.l    #-16777216,-16(A6)
0000143C  0000 FFF0 
                    1905   ; unsigned  int *DMATo            = (unsigned int *)(0xFF000004) ;
00001440  2D7C FF00 1906          move.l    #-16777212,-12(A6)
00001444  0004 FFF4 
                    1907   ; unsigned  int *DMACount         = (unsigned int *)(0xFF000008) ;
00001448  2D7C FF00 1908          move.l    #-16777208,-8(A6)
0000144C  0008 FFF8 
                    1909   ; unsigned  short int *DMACommand = (unsigned short int *)(0xFF00000C) ;
00001450  2D7C FF00 1910          move.l    #-16777204,-4(A6)
00001454  000C FFFC 
                    1911   ; FlashReset() ;
00001458  6100 41AA 1912          bsr       _FlashReset
                    1913   ; // test for type of copy, software or DMA by reading switch 17 (Port B bit 1) on DE2 board.
                    1914   ; printf("\r\nLoading Program From Flash....Using ") ;
0000145C  4879 0000 1915          pea       @m68kde~1_38
00001460  65AC      
00001462  4E92      1916          jsr       (A2)
00001464  584F      1917          addq.w    #4,A7
                    1918   ; if(((char)(PortC & 0x02)) != (char)(0x02))    {
00001466  1039 0040 1919          move.b    4194308,D0
0000146A  0004      
0000146C  C0BC 0000 1920          and.l     #255,D0
00001470  00FF      
00001472  C0BC 0000 1921          and.l     #2,D0
00001476  0002      
00001478  0C00 0002 1922          cmp.b     #2,D0
0000147C  672E      1923          beq.s     LoadFromFlashChip_1
                    1924   ; printf("Software") ;
0000147E  4879 0000 1925          pea       @m68kde~1_39
00001482  65D4      
00001484  4E92      1926          jsr       (A2)
00001486  584F      1927          addq.w    #4,A7
                    1928   ; for(i = 0; i < FlashSize; i ++) {
00001488  4282      1929          clr.l     D2
                    1930   LoadFromFlashChip_3:
0000148A  0C82 0003 1931          cmp.l     #262143,D2
0000148E  FFFF      
00001490  6C18      1932          bge.s     LoadFromFlashChip_5
                    1933   ; *RamPtr++ =  FlashPtr[i << 1] ;
00001492  206E FFEC 1934          move.l    -20(A6),A0
00001496  2002      1935          move.l    D2,D0
00001498  E380      1936          asl.l     #1,D0
0000149A  226E FFE8 1937          move.l    -24(A6),A1
0000149E  52AE FFE8 1938          addq.l    #1,-24(A6)
000014A2  12B0 0800 1939          move.b    0(A0,D0.L),(A1)
000014A6  5282      1940          addq.l    #1,D2
000014A8  60E0      1941          bra       LoadFromFlashChip_3
                    1942   LoadFromFlashChip_5:
000014AA  6030      1943          bra.s     LoadFromFlashChip_2
                    1944   LoadFromFlashChip_1:
                    1945   ; }
                    1946   ; }
                    1947   ; else    {
                    1948   ; printf("DMA") ;
000014AC  4879 0000 1949          pea       @m68kde~1_40
000014B0  65DE      
000014B2  4E92      1950          jsr       (A2)
000014B4  584F      1951          addq.w    #4,A7
                    1952   ; *DMAFrom     = (unsigned int)(FlashStart) ;
000014B6  206E FFF0 1953          move.l    -16(A6),A0
000014BA  20BC 0100 1954          move.l    #16777216,(A0)
000014BE  0000      
                    1955   ; *DMATo       = (unsigned int)(ProgramStart) ;
000014C0  206E FFF4 1956          move.l    -12(A6),A0
000014C4  20BC 0080 1957          move.l    #8388608,(A0)
000014C8  0000      
                    1958   ; *DMACount    = (unsigned int)(FlashSize) ;
000014CA  206E FFF8 1959          move.l    -8(A6),A0
000014CE  20BC 0003 1960          move.l    #262143,(A0)
000014D2  FFFF      
                    1961   ; *DMACommand  = (unsigned short int)(0x000D) ;           // 00001101 byte transfer, to increment by 1, from by 2
000014D4  206E FFFC 1962          move.l    -4(A6),A0
000014D8  30BC 000D 1963          move.w    #13,(A0)
                    1964   LoadFromFlashChip_2:
                    1965   ; }
                    1966   ; printf("\r\nProgram Loaded.....") ;
000014DC  4879 0000 1967          pea       @m68kde~1_41
000014E0  65E2      
000014E2  4E92      1968          jsr       (A2)
000014E4  584F      1969          addq.w    #4,A7
000014E6  4CDF 0404 1970          movem.l   (A7)+,D2/A2
000014EA  4E5E      1971          unlk      A6
000014EC  4E75      1972          rts
                    1973   ; }
                    1974   ; // get rid of excess spaces
                    1975   ; void FormatInstructionForTrace(void)
                    1976   ; {
                    1977   _FormatInstructionForTrace:
000014EE  4E56 FF9C 1978          link      A6,#-100
000014F2  48E7 3C20 1979          movem.l   D2/D3/D4/D5/A2,-(A7)
000014F6  45EE FF9C 1980          lea       -100(A6),A2
                    1981   ; unsigned short int i ;
                    1982   ; char c, temp[100], *iptr, *tempptr ;
                    1983   ; for(i=0; i < 100; i++)
000014FA  4244      1984          clr.w     D4
                    1985   FormatInstructionForTrace_1:
000014FC  0C44 0064 1986          cmp.w     #100,D4
00001500  640E      1987          bhs.s     FormatInstructionForTrace_3
                    1988   ; temp[i] = 0 ;
00001502  C8BC 0000 1989          and.l     #65535,D4
00001506  FFFF      
00001508  4232 4800 1990          clr.b     0(A2,D4.L)
0000150C  5244      1991          addq.w    #1,D4
0000150E  60EC      1992          bra       FormatInstructionForTrace_1
                    1993   FormatInstructionForTrace_3:
                    1994   ; iptr = Instruction ;
00001510  41F9 0084 1995          lea       _Instruction,A0
00001514  04DC      
00001516  2408      1996          move.l    A0,D2
                    1997   ; tempptr = temp ;
00001518  2A0A      1998          move.l    A2,D5
                    1999   ; do{
                    2000   FormatInstructionForTrace_4:
                    2001   ; c = *iptr++ ;
0000151A  2042      2002          move.l    D2,A0
0000151C  5282      2003          addq.l    #1,D2
0000151E  1610      2004          move.b    (A0),D3
                    2005   ; *tempptr++ = c ;  // copy chars over
00001520  2045      2006          move.l    D5,A0
00001522  5285      2007          addq.l    #1,D5
00001524  1083      2008          move.b    D3,(A0)
                    2009   ; if(c == ' ')  {   // if copied space
00001526  4883      2010          ext.w     D3
00001528  48C3      2011          ext.l     D3
0000152A  0C83 0000 2012          cmp.l     #32,D3
0000152E  0020      
00001530  6600 002E 2013          bne       FormatInstructionForTrace_6
                    2014   ; while(*iptr == ' ') {
                    2015   FormatInstructionForTrace_8:
00001534  2042      2016          move.l    D2,A0
00001536  1010      2017          move.b    (A0),D0
00001538  4880      2018          ext.w     D0
0000153A  48C0      2019          ext.l     D0
0000153C  0C80 0000 2020          cmp.l     #32,D0
00001540  0020      
00001542  6612      2021          bne.s     FormatInstructionForTrace_10
                    2022   ; if(*iptr == 0)  // if end of string then done
00001544  2042      2023          move.l    D2,A0
00001546  1010      2024          move.b    (A0),D0
00001548  4880      2025          ext.w     D0
0000154A  48C0      2026          ext.l     D0
0000154C  4A80      2027          tst.l     D0
0000154E  6602      2028          bne.s     FormatInstructionForTrace_11
                    2029   ; break ;
00001550  6004      2030          bra.s     FormatInstructionForTrace_10
                    2031   FormatInstructionForTrace_11:
                    2032   ; iptr++ ; // skip over remaining spaces
00001552  5282      2033          addq.l    #1,D2
00001554  60DE      2034          bra       FormatInstructionForTrace_8
                    2035   FormatInstructionForTrace_10:
                    2036   ; }
                    2037   ; strcat(tempptr,iptr) ;
00001556  2F02      2038          move.l    D2,-(A7)
00001558  2F05      2039          move.l    D5,-(A7)
0000155A  6100 41D8 2040          bsr       _strcat
0000155E  504F      2041          addq.w    #8,A7
                    2042   FormatInstructionForTrace_6:
00001560  4883      2043          ext.w     D3
00001562  48C3      2044          ext.l     D3
00001564  4A83      2045          tst.l     D3
00001566  66B2      2046          bne       FormatInstructionForTrace_4
                    2047   ; }
                    2048   ; }while(c != 0) ;
                    2049   ; strcpyInstruction(temp) ;
00001568  2F0A      2050          move.l    A2,-(A7)
0000156A  6100 F7BE 2051          bsr       _strcpyInstruction
0000156E  584F      2052          addq.w    #4,A7
00001570  4CDF 043C 2053          movem.l   (A7)+,D2/D3/D4/D5/A2
00001574  4E5E      2054          unlk      A6
00001576  4E75      2055          rts
                    2056   ; }
                    2057   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    2058   ; // IMPORTANT
                    2059   ; // Softcore 68k does not support the Native Trace mode of the original 68000 so tracing
                    2060   ; // has to be done with an interrupt (IRQ Level 6)
                    2061   ; //
                    2062   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    2063   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    2064   ; //
                    2065   ; // on return from the IRQ service handler, the first access to the user memory program space
                    2066   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    2067   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    2068   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    2069   ; // program area
                    2070   ; //
                    2071   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    2072   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    2073   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    2074   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    2075   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    2076   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    2077   ; void DumpRegisters()
                    2078   ; {
                    2079   _DumpRegisters:
00001578  48E7 3F3C 2080          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
0000157C  45F9 0000 2081          lea       _putch,A2
00001580  5668      
00001582  47F9 0000 2082          lea       _printf,A3
00001586  5776      
00001588  49F9 0084 2083          lea       _SR,A4
0000158C  0126      
0000158E  4BF9 0084 2084          lea       _WatchPointString,A5
00001592  01BC      
                    2085   ; short i, x, j, k ;
                    2086   ; unsigned char c, *BytePointer;
                    2087   ; // buld up strings for displaying watchpoints
                    2088   ; for(x = 0; x < (short)(8); x++)
00001594  4242      2089          clr.w     D2
                    2090   DumpRegisters_1:
00001596  0C42 0008 2091          cmp.w     #8,D2
0000159A  6C00 01B8 2092          bge       DumpRegisters_3
                    2093   ; {
                    2094   ; if(WatchPointSetOrCleared[x] == 1)
0000159E  48C2      2095          ext.l     D2
000015A0  2002      2096          move.l    D2,D0
000015A2  E588      2097          lsl.l     #2,D0
000015A4  41F9 0084 2098          lea       _WatchPointSetOrCleared,A0
000015A8  019C      
000015AA  2030 0800 2099          move.l    0(A0,D0.L),D0
000015AE  0C80 0000 2100          cmp.l     #1,D0
000015B2  0001      
000015B4  6600 017A 2101          bne       DumpRegisters_4
                    2102   ; {
                    2103   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
000015B8  48C2      2104          ext.l     D2
000015BA  2202      2105          move.l    D2,D1
000015BC  E589      2106          lsl.l     #2,D1
000015BE  41F9 0084 2107          lea       _WatchPointAddress,A0
000015C2  017C      
000015C4  2F30 1800 2108          move.l    0(A0,D1.L),-(A7)
000015C8  4879 0000 2109          pea       @m68kde~1_42
000015CC  65F8      
000015CE  220D      2110          move.l    A5,D1
000015D0  48C2      2111          ext.l     D2
000015D2  2F00      2112          move.l    D0,-(A7)
000015D4  2002      2113          move.l    D2,D0
000015D6  C1FC 0064 2114          muls      #100,D0
000015DA  D280      2115          add.l     D0,D1
000015DC  201F      2116          move.l    (A7)+,D0
000015DE  2F01      2117          move.l    D1,-(A7)
000015E0  6100 411E 2118          bsr       _sprintf
000015E4  DEFC 000C 2119          add.w     #12,A7
                    2120   ; BytePointer = (char *)(WatchPointAddress[x]) ;
000015E8  48C2      2121          ext.l     D2
000015EA  2002      2122          move.l    D2,D0
000015EC  E588      2123          lsl.l     #2,D0
000015EE  41F9 0084 2124          lea       _WatchPointAddress,A0
000015F2  017C      
000015F4  2A30 0800 2125          move.l    0(A0,D0.L),D5
                    2126   ; for(j = 0; j < (short)(16); j+=2)
000015F8  4243      2127          clr.w     D3
                    2128   DumpRegisters_6:
000015FA  0C43 0010 2129          cmp.w     #16,D3
000015FE  6C00 007A 2130          bge       DumpRegisters_8
                    2131   ; {
                    2132   ; for(k = 0; k < (short)(2); k++)
00001602  4246      2133          clr.w     D6
                    2134   DumpRegisters_9:
00001604  0C46 0002 2135          cmp.w     #2,D6
00001608  6C00 004E 2136          bge       DumpRegisters_11
                    2137   ; {
                    2138   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
0000160C  2045      2139          move.l    D5,A0
0000160E  48C3      2140          ext.l     D3
00001610  2243      2141          move.l    D3,A1
00001612  48C6      2142          ext.l     D6
00001614  D3C6      2143          add.l     D6,A1
00001616  1030 9800 2144          move.b    0(A0,A1.L),D0
0000161A  C0BC 0000 2145          and.l     #255,D0
0000161E  00FF      
00001620  2F00      2146          move.l    D0,-(A7)
00001622  4879 0000 2147          pea       @m68kde~1_43
00001626  6600      
00001628  4879 0084 2148          pea       _TempString
0000162C  0540      
0000162E  6100 40D0 2149          bsr       _sprintf
00001632  DEFC 000C 2150          add.w     #12,A7
                    2151   ; strcat(WatchPointString[x], TempString) ;
00001636  4879 0084 2152          pea       _TempString
0000163A  0540      
0000163C  220D      2153          move.l    A5,D1
0000163E  48C2      2154          ext.l     D2
00001640  2F00      2155          move.l    D0,-(A7)
00001642  2002      2156          move.l    D2,D0
00001644  C1FC 0064 2157          muls      #100,D0
00001648  D280      2158          add.l     D0,D1
0000164A  201F      2159          move.l    (A7)+,D0
0000164C  2F01      2160          move.l    D1,-(A7)
0000164E  6100 40E4 2161          bsr       _strcat
00001652  504F      2162          addq.w    #8,A7
00001654  5246      2163          addq.w    #1,D6
00001656  60AC      2164          bra       DumpRegisters_9
                    2165   DumpRegisters_11:
                    2166   ; }
                    2167   ; strcat(WatchPointString[x]," ") ;
00001658  4879 0000 2168          pea       @m68kde~1_44
0000165C  6606      
0000165E  220D      2169          move.l    A5,D1
00001660  48C2      2170          ext.l     D2
00001662  2F00      2171          move.l    D0,-(A7)
00001664  2002      2172          move.l    D2,D0
00001666  C1FC 0064 2173          muls      #100,D0
0000166A  D280      2174          add.l     D0,D1
0000166C  201F      2175          move.l    (A7)+,D0
0000166E  2F01      2176          move.l    D1,-(A7)
00001670  6100 40C2 2177          bsr       _strcat
00001674  504F      2178          addq.w    #8,A7
00001676  5443      2179          addq.w    #2,D3
00001678  6080      2180          bra       DumpRegisters_6
                    2181   DumpRegisters_8:
                    2182   ; }
                    2183   ; strcat(WatchPointString[x], "  ") ;
0000167A  4879 0000 2184          pea       @m68kde~1_45
0000167E  6608      
00001680  220D      2185          move.l    A5,D1
00001682  48C2      2186          ext.l     D2
00001684  2F00      2187          move.l    D0,-(A7)
00001686  2002      2188          move.l    D2,D0
00001688  C1FC 0064 2189          muls      #100,D0
0000168C  D280      2190          add.l     D0,D1
0000168E  201F      2191          move.l    (A7)+,D0
00001690  2F01      2192          move.l    D1,-(A7)
00001692  6100 40A0 2193          bsr       _strcat
00001696  504F      2194          addq.w    #8,A7
                    2195   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001698  48C2      2196          ext.l     D2
0000169A  2002      2197          move.l    D2,D0
0000169C  E588      2198          lsl.l     #2,D0
0000169E  41F9 0084 2199          lea       _WatchPointAddress,A0
000016A2  017C      
000016A4  2A30 0800 2200          move.l    0(A0,D0.L),D5
                    2201   ; for(j = 0; j < (short)(16); j++)
000016A8  4243      2202          clr.w     D3
                    2203   DumpRegisters_12:
000016AA  0C43 0010 2204          cmp.w     #16,D3
000016AE  6C00 007E 2205          bge       DumpRegisters_14
                    2206   ; {
                    2207   ; c = ((char)(BytePointer[j]) & 0x7f) ;
000016B2  2045      2208          move.l    D5,A0
000016B4  48C3      2209          ext.l     D3
000016B6  1030 3800 2210          move.b    0(A0,D3.L),D0
000016BA  4880      2211          ext.w     D0
000016BC  48C0      2212          ext.l     D0
000016BE  C0BC 0000 2213          and.l     #127,D0
000016C2  007F      
000016C4  1E00      2214          move.b    D0,D7
                    2215   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
000016C6  0C07 007F 2216          cmp.b     #127,D7
000016CA  6206      2217          bhi.s     DumpRegisters_17
000016CC  0C07 0020 2218          cmp.b     #32,D7
000016D0  6414      2219          bhs.s     DumpRegisters_15
                    2220   DumpRegisters_17:
                    2221   ; sprintf(TempString, ".") ;
000016D2  4879 0000 2222          pea       @m68kde~1_46
000016D6  660C      
000016D8  4879 0084 2223          pea       _TempString
000016DC  0540      
000016DE  6100 4020 2224          bsr       _sprintf
000016E2  504F      2225          addq.w    #8,A7
000016E4  6024      2226          bra.s     DumpRegisters_16
                    2227   DumpRegisters_15:
                    2228   ; else
                    2229   ; sprintf(TempString, "%c", BytePointer[j]) ;
000016E6  2045      2230          move.l    D5,A0
000016E8  48C3      2231          ext.l     D3
000016EA  1230 3800 2232          move.b    0(A0,D3.L),D1
000016EE  C2BC 0000 2233          and.l     #255,D1
000016F2  00FF      
000016F4  2F01      2234          move.l    D1,-(A7)
000016F6  4879 0000 2235          pea       @m68kde~1_47
000016FA  660E      
000016FC  4879 0084 2236          pea       _TempString
00001700  0540      
00001702  6100 3FFC 2237          bsr       _sprintf
00001706  DEFC 000C 2238          add.w     #12,A7
                    2239   DumpRegisters_16:
                    2240   ; strcat(WatchPointString[x], TempString) ;
0000170A  4879 0084 2241          pea       _TempString
0000170E  0540      
00001710  220D      2242          move.l    A5,D1
00001712  48C2      2243          ext.l     D2
00001714  2F00      2244          move.l    D0,-(A7)
00001716  2002      2245          move.l    D2,D0
00001718  C1FC 0064 2246          muls      #100,D0
0000171C  D280      2247          add.l     D0,D1
0000171E  201F      2248          move.l    (A7)+,D0
00001720  2F01      2249          move.l    D1,-(A7)
00001722  6100 4010 2250          bsr       _strcat
00001726  504F      2251          addq.w    #8,A7
00001728  5243      2252          addq.w    #1,D3
0000172A  6000 FF7E 2253          bra       DumpRegisters_12
                    2254   DumpRegisters_14:
0000172E  601E      2255          bra.s     DumpRegisters_5
                    2256   DumpRegisters_4:
                    2257   ; }
                    2258   ; }
                    2259   ; else
                    2260   ; strcpy(WatchPointString[x], "") ;
00001730  4879 0000 2261          pea       @m68kde~1_48
00001734  6612      
00001736  220D      2262          move.l    A5,D1
00001738  48C2      2263          ext.l     D2
0000173A  2F00      2264          move.l    D0,-(A7)
0000173C  2002      2265          move.l    D2,D0
0000173E  C1FC 0064 2266          muls      #100,D0
00001742  D280      2267          add.l     D0,D1
00001744  201F      2268          move.l    (A7)+,D0
00001746  2F01      2269          move.l    D1,-(A7)
00001748  6100 3ED6 2270          bsr       _strcpy
0000174C  504F      2271          addq.w    #8,A7
                    2272   DumpRegisters_5:
0000174E  5242      2273          addq.w    #1,D2
00001750  6000 FE44 2274          bra       DumpRegisters_1
                    2275   DumpRegisters_3:
                    2276   ; }
                    2277   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
00001754  2F39 0084 2278          move.l    _a0,-(A7)
00001758  00FE      
0000175A  2F39 0084 2279          move.l    _d0,-(A7)
0000175E  00DE      
00001760  4879 0000 2280          pea       @m68kde~1_49
00001764  6614      
00001766  4E93      2281          jsr       (A3)
00001768  DEFC 000C 2282          add.w     #12,A7
                    2283   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
0000176C  2F39 0084 2284          move.l    _a1,-(A7)
00001770  0102      
00001772  2F39 0084 2285          move.l    _d1,-(A7)
00001776  00E2      
00001778  4879 0000 2286          pea       @m68kde~1_50
0000177C  6630      
0000177E  4E93      2287          jsr       (A3)
00001780  DEFC 000C 2288          add.w     #12,A7
                    2289   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
00001784  2F39 0084 2290          move.l    _a2,-(A7)
00001788  0106      
0000178A  2F39 0084 2291          move.l    _d2,-(A7)
0000178E  00E6      
00001790  4879 0000 2292          pea       @m68kde~1_51
00001794  664A      
00001796  4E93      2293          jsr       (A3)
00001798  DEFC 000C 2294          add.w     #12,A7
                    2295   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
0000179C  2F39 0084 2296          move.l    _a3,-(A7)
000017A0  010A      
000017A2  2F39 0084 2297          move.l    _d3,-(A7)
000017A6  00EA      
000017A8  4879 0000 2298          pea       @m68kde~1_52
000017AC  6664      
000017AE  4E93      2299          jsr       (A3)
000017B0  DEFC 000C 2300          add.w     #12,A7
                    2301   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
000017B4  2F39 0084 2302          move.l    _a4,-(A7)
000017B8  010E      
000017BA  2F39 0084 2303          move.l    _d4,-(A7)
000017BE  00EE      
000017C0  4879 0000 2304          pea       @m68kde~1_53
000017C4  667E      
000017C6  4E93      2305          jsr       (A3)
000017C8  DEFC 000C 2306          add.w     #12,A7
                    2307   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
000017CC  2F39 0084 2308          move.l    _a5,-(A7)
000017D0  0112      
000017D2  2F39 0084 2309          move.l    _d5,-(A7)
000017D6  00F2      
000017D8  4879 0000 2310          pea       @m68kde~1_54
000017DC  6698      
000017DE  4E93      2311          jsr       (A3)
000017E0  DEFC 000C 2312          add.w     #12,A7
                    2313   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
000017E4  2F39 0084 2314          move.l    _a6,-(A7)
000017E8  0116      
000017EA  2F39 0084 2315          move.l    _d6,-(A7)
000017EE  00F6      
000017F0  4879 0000 2316          pea       @m68kde~1_55
000017F4  66B2      
000017F6  4E93      2317          jsr       (A3)
000017F8  DEFC 000C 2318          add.w     #12,A7
                    2319   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
000017FC  3214      2320          move.w    (A4),D1
000017FE  C27C 2000 2321          and.w     #8192,D1
00001802  0C41 2000 2322          cmp.w     #8192,D1
00001806  6608      2323          bne.s     DumpRegisters_18
00001808  2239 0084 2324          move.l    _SSP,D1
0000180C  011E      
0000180E  6006      2325          bra.s     DumpRegisters_19
                    2326   DumpRegisters_18:
00001810  2239 0084 2327          move.l    _USP,D1
00001814  0122      
                    2328   DumpRegisters_19:
00001816  2F01      2329          move.l    D1,-(A7)
00001818  2F39 0084 2330          move.l    _d7,-(A7)
0000181C  00FA      
0000181E  4879 0000 2331          pea       @m68kde~1_56
00001822  66CC      
00001824  4E93      2332          jsr       (A3)
00001826  DEFC 000C 2333          add.w     #12,A7
                    2334   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
0000182A  2F39 0084 2335          move.l    _USP,-(A7)
0000182E  0122      
00001830  4879 0000 2336          pea       @m68kde~1_57
00001834  66E6      
00001836  4E93      2337          jsr       (A3)
00001838  504F      2338          addq.w    #8,A7
                    2339   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
0000183A  2F39 0084 2340          move.l    _SSP,-(A7)
0000183E  011E      
00001840  4879 0000 2341          pea       @m68kde~1_58
00001844  6704      
00001846  4E93      2342          jsr       (A3)
00001848  504F      2343          addq.w    #8,A7
                    2344   ; printf("\r\n SR = $%04X   ",SR) ;
0000184A  3214      2345          move.w    (A4),D1
0000184C  C2BC 0000 2346          and.l     #65535,D1
00001850  FFFF      
00001852  2F01      2347          move.l    D1,-(A7)
00001854  4879 0000 2348          pea       @m68kde~1_59
00001858  6726      
0000185A  4E93      2349          jsr       (A3)
0000185C  504F      2350          addq.w    #8,A7
                    2351   ; // display the status word in characters etc.
                    2352   ; printf("   [") ;
0000185E  4879 0000 2353          pea       @m68kde~1_60
00001862  6738      
00001864  4E93      2354          jsr       (A3)
00001866  584F      2355          addq.w    #4,A7
                    2356   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
00001868  3014      2357          move.w    (A4),D0
0000186A  C07C 8000 2358          and.w     #32768,D0
0000186E  0C40 8000 2359          cmp.w     #32768,D0
00001872  660A      2360          bne.s     DumpRegisters_20
00001874  4878 0054 2361          pea       84
00001878  4E92      2362          jsr       (A2)
0000187A  584F      2363          addq.w    #4,A7
0000187C  6008      2364          bra.s     DumpRegisters_21
                    2365   DumpRegisters_20:
0000187E  4878 002D 2366          pea       45
00001882  4E92      2367          jsr       (A2)
00001884  584F      2368          addq.w    #4,A7
                    2369   DumpRegisters_21:
                    2370   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
00001886  3014      2371          move.w    (A4),D0
00001888  C07C 2000 2372          and.w     #8192,D0
0000188C  0C40 2000 2373          cmp.w     #8192,D0
00001890  660A      2374          bne.s     DumpRegisters_22
00001892  4878 0053 2375          pea       83
00001896  4E92      2376          jsr       (A2)
00001898  584F      2377          addq.w    #4,A7
0000189A  6008      2378          bra.s     DumpRegisters_23
                    2379   DumpRegisters_22:
0000189C  4878 0055 2380          pea       85
000018A0  4E92      2381          jsr       (A2)
000018A2  584F      2382          addq.w    #4,A7
                    2383   DumpRegisters_23:
                    2384   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
000018A4  3014      2385          move.w    (A4),D0
000018A6  C07C 0400 2386          and.w     #1024,D0
000018AA  0C40 0400 2387          cmp.w     #1024,D0
000018AE  660A      2388          bne.s     DumpRegisters_24
000018B0  4878 0031 2389          pea       49
000018B4  4E92      2390          jsr       (A2)
000018B6  584F      2391          addq.w    #4,A7
000018B8  6008      2392          bra.s     DumpRegisters_25
                    2393   DumpRegisters_24:
000018BA  4878 0030 2394          pea       48
000018BE  4E92      2395          jsr       (A2)
000018C0  584F      2396          addq.w    #4,A7
                    2397   DumpRegisters_25:
                    2398   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
000018C2  3014      2399          move.w    (A4),D0
000018C4  C07C 0200 2400          and.w     #512,D0
000018C8  0C40 0200 2401          cmp.w     #512,D0
000018CC  660A      2402          bne.s     DumpRegisters_26
000018CE  4878 0031 2403          pea       49
000018D2  4E92      2404          jsr       (A2)
000018D4  584F      2405          addq.w    #4,A7
000018D6  6008      2406          bra.s     DumpRegisters_27
                    2407   DumpRegisters_26:
000018D8  4878 0030 2408          pea       48
000018DC  4E92      2409          jsr       (A2)
000018DE  584F      2410          addq.w    #4,A7
                    2411   DumpRegisters_27:
                    2412   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
000018E0  3014      2413          move.w    (A4),D0
000018E2  C07C 0100 2414          and.w     #256,D0
000018E6  0C40 0100 2415          cmp.w     #256,D0
000018EA  660A      2416          bne.s     DumpRegisters_28
000018EC  4878 0031 2417          pea       49
000018F0  4E92      2418          jsr       (A2)
000018F2  584F      2419          addq.w    #4,A7
000018F4  6008      2420          bra.s     DumpRegisters_29
                    2421   DumpRegisters_28:
000018F6  4878 0030 2422          pea       48
000018FA  4E92      2423          jsr       (A2)
000018FC  584F      2424          addq.w    #4,A7
                    2425   DumpRegisters_29:
                    2426   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
000018FE  3014      2427          move.w    (A4),D0
00001900  C07C 0010 2428          and.w     #16,D0
00001904  0C40 0010 2429          cmp.w     #16,D0
00001908  660A      2430          bne.s     DumpRegisters_30
0000190A  4878 0058 2431          pea       88
0000190E  4E92      2432          jsr       (A2)
00001910  584F      2433          addq.w    #4,A7
00001912  6008      2434          bra.s     DumpRegisters_31
                    2435   DumpRegisters_30:
00001914  4878 002D 2436          pea       45
00001918  4E92      2437          jsr       (A2)
0000191A  584F      2438          addq.w    #4,A7
                    2439   DumpRegisters_31:
                    2440   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
0000191C  3014      2441          move.w    (A4),D0
0000191E  C07C 0008 2442          and.w     #8,D0
00001922  0C40 0008 2443          cmp.w     #8,D0
00001926  660A      2444          bne.s     DumpRegisters_32
00001928  4878 004E 2445          pea       78
0000192C  4E92      2446          jsr       (A2)
0000192E  584F      2447          addq.w    #4,A7
00001930  6008      2448          bra.s     DumpRegisters_33
                    2449   DumpRegisters_32:
00001932  4878 002D 2450          pea       45
00001936  4E92      2451          jsr       (A2)
00001938  584F      2452          addq.w    #4,A7
                    2453   DumpRegisters_33:
                    2454   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
0000193A  3014      2455          move.w    (A4),D0
0000193C  C07C 0004 2456          and.w     #4,D0
00001940  0C40 0004 2457          cmp.w     #4,D0
00001944  660A      2458          bne.s     DumpRegisters_34
00001946  4878 005A 2459          pea       90
0000194A  4E92      2460          jsr       (A2)
0000194C  584F      2461          addq.w    #4,A7
0000194E  6008      2462          bra.s     DumpRegisters_35
                    2463   DumpRegisters_34:
00001950  4878 002D 2464          pea       45
00001954  4E92      2465          jsr       (A2)
00001956  584F      2466          addq.w    #4,A7
                    2467   DumpRegisters_35:
                    2468   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
00001958  3014      2469          move.w    (A4),D0
0000195A  C07C 0002 2470          and.w     #2,D0
0000195E  0C40 0002 2471          cmp.w     #2,D0
00001962  660A      2472          bne.s     DumpRegisters_36
00001964  4878 0056 2473          pea       86
00001968  4E92      2474          jsr       (A2)
0000196A  584F      2475          addq.w    #4,A7
0000196C  6008      2476          bra.s     DumpRegisters_37
                    2477   DumpRegisters_36:
0000196E  4878 002D 2478          pea       45
00001972  4E92      2479          jsr       (A2)
00001974  584F      2480          addq.w    #4,A7
                    2481   DumpRegisters_37:
                    2482   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
00001976  3014      2483          move.w    (A4),D0
00001978  C07C 0001 2484          and.w     #1,D0
0000197C  0C40 0001 2485          cmp.w     #1,D0
00001980  660A      2486          bne.s     DumpRegisters_38
00001982  4878 0043 2487          pea       67
00001986  4E92      2488          jsr       (A2)
00001988  584F      2489          addq.w    #4,A7
0000198A  6008      2490          bra.s     DumpRegisters_39
                    2491   DumpRegisters_38:
0000198C  4878 002D 2492          pea       45
00001990  4E92      2493          jsr       (A2)
00001992  584F      2494          addq.w    #4,A7
                    2495   DumpRegisters_39:
                    2496   ; putchar(']') ;
00001994  4878 005D 2497          pea       93
00001998  4E92      2498          jsr       (A2)
0000199A  584F      2499          addq.w    #4,A7
                    2500   ; printf("\r\n PC = $%08X  ", PC) ;
0000199C  2F39 0084 2501          move.l    _PC,-(A7)
000019A0  011A      
000019A2  4879 0000 2502          pea       @m68kde~1_61
000019A6  673E      
000019A8  4E93      2503          jsr       (A3)
000019AA  504F      2504          addq.w    #8,A7
                    2505   ; if(*(unsigned short int *)(PC) != 0x4e4e)   {
000019AC  2039 0084 2506          move.l    _PC,D0
000019B0  011A      
000019B2  2040      2507          move.l    D0,A0
000019B4  3010      2508          move.w    (A0),D0
000019B6  0C40 4E4E 2509          cmp.w     #20046,D0
000019BA  6722      2510          beq.s     DumpRegisters_40
                    2511   ; DisassembleInstruction(PC) ;
000019BC  2F39 0084 2512          move.l    _PC,-(A7)
000019C0  011A      
000019C2  6100 1D3C 2513          bsr       _DisassembleInstruction
000019C6  584F      2514          addq.w    #4,A7
                    2515   ; FormatInstructionForTrace() ;
000019C8  6100 FB24 2516          bsr       _FormatInstructionForTrace
                    2517   ; printf("%s", Instruction) ;
000019CC  4879 0084 2518          pea       _Instruction
000019D0  04DC      
000019D2  4879 0000 2519          pea       @m68kde~1_62
000019D6  674E      
000019D8  4E93      2520          jsr       (A3)
000019DA  504F      2521          addq.w    #8,A7
000019DC  600A      2522          bra.s     DumpRegisters_41
                    2523   DumpRegisters_40:
                    2524   ; }
                    2525   ; else
                    2526   ; printf("[BREAKPOINT]") ;
000019DE  4879 0000 2527          pea       @m68kde~1_63
000019E2  6752      
000019E4  4E93      2528          jsr       (A3)
000019E6  584F      2529          addq.w    #4,A7
                    2530   DumpRegisters_41:
                    2531   ; printf("\r\n") ;
000019E8  4879 0000 2532          pea       @m68kde~1_64
000019EC  6760      
000019EE  4E93      2533          jsr       (A3)
000019F0  584F      2534          addq.w    #4,A7
                    2535   ; for(i=0; i < 8; i++)    {
000019F2  4244      2536          clr.w     D4
                    2537   DumpRegisters_42:
000019F4  48C4      2538          ext.l     D4
000019F6  0C84 0000 2539          cmp.l     #8,D4
000019FA  0008      
000019FC  6C00 0040 2540          bge       DumpRegisters_44
                    2541   ; if(WatchPointSetOrCleared[i] == 1)
00001A00  48C4      2542          ext.l     D4
00001A02  2004      2543          move.l    D4,D0
00001A04  E588      2544          lsl.l     #2,D0
00001A06  41F9 0084 2545          lea       _WatchPointSetOrCleared,A0
00001A0A  019C      
00001A0C  2030 0800 2546          move.l    0(A0,D0.L),D0
00001A10  0C80 0000 2547          cmp.l     #1,D0
00001A14  0001      
00001A16  6622      2548          bne.s     DumpRegisters_45
                    2549   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
00001A18  220D      2550          move.l    A5,D1
00001A1A  48C4      2551          ext.l     D4
00001A1C  2F00      2552          move.l    D0,-(A7)
00001A1E  2004      2553          move.l    D4,D0
00001A20  C1FC 0064 2554          muls      #100,D0
00001A24  D280      2555          add.l     D0,D1
00001A26  201F      2556          move.l    (A7)+,D0
00001A28  2F01      2557          move.l    D1,-(A7)
00001A2A  48C4      2558          ext.l     D4
00001A2C  2F04      2559          move.l    D4,-(A7)
00001A2E  4879 0000 2560          pea       @m68kde~1_65
00001A32  6764      
00001A34  4E93      2561          jsr       (A3)
00001A36  DEFC 000C 2562          add.w     #12,A7
                    2563   DumpRegisters_45:
00001A3A  5244      2564          addq.w    #1,D4
00001A3C  60B6      2565          bra       DumpRegisters_42
                    2566   DumpRegisters_44:
00001A3E  4CDF 3CFC 2567          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001A42  4E75      2568          rts
                    2569   ; }
                    2570   ; }
                    2571   ; // Trace Exception Handler
                    2572   ; void DumpRegistersandPause(void)
                    2573   ; {
                    2574   _DumpRegistersandPause:
00001A44  48E7 0020 2575          movem.l   A2,-(A7)
00001A48  45F9 0000 2576          lea       _printf,A2
00001A4C  5776      
                    2577   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
00001A4E  4879 0000 2578          pea       @m68kde~1_66
00001A52  6770      
00001A54  4E92      2579          jsr       (A2)
00001A56  584F      2580          addq.w    #4,A7
                    2581   ; printf("\r\nBreak Points :[Disabled]") ;
00001A58  4879 0000 2582          pea       @m68kde~1_67
00001A5C  6790      
00001A5E  4E92      2583          jsr       (A2)
00001A60  584F      2584          addq.w    #4,A7
                    2585   ; DumpRegisters() ;
00001A62  6100 FB14 2586          bsr       _DumpRegisters
                    2587   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001A66  4879 0000 2588          pea       @m68kde~1_68
00001A6A  67AC      
00001A6C  4E92      2589          jsr       (A2)
00001A6E  584F      2590          addq.w    #4,A7
                    2591   ; printf("\r\nPress <ESC> to Resume Program") ;
00001A70  4879 0000 2592          pea       @m68kde~1_69
00001A74  67D8      
00001A76  4E92      2593          jsr       (A2)
00001A78  584F      2594          addq.w    #4,A7
                    2595   ; menu() ;
00001A7A  6100 0C2C 2596          bsr       _menu
00001A7E  4CDF 0400 2597          movem.l   (A7)+,A2
00001A82  4E75      2598          rts
                    2599   ; }
                    2600   ; void ChangeRegisters(void)
                    2601   ; {
                    2602   _ChangeRegisters:
00001A84  4E56 FFFC 2603          link      A6,#-4
00001A88  48E7 303C 2604          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00001A8C  45F9 0000 2605          lea       _printf,A2
00001A90  5776      
00001A92  47EE FFFC 2606          lea       -4(A6),A3
00001A96  49F8 0CEE 2607          lea       _Get8HexDigits,A4
00001A9A  4BF8 0BBC 2608          lea       __getch,A5
                    2609   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2610   ; int reg_val ;
                    2611   ; char c, reg[3] ;
                    2612   ; reg[0] = tolower(_getch()) ;
00001A9E  2F00      2613          move.l    D0,-(A7)
00001AA0  4E95      2614          jsr       (A5)
00001AA2  2200      2615          move.l    D0,D1
00001AA4  201F      2616          move.l    (A7)+,D0
00001AA6  2F01      2617          move.l    D1,-(A7)
00001AA8  6100 3C2A 2618          bsr       _tolower
00001AAC  584F      2619          addq.w    #4,A7
00001AAE  1680      2620          move.b    D0,(A3)
                    2621   ; reg[1] = c = tolower(_getch()) ;
00001AB0  2F00      2622          move.l    D0,-(A7)
00001AB2  4E95      2623          jsr       (A5)
00001AB4  2200      2624          move.l    D0,D1
00001AB6  201F      2625          move.l    (A7)+,D0
00001AB8  2F01      2626          move.l    D1,-(A7)
00001ABA  6100 3C18 2627          bsr       _tolower
00001ABE  584F      2628          addq.w    #4,A7
00001AC0  1400      2629          move.b    D0,D2
00001AC2  1740 0001 2630          move.b    D0,1(A3)
                    2631   ; if(reg[0] == (char)('d'))  {    // change data register
00001AC6  1013      2632          move.b    (A3),D0
00001AC8  0C00 0064 2633          cmp.b     #100,D0
00001ACC  6600 00AE 2634          bne       ChangeRegisters_1
                    2635   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
00001AD0  102B 0001 2636          move.b    1(A3),D0
00001AD4  0C00 0037 2637          cmp.b     #55,D0
00001AD8  6E0A      2638          bgt.s     ChangeRegisters_5
00001ADA  102B 0001 2639          move.b    1(A3),D0
00001ADE  0C00 0030 2640          cmp.b     #48,D0
00001AE2  6C0E      2641          bge.s     ChangeRegisters_3
                    2642   ChangeRegisters_5:
                    2643   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
00001AE4  4879 0000 2644          pea       @m68kde~1_70
00001AE8  67F8      
00001AEA  4E92      2645          jsr       (A2)
00001AEC  584F      2646          addq.w    #4,A7
                    2647   ; return ;
00001AEE  6000 0240 2648          bra       ChangeRegisters_6
                    2649   ChangeRegisters_3:
                    2650   ; }
                    2651   ; else {
                    2652   ; printf("\r\nD%c = ", c) ;
00001AF2  4882      2653          ext.w     D2
00001AF4  48C2      2654          ext.l     D2
00001AF6  2F02      2655          move.l    D2,-(A7)
00001AF8  4879 0000 2656          pea       @m68kde~1_71
00001AFC  6824      
00001AFE  4E92      2657          jsr       (A2)
00001B00  504F      2658          addq.w    #8,A7
                    2659   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001B02  42A7      2660          clr.l     -(A7)
00001B04  4E94      2661          jsr       (A4)
00001B06  584F      2662          addq.w    #4,A7
00001B08  2600      2663          move.l    D0,D3
                    2664   ; }
                    2665   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2666   ; if(c == (char)('0'))
00001B0A  0C02 0030 2667          cmp.b     #48,D2
00001B0E  660A      2668          bne.s     ChangeRegisters_7
                    2669   ; d0 = reg_val ;
00001B10  23C3 0084 2670          move.l    D3,_d0
00001B14  00DE      
00001B16  6000 0060 2671          bra       ChangeRegisters_20
                    2672   ChangeRegisters_7:
                    2673   ; else if(c == (char)('1'))
00001B1A  0C02 0031 2674          cmp.b     #49,D2
00001B1E  660A      2675          bne.s     ChangeRegisters_9
                    2676   ; d1 = reg_val ;
00001B20  23C3 0084 2677          move.l    D3,_d1
00001B24  00E2      
00001B26  6000 0050 2678          bra       ChangeRegisters_20
                    2679   ChangeRegisters_9:
                    2680   ; else if(c == (char)('2'))
00001B2A  0C02 0032 2681          cmp.b     #50,D2
00001B2E  660A      2682          bne.s     ChangeRegisters_11
                    2683   ; d2 = reg_val ;
00001B30  23C3 0084 2684          move.l    D3,_d2
00001B34  00E6      
00001B36  6000 0040 2685          bra       ChangeRegisters_20
                    2686   ChangeRegisters_11:
                    2687   ; else if(c == (char)('3'))
00001B3A  0C02 0033 2688          cmp.b     #51,D2
00001B3E  6608      2689          bne.s     ChangeRegisters_13
                    2690   ; d3 = reg_val ;
00001B40  23C3 0084 2691          move.l    D3,_d3
00001B44  00EA      
00001B46  6030      2692          bra.s     ChangeRegisters_20
                    2693   ChangeRegisters_13:
                    2694   ; else if(c == (char)('4'))
00001B48  0C02 0034 2695          cmp.b     #52,D2
00001B4C  6608      2696          bne.s     ChangeRegisters_15
                    2697   ; d4 = reg_val ;
00001B4E  23C3 0084 2698          move.l    D3,_d4
00001B52  00EE      
00001B54  6022      2699          bra.s     ChangeRegisters_20
                    2700   ChangeRegisters_15:
                    2701   ; else if(c == (char)('5'))
00001B56  0C02 0035 2702          cmp.b     #53,D2
00001B5A  6608      2703          bne.s     ChangeRegisters_17
                    2704   ; d5 = reg_val ;
00001B5C  23C3 0084 2705          move.l    D3,_d5
00001B60  00F2      
00001B62  6014      2706          bra.s     ChangeRegisters_20
                    2707   ChangeRegisters_17:
                    2708   ; else if(c == (char)('6'))
00001B64  0C02 0036 2709          cmp.b     #54,D2
00001B68  6608      2710          bne.s     ChangeRegisters_19
                    2711   ; d6 = reg_val ;
00001B6A  23C3 0084 2712          move.l    D3,_d6
00001B6E  00F6      
00001B70  6006      2713          bra.s     ChangeRegisters_20
                    2714   ChangeRegisters_19:
                    2715   ; else
                    2716   ; d7 = reg_val ;
00001B72  23C3 0084 2717          move.l    D3,_d7
00001B76  00FA      
                    2718   ChangeRegisters_20:
00001B78  6000 01B2 2719          bra       ChangeRegisters_51
                    2720   ChangeRegisters_1:
                    2721   ; }
                    2722   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001B7C  1013      2723          move.b    (A3),D0
00001B7E  0C00 0061 2724          cmp.b     #97,D0
00001B82  6600 00A6 2725          bne       ChangeRegisters_21
                    2726   ; if((c > (char)('7')) || (c < (char)('0'))) {
00001B86  0C02 0037 2727          cmp.b     #55,D2
00001B8A  6E06      2728          bgt.s     ChangeRegisters_25
00001B8C  0C02 0030 2729          cmp.b     #48,D2
00001B90  6C0E      2730          bge.s     ChangeRegisters_23
                    2731   ChangeRegisters_25:
                    2732   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
00001B92  4879 0000 2733          pea       @m68kde~1_72
00001B96  682E      
00001B98  4E92      2734          jsr       (A2)
00001B9A  584F      2735          addq.w    #4,A7
                    2736   ; return ;
00001B9C  6000 0192 2737          bra       ChangeRegisters_6
                    2738   ChangeRegisters_23:
                    2739   ; }
                    2740   ; else {
                    2741   ; printf("\r\nA%c = ", c) ;
00001BA0  4882      2742          ext.w     D2
00001BA2  48C2      2743          ext.l     D2
00001BA4  2F02      2744          move.l    D2,-(A7)
00001BA6  4879 0000 2745          pea       @m68kde~1_73
00001BAA  685C      
00001BAC  4E92      2746          jsr       (A2)
00001BAE  504F      2747          addq.w    #8,A7
                    2748   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001BB0  42A7      2749          clr.l     -(A7)
00001BB2  4E94      2750          jsr       (A4)
00001BB4  584F      2751          addq.w    #4,A7
00001BB6  2600      2752          move.l    D0,D3
                    2753   ; }
                    2754   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2755   ; if(c == (char)('0'))
00001BB8  0C02 0030 2756          cmp.b     #48,D2
00001BBC  660A      2757          bne.s     ChangeRegisters_26
                    2758   ; a0 = reg_val ;
00001BBE  23C3 0084 2759          move.l    D3,_a0
00001BC2  00FE      
00001BC4  6000 0060 2760          bra       ChangeRegisters_39
                    2761   ChangeRegisters_26:
                    2762   ; else if(c == (char)('1'))
00001BC8  0C02 0031 2763          cmp.b     #49,D2
00001BCC  660A      2764          bne.s     ChangeRegisters_28
                    2765   ; a1 = reg_val ;
00001BCE  23C3 0084 2766          move.l    D3,_a1
00001BD2  0102      
00001BD4  6000 0050 2767          bra       ChangeRegisters_39
                    2768   ChangeRegisters_28:
                    2769   ; else if(c == (char)('2'))
00001BD8  0C02 0032 2770          cmp.b     #50,D2
00001BDC  660A      2771          bne.s     ChangeRegisters_30
                    2772   ; a2 = reg_val ;
00001BDE  23C3 0084 2773          move.l    D3,_a2
00001BE2  0106      
00001BE4  6000 0040 2774          bra       ChangeRegisters_39
                    2775   ChangeRegisters_30:
                    2776   ; else if(c == (char)('3'))
00001BE8  0C02 0033 2777          cmp.b     #51,D2
00001BEC  6608      2778          bne.s     ChangeRegisters_32
                    2779   ; a3 = reg_val ;
00001BEE  23C3 0084 2780          move.l    D3,_a3
00001BF2  010A      
00001BF4  6030      2781          bra.s     ChangeRegisters_39
                    2782   ChangeRegisters_32:
                    2783   ; else if(c == (char)('4'))
00001BF6  0C02 0034 2784          cmp.b     #52,D2
00001BFA  6608      2785          bne.s     ChangeRegisters_34
                    2786   ; a4 = reg_val ;
00001BFC  23C3 0084 2787          move.l    D3,_a4
00001C00  010E      
00001C02  6022      2788          bra.s     ChangeRegisters_39
                    2789   ChangeRegisters_34:
                    2790   ; else if(c == (char)('5'))
00001C04  0C02 0035 2791          cmp.b     #53,D2
00001C08  6608      2792          bne.s     ChangeRegisters_36
                    2793   ; a5 = reg_val ;
00001C0A  23C3 0084 2794          move.l    D3,_a5
00001C0E  0112      
00001C10  6014      2795          bra.s     ChangeRegisters_39
                    2796   ChangeRegisters_36:
                    2797   ; else if(c == (char)('6'))
00001C12  0C02 0036 2798          cmp.b     #54,D2
00001C16  6608      2799          bne.s     ChangeRegisters_38
                    2800   ; a6 = reg_val ;
00001C18  23C3 0084 2801          move.l    D3,_a6
00001C1C  0116      
00001C1E  6006      2802          bra.s     ChangeRegisters_39
                    2803   ChangeRegisters_38:
                    2804   ; else
                    2805   ; USP = reg_val ;
00001C20  23C3 0084 2806          move.l    D3,_USP
00001C24  0122      
                    2807   ChangeRegisters_39:
00001C26  6000 0104 2808          bra       ChangeRegisters_51
                    2809   ChangeRegisters_21:
                    2810   ; }
                    2811   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001C2A  1013      2812          move.b    (A3),D0
00001C2C  0C00 0075 2813          cmp.b     #117,D0
00001C30  6600 004C 2814          bne       ChangeRegisters_40
00001C34  0C02 0073 2815          cmp.b     #115,D2
00001C38  6600 0044 2816          bne       ChangeRegisters_40
                    2817   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001C3C  2F00      2818          move.l    D0,-(A7)
00001C3E  4E95      2819          jsr       (A5)
00001C40  2200      2820          move.l    D0,D1
00001C42  201F      2821          move.l    (A7)+,D0
00001C44  2F01      2822          move.l    D1,-(A7)
00001C46  6100 3A8C 2823          bsr       _tolower
00001C4A  584F      2824          addq.w    #4,A7
00001C4C  0C80 0000 2825          cmp.l     #112,D0
00001C50  0070      
00001C52  6618      2826          bne.s     ChangeRegisters_42
                    2827   ; printf("\r\nUser SP = ") ;
00001C54  4879 0000 2828          pea       @m68kde~1_74
00001C58  6866      
00001C5A  4E92      2829          jsr       (A2)
00001C5C  584F      2830          addq.w    #4,A7
                    2831   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001C5E  42A7      2832          clr.l     -(A7)
00001C60  4E94      2833          jsr       (A4)
00001C62  584F      2834          addq.w    #4,A7
00001C64  23C0 0084 2835          move.l    D0,_USP
00001C68  0122      
00001C6A  600E      2836          bra.s     ChangeRegisters_43
                    2837   ChangeRegisters_42:
                    2838   ; }
                    2839   ; else {
                    2840   ; printf("\r\nIllegal Register....") ;
00001C6C  4879 0000 2841          pea       @m68kde~1_75
00001C70  6874      
00001C72  4E92      2842          jsr       (A2)
00001C74  584F      2843          addq.w    #4,A7
                    2844   ; return ;
00001C76  6000 00B8 2845          bra       ChangeRegisters_6
                    2846   ChangeRegisters_43:
00001C7A  6000 00B0 2847          bra       ChangeRegisters_51
                    2848   ChangeRegisters_40:
                    2849   ; }
                    2850   ; }
                    2851   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001C7E  1013      2852          move.b    (A3),D0
00001C80  0C00 0073 2853          cmp.b     #115,D0
00001C84  6600 004C 2854          bne       ChangeRegisters_44
00001C88  0C02 0073 2855          cmp.b     #115,D2
00001C8C  6600 0044 2856          bne       ChangeRegisters_44
                    2857   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001C90  2F00      2858          move.l    D0,-(A7)
00001C92  4E95      2859          jsr       (A5)
00001C94  2200      2860          move.l    D0,D1
00001C96  201F      2861          move.l    (A7)+,D0
00001C98  2F01      2862          move.l    D1,-(A7)
00001C9A  6100 3A38 2863          bsr       _tolower
00001C9E  584F      2864          addq.w    #4,A7
00001CA0  0C80 0000 2865          cmp.l     #112,D0
00001CA4  0070      
00001CA6  6618      2866          bne.s     ChangeRegisters_46
                    2867   ; printf("\r\nSystem SP = ") ;
00001CA8  4879 0000 2868          pea       @m68kde~1_76
00001CAC  688C      
00001CAE  4E92      2869          jsr       (A2)
00001CB0  584F      2870          addq.w    #4,A7
                    2871   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001CB2  42A7      2872          clr.l     -(A7)
00001CB4  4E94      2873          jsr       (A4)
00001CB6  584F      2874          addq.w    #4,A7
00001CB8  23C0 0084 2875          move.l    D0,_SSP
00001CBC  011E      
00001CBE  600E      2876          bra.s     ChangeRegisters_47
                    2877   ChangeRegisters_46:
                    2878   ; }
                    2879   ; else {
                    2880   ; printf("\r\nIllegal Register....") ;
00001CC0  4879 0000 2881          pea       @m68kde~1_77
00001CC4  689C      
00001CC6  4E92      2882          jsr       (A2)
00001CC8  584F      2883          addq.w    #4,A7
                    2884   ; return ;
00001CCA  6000 0064 2885          bra       ChangeRegisters_6
                    2886   ChangeRegisters_47:
00001CCE  6000 005C 2887          bra       ChangeRegisters_51
                    2888   ChangeRegisters_44:
                    2889   ; }
                    2890   ; }
                    2891   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001CD2  1013      2892          move.b    (A3),D0
00001CD4  0C00 0070 2893          cmp.b     #112,D0
00001CD8  6620      2894          bne.s     ChangeRegisters_48
00001CDA  0C02 0063 2895          cmp.b     #99,D2
00001CDE  661A      2896          bne.s     ChangeRegisters_48
                    2897   ; printf("\r\nPC = ") ;
00001CE0  4879 0000 2898          pea       @m68kde~1_78
00001CE4  68B4      
00001CE6  4E92      2899          jsr       (A2)
00001CE8  584F      2900          addq.w    #4,A7
                    2901   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001CEA  42A7      2902          clr.l     -(A7)
00001CEC  4E94      2903          jsr       (A4)
00001CEE  584F      2904          addq.w    #4,A7
00001CF0  23C0 0084 2905          move.l    D0,_PC
00001CF4  011A      
00001CF6  6000 0034 2906          bra       ChangeRegisters_51
                    2907   ChangeRegisters_48:
                    2908   ; }
                    2909   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001CFA  1013      2910          move.b    (A3),D0
00001CFC  0C00 0073 2911          cmp.b     #115,D0
00001D00  6620      2912          bne.s     ChangeRegisters_50
00001D02  0C02 0072 2913          cmp.b     #114,D2
00001D06  661A      2914          bne.s     ChangeRegisters_50
                    2915   ; printf("\r\nSR = ") ;
00001D08  4879 0000 2916          pea       @m68kde~1_79
00001D0C  68BC      
00001D0E  4E92      2917          jsr       (A2)
00001D10  584F      2918          addq.w    #4,A7
                    2919   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001D12  42A7      2920          clr.l     -(A7)
00001D14  6100 EF92 2921          bsr       _Get4HexDigits
00001D18  584F      2922          addq.w    #4,A7
00001D1A  33C0 0084 2923          move.w    D0,_SR
00001D1E  0126      
00001D20  600A      2924          bra.s     ChangeRegisters_51
                    2925   ChangeRegisters_50:
                    2926   ; }
                    2927   ; else
                    2928   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00001D22  4879 0000 2929          pea       @m68kde~1_80
00001D26  68C4      
00001D28  4E92      2930          jsr       (A2)
00001D2A  584F      2931          addq.w    #4,A7
                    2932   ChangeRegisters_51:
                    2933   ; DumpRegisters() ;
00001D2C  6100 F84A 2934          bsr       _DumpRegisters
                    2935   ChangeRegisters_6:
00001D30  4CDF 3C0C 2936          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001D34  4E5E      2937          unlk      A6
00001D36  4E75      2938          rts
                    2939   ; }
                    2940   ; void BreakPointDisplay(void)
                    2941   ; {
                    2942   _BreakPointDisplay:
00001D38  48E7 3030 2943          movem.l   D2/D3/A2/A3,-(A7)
00001D3C  45F9 0000 2944          lea       _printf,A2
00001D40  5776      
00001D42  47F9 0084 2945          lea       _BreakPointAddress,A3
00001D46  0128      
                    2946   ; int i, BreakPointsSet = 0 ;
00001D48  4283      2947          clr.l     D3
                    2948   ; // any break points  set
                    2949   ; for(i = 0; i < 8; i++)  {
00001D4A  4282      2950          clr.l     D2
                    2951   BreakPointDisplay_1:
00001D4C  0C82 0000 2952          cmp.l     #8,D2
00001D50  0008      
00001D52  6C1C      2953          bge.s     BreakPointDisplay_3
                    2954   ; if(BreakPointSetOrCleared[i] == 1)
00001D54  2002      2955          move.l    D2,D0
00001D56  E588      2956          lsl.l     #2,D0
00001D58  41F9 0084 2957          lea       _BreakPointSetOrCleared,A0
00001D5C  0158      
00001D5E  2030 0800 2958          move.l    0(A0,D0.L),D0
00001D62  0C80 0000 2959          cmp.l     #1,D0
00001D66  0001      
00001D68  6602      2960          bne.s     BreakPointDisplay_4
                    2961   ; BreakPointsSet = 1;
00001D6A  7601      2962          moveq     #1,D3
                    2963   BreakPointDisplay_4:
00001D6C  5282      2964          addq.l    #1,D2
00001D6E  60DC      2965          bra       BreakPointDisplay_1
                    2966   BreakPointDisplay_3:
                    2967   ; }
                    2968   ; if(BreakPointsSet == 1) {
00001D70  0C83 0000 2969          cmp.l     #1,D3
00001D74  0001      
00001D76  6616      2970          bne.s     BreakPointDisplay_6
                    2971   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001D78  4879 0000 2972          pea       @m68kde~1_81
00001D7C  6900      
00001D7E  4E92      2973          jsr       (A2)
00001D80  584F      2974          addq.w    #4,A7
                    2975   ; printf("\r\n---     ---------    -----------") ;
00001D82  4879 0000 2976          pea       @m68kde~1_82
00001D86  6926      
00001D88  4E92      2977          jsr       (A2)
00001D8A  584F      2978          addq.w    #4,A7
00001D8C  600A      2979          bra.s     BreakPointDisplay_7
                    2980   BreakPointDisplay_6:
                    2981   ; }
                    2982   ; else
                    2983   ; printf("\r\nNo BreakPoints Set") ;
00001D8E  4879 0000 2984          pea       @m68kde~1_83
00001D92  694A      
00001D94  4E92      2985          jsr       (A2)
00001D96  584F      2986          addq.w    #4,A7
                    2987   BreakPointDisplay_7:
                    2988   ; for(i = 0; i < 8; i++)  {
00001D98  4282      2989          clr.l     D2
                    2990   BreakPointDisplay_8:
00001D9A  0C82 0000 2991          cmp.l     #8,D2
00001D9E  0008      
00001DA0  6C00 007E 2992          bge       BreakPointDisplay_10
                    2993   ; // put opcode back to disassemble it, then put break point back
                    2994   ; if(BreakPointSetOrCleared[i] == 1)  {
00001DA4  2002      2995          move.l    D2,D0
00001DA6  E588      2996          lsl.l     #2,D0
00001DA8  41F9 0084 2997          lea       _BreakPointSetOrCleared,A0
00001DAC  0158      
00001DAE  2030 0800 2998          move.l    0(A0,D0.L),D0
00001DB2  0C80 0000 2999          cmp.l     #1,D0
00001DB6  0001      
00001DB8  6600 0060 3000          bne       BreakPointDisplay_11
                    3001   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001DBC  2002      3002          move.l    D2,D0
00001DBE  E388      3003          lsl.l     #1,D0
00001DC0  41F9 0084 3004          lea       _BreakPointInstruction,A0
00001DC4  0148      
00001DC6  2202      3005          move.l    D2,D1
00001DC8  E589      3006          lsl.l     #2,D1
00001DCA  2233 1800 3007          move.l    0(A3,D1.L),D1
00001DCE  2241      3008          move.l    D1,A1
00001DD0  32B0 0800 3009          move.w    0(A0,D0.L),(A1)
                    3010   ; DisassembleInstruction(BreakPointAddress[i]) ;
00001DD4  2202      3011          move.l    D2,D1
00001DD6  E589      3012          lsl.l     #2,D1
00001DD8  2F33 1800 3013          move.l    0(A3,D1.L),-(A7)
00001DDC  6100 1922 3014          bsr       _DisassembleInstruction
00001DE0  584F      3015          addq.w    #4,A7
                    3016   ; FormatInstructionForTrace() ;
00001DE2  6100 F70A 3017          bsr       _FormatInstructionForTrace
                    3018   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001DE6  2002      3019          move.l    D2,D0
00001DE8  E588      3020          lsl.l     #2,D0
00001DEA  2033 0800 3021          move.l    0(A3,D0.L),D0
00001DEE  2040      3022          move.l    D0,A0
00001DF0  30BC 4E4E 3023          move.w    #20046,(A0)
                    3024   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001DF4  2202      3025          move.l    D2,D1
00001DF6  E589      3026          lsl.l     #2,D1
00001DF8  2F33 1800 3027          move.l    0(A3,D1.L),-(A7)
00001DFC  2F02      3028          move.l    D2,-(A7)
00001DFE  4879 0000 3029          pea       @m68kde~1_84
00001E02  6960      
00001E04  4E92      3030          jsr       (A2)
00001E06  DEFC 000C 3031          add.w     #12,A7
                    3032   ; printf("    %s", Instruction);
00001E0A  4879 0084 3033          pea       _Instruction
00001E0E  04DC      
00001E10  4879 0000 3034          pea       @m68kde~1_85
00001E14  6970      
00001E16  4E92      3035          jsr       (A2)
00001E18  504F      3036          addq.w    #8,A7
                    3037   BreakPointDisplay_11:
00001E1A  5282      3038          addq.l    #1,D2
00001E1C  6000 FF7C 3039          bra       BreakPointDisplay_8
                    3040   BreakPointDisplay_10:
                    3041   ; }
                    3042   ; }
                    3043   ; printf("\r\n") ;
00001E20  4879 0000 3044          pea       @m68kde~1_86
00001E24  6978      
00001E26  4E92      3045          jsr       (A2)
00001E28  584F      3046          addq.w    #4,A7
00001E2A  4CDF 0C0C 3047          movem.l   (A7)+,D2/D3/A2/A3
00001E2E  4E75      3048          rts
                    3049   ; }
                    3050   ; void WatchPointDisplay(void)
                    3051   ; {
                    3052   _WatchPointDisplay:
00001E30  48E7 3020 3053          movem.l   D2/D3/A2,-(A7)
00001E34  45F9 0000 3054          lea       _printf,A2
00001E38  5776      
                    3055   ; int i ;
                    3056   ; int WatchPointsSet = 0 ;
00001E3A  4283      3057          clr.l     D3
                    3058   ; // any watchpoints set
                    3059   ; for(i = 0; i < 8; i++)  {
00001E3C  4282      3060          clr.l     D2
                    3061   WatchPointDisplay_1:
00001E3E  0C82 0000 3062          cmp.l     #8,D2
00001E42  0008      
00001E44  6C1C      3063          bge.s     WatchPointDisplay_3
                    3064   ; if(WatchPointSetOrCleared[i] == 1)
00001E46  2002      3065          move.l    D2,D0
00001E48  E588      3066          lsl.l     #2,D0
00001E4A  41F9 0084 3067          lea       _WatchPointSetOrCleared,A0
00001E4E  019C      
00001E50  2030 0800 3068          move.l    0(A0,D0.L),D0
00001E54  0C80 0000 3069          cmp.l     #1,D0
00001E58  0001      
00001E5A  6602      3070          bne.s     WatchPointDisplay_4
                    3071   ; WatchPointsSet = 1;
00001E5C  7601      3072          moveq     #1,D3
                    3073   WatchPointDisplay_4:
00001E5E  5282      3074          addq.l    #1,D2
00001E60  60DC      3075          bra       WatchPointDisplay_1
                    3076   WatchPointDisplay_3:
                    3077   ; }
                    3078   ; if(WatchPointsSet == 1) {
00001E62  0C83 0000 3079          cmp.l     #1,D3
00001E66  0001      
00001E68  6616      3080          bne.s     WatchPointDisplay_6
                    3081   ; printf("\r\nNum     Address") ;
00001E6A  4879 0000 3082          pea       @m68kde~1_87
00001E6E  697C      
00001E70  4E92      3083          jsr       (A2)
00001E72  584F      3084          addq.w    #4,A7
                    3085   ; printf("\r\n---     ---------") ;
00001E74  4879 0000 3086          pea       @m68kde~1_88
00001E78  698E      
00001E7A  4E92      3087          jsr       (A2)
00001E7C  584F      3088          addq.w    #4,A7
00001E7E  600A      3089          bra.s     WatchPointDisplay_7
                    3090   WatchPointDisplay_6:
                    3091   ; }
                    3092   ; else
                    3093   ; printf("\r\nNo WatchPoints Set") ;
00001E80  4879 0000 3094          pea       @m68kde~1_89
00001E84  69A2      
00001E86  4E92      3095          jsr       (A2)
00001E88  584F      3096          addq.w    #4,A7
                    3097   WatchPointDisplay_7:
                    3098   ; for(i = 0; i < 8; i++)  {
00001E8A  4282      3099          clr.l     D2
                    3100   WatchPointDisplay_8:
00001E8C  0C82 0000 3101          cmp.l     #8,D2
00001E90  0008      
00001E92  6C00 0038 3102          bge       WatchPointDisplay_10
                    3103   ; if(WatchPointSetOrCleared[i] == 1)
00001E96  2002      3104          move.l    D2,D0
00001E98  E588      3105          lsl.l     #2,D0
00001E9A  41F9 0084 3106          lea       _WatchPointSetOrCleared,A0
00001E9E  019C      
00001EA0  2030 0800 3107          move.l    0(A0,D0.L),D0
00001EA4  0C80 0000 3108          cmp.l     #1,D0
00001EA8  0001      
00001EAA  661C      3109          bne.s     WatchPointDisplay_11
                    3110   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001EAC  2202      3111          move.l    D2,D1
00001EAE  E589      3112          lsl.l     #2,D1
00001EB0  41F9 0084 3113          lea       _WatchPointAddress,A0
00001EB4  017C      
00001EB6  2F30 1800 3114          move.l    0(A0,D1.L),-(A7)
00001EBA  2F02      3115          move.l    D2,-(A7)
00001EBC  4879 0000 3116          pea       @m68kde~1_90
00001EC0  69B8      
00001EC2  4E92      3117          jsr       (A2)
00001EC4  DEFC 000C 3118          add.w     #12,A7
                    3119   WatchPointDisplay_11:
00001EC8  5282      3120          addq.l    #1,D2
00001ECA  60C0      3121          bra       WatchPointDisplay_8
                    3122   WatchPointDisplay_10:
                    3123   ; }
                    3124   ; printf("\r\n") ;
00001ECC  4879 0000 3125          pea       @m68kde~1_91
00001ED0  69C8      
00001ED2  4E92      3126          jsr       (A2)
00001ED4  584F      3127          addq.w    #4,A7
00001ED6  4CDF 040C 3128          movem.l   (A7)+,D2/D3/A2
00001EDA  4E75      3129          rts
                    3130   ; }
                    3131   ; void BreakPointClear(void)
                    3132   ; {
                    3133   _BreakPointClear:
00001EDC  4E56 FFFC 3134          link      A6,#-4
00001EE0  48E7 2020 3135          movem.l   D2/A2,-(A7)
00001EE4  45F9 0000 3136          lea       _printf,A2
00001EE8  5776      
                    3137   ; unsigned int i ;
                    3138   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3139   ; BreakPointDisplay() ;
00001EEA  6100 FE4C 3140          bsr       _BreakPointDisplay
                    3141   ; printf("\r\nEnter Break Point Number: ") ;
00001EEE  4879 0000 3142          pea       @m68kde~1_92
00001EF2  69CC      
00001EF4  4E92      3143          jsr       (A2)
00001EF6  584F      3144          addq.w    #4,A7
                    3145   ; i = xtod(_getch()) ;           // get break pointer number
00001EF8  2F00      3146          move.l    D0,-(A7)
00001EFA  6100 ECC0 3147          bsr       __getch
00001EFE  2200      3148          move.l    D0,D1
00001F00  201F      3149          move.l    (A7)+,D0
00001F02  2F01      3150          move.l    D1,-(A7)
00001F04  6100 ED1C 3151          bsr       _xtod
00001F08  584F      3152          addq.w    #4,A7
00001F0A  C0BC 0000 3153          and.l     #255,D0
00001F0E  00FF      
00001F10  2400      3154          move.l    D0,D2
                    3155   ; if((i < 0) || (i > 7))   {
00001F12  0C82 0000 3156          cmp.l     #0,D2
00001F16  0000      
00001F18  6508      3157          blo.s     BreakPointClear_3
00001F1A  0C82 0000 3158          cmp.l     #7,D2
00001F1E  0007      
00001F20  630E      3159          bls.s     BreakPointClear_1
                    3160   BreakPointClear_3:
                    3161   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001F22  4879 0000 3162          pea       @m68kde~1_93
00001F26  69EA      
00001F28  4E92      3163          jsr       (A2)
00001F2A  584F      3164          addq.w    #4,A7
                    3165   ; return ;
00001F2C  6000 0080 3166          bra       BreakPointClear_4
                    3167   BreakPointClear_1:
                    3168   ; }
                    3169   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001F30  2002      3170          move.l    D2,D0
00001F32  E588      3171          lsl.l     #2,D0
00001F34  41F9 0084 3172          lea       _BreakPointSetOrCleared,A0
00001F38  0158      
00001F3A  2030 0800 3173          move.l    0(A0,D0.L),D0
00001F3E  0C80 0000 3174          cmp.l     #1,D0
00001F42  0001      
00001F44  6600 005A 3175          bne       BreakPointClear_5
                    3176   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001F48  2002      3177          move.l    D2,D0
00001F4A  E588      3178          lsl.l     #2,D0
00001F4C  41F9 0084 3179          lea       _BreakPointAddress,A0
00001F50  0128      
00001F52  2D70 0800 3180          move.l    0(A0,D0.L),-4(A6)
00001F56  FFFC      
                    3181   ; BreakPointAddress[i] = 0 ;
00001F58  2002      3182          move.l    D2,D0
00001F5A  E588      3183          lsl.l     #2,D0
00001F5C  41F9 0084 3184          lea       _BreakPointAddress,A0
00001F60  0128      
00001F62  42B0 0800 3185          clr.l     0(A0,D0.L)
                    3186   ; BreakPointSetOrCleared[i] = 0 ;
00001F66  2002      3187          move.l    D2,D0
00001F68  E588      3188          lsl.l     #2,D0
00001F6A  41F9 0084 3189          lea       _BreakPointSetOrCleared,A0
00001F6E  0158      
00001F70  42B0 0800 3190          clr.l     0(A0,D0.L)
                    3191   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001F74  2002      3192          move.l    D2,D0
00001F76  E388      3193          lsl.l     #1,D0
00001F78  41F9 0084 3194          lea       _BreakPointInstruction,A0
00001F7C  0148      
00001F7E  226E FFFC 3195          move.l    -4(A6),A1
00001F82  32B0 0800 3196          move.w    0(A0,D0.L),(A1)
                    3197   ; BreakPointInstruction[i] = 0 ;
00001F86  2002      3198          move.l    D2,D0
00001F88  E388      3199          lsl.l     #1,D0
00001F8A  41F9 0084 3200          lea       _BreakPointInstruction,A0
00001F8E  0148      
00001F90  4270 0800 3201          clr.w     0(A0,D0.L)
                    3202   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001F94  4879 0000 3203          pea       @m68kde~1_94
00001F98  6A06      
00001F9A  4E92      3204          jsr       (A2)
00001F9C  584F      3205          addq.w    #4,A7
00001F9E  600A      3206          bra.s     BreakPointClear_6
                    3207   BreakPointClear_5:
                    3208   ; }
                    3209   ; else
                    3210   ; printf("\r\nBreak Point wasn't Set.....") ;
00001FA0  4879 0000 3211          pea       @m68kde~1_95
00001FA4  6A24      
00001FA6  4E92      3212          jsr       (A2)
00001FA8  584F      3213          addq.w    #4,A7
                    3214   BreakPointClear_6:
                    3215   ; BreakPointDisplay() ;
00001FAA  6100 FD8C 3216          bsr       _BreakPointDisplay
                    3217   ; return ;
                    3218   BreakPointClear_4:
00001FAE  4CDF 0404 3219          movem.l   (A7)+,D2/A2
00001FB2  4E5E      3220          unlk      A6
00001FB4  4E75      3221          rts
                    3222   ; }
                    3223   ; void WatchPointClear(void)
                    3224   ; {
                    3225   _WatchPointClear:
00001FB6  48E7 2020 3226          movem.l   D2/A2,-(A7)
00001FBA  45F9 0000 3227          lea       _printf,A2
00001FBE  5776      
                    3228   ; unsigned int i ;
                    3229   ; WatchPointDisplay() ;
00001FC0  6100 FE6E 3230          bsr       _WatchPointDisplay
                    3231   ; printf("\r\nEnter Watch Point Number: ") ;
00001FC4  4879 0000 3232          pea       @m68kde~1_96
00001FC8  6A42      
00001FCA  4E92      3233          jsr       (A2)
00001FCC  584F      3234          addq.w    #4,A7
                    3235   ; i = xtod(_getch()) ;           // get watch pointer number
00001FCE  2F00      3236          move.l    D0,-(A7)
00001FD0  6100 EBEA 3237          bsr       __getch
00001FD4  2200      3238          move.l    D0,D1
00001FD6  201F      3239          move.l    (A7)+,D0
00001FD8  2F01      3240          move.l    D1,-(A7)
00001FDA  6100 EC46 3241          bsr       _xtod
00001FDE  584F      3242          addq.w    #4,A7
00001FE0  C0BC 0000 3243          and.l     #255,D0
00001FE4  00FF      
00001FE6  2400      3244          move.l    D0,D2
                    3245   ; if((i < 0) || (i > 7))   {
00001FE8  0C82 0000 3246          cmp.l     #0,D2
00001FEC  0000      
00001FEE  6508      3247          blo.s     WatchPointClear_3
00001FF0  0C82 0000 3248          cmp.l     #7,D2
00001FF4  0007      
00001FF6  630E      3249          bls.s     WatchPointClear_1
                    3250   WatchPointClear_3:
                    3251   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001FF8  4879 0000 3252          pea       @m68kde~1_97
00001FFC  6A60      
00001FFE  4E92      3253          jsr       (A2)
00002000  584F      3254          addq.w    #4,A7
                    3255   ; return ;
00002002  6000 004E 3256          bra       WatchPointClear_4
                    3257   WatchPointClear_1:
                    3258   ; }
                    3259   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00002006  2002      3260          move.l    D2,D0
00002008  E588      3261          lsl.l     #2,D0
0000200A  41F9 0084 3262          lea       _WatchPointSetOrCleared,A0
0000200E  019C      
00002010  2030 0800 3263          move.l    0(A0,D0.L),D0
00002014  0C80 0000 3264          cmp.l     #1,D0
00002018  0001      
0000201A  6628      3265          bne.s     WatchPointClear_5
                    3266   ; WatchPointAddress[i] = 0 ;
0000201C  2002      3267          move.l    D2,D0
0000201E  E588      3268          lsl.l     #2,D0
00002020  41F9 0084 3269          lea       _WatchPointAddress,A0
00002024  017C      
00002026  42B0 0800 3270          clr.l     0(A0,D0.L)
                    3271   ; WatchPointSetOrCleared[i] = 0 ;
0000202A  2002      3272          move.l    D2,D0
0000202C  E588      3273          lsl.l     #2,D0
0000202E  41F9 0084 3274          lea       _WatchPointSetOrCleared,A0
00002032  019C      
00002034  42B0 0800 3275          clr.l     0(A0,D0.L)
                    3276   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00002038  4879 0000 3277          pea       @m68kde~1_98
0000203C  6A7C      
0000203E  4E92      3278          jsr       (A2)
00002040  584F      3279          addq.w    #4,A7
00002042  600A      3280          bra.s     WatchPointClear_6
                    3281   WatchPointClear_5:
                    3282   ; }
                    3283   ; else
                    3284   ; printf("\r\nWatch Point Was not Set.....") ;
00002044  4879 0000 3285          pea       @m68kde~1_99
00002048  6A9A      
0000204A  4E92      3286          jsr       (A2)
0000204C  584F      3287          addq.w    #4,A7
                    3288   WatchPointClear_6:
                    3289   ; WatchPointDisplay() ;
0000204E  6100 FDE0 3290          bsr       _WatchPointDisplay
                    3291   ; return ;
                    3292   WatchPointClear_4:
00002052  4CDF 0404 3293          movem.l   (A7)+,D2/A2
00002056  4E75      3294          rts
                    3295   ; }
                    3296   ; void DisableBreakPoints(void)
                    3297   ; {
                    3298   _DisableBreakPoints:
00002058  4E56 FFFC 3299          link      A6,#-4
0000205C  48E7 2000 3300          movem.l   D2,-(A7)
                    3301   ; int i ;
                    3302   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3303   ; for(i = 0; i < 8; i++)  {
00002060  4282      3304          clr.l     D2
                    3305   DisableBreakPoints_1:
00002062  0C82 0000 3306          cmp.l     #8,D2
00002066  0008      
00002068  6C00 003E 3307          bge       DisableBreakPoints_3
                    3308   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
0000206C  2002      3309          move.l    D2,D0
0000206E  E588      3310          lsl.l     #2,D0
00002070  41F9 0084 3311          lea       _BreakPointSetOrCleared,A0
00002074  0158      
00002076  2030 0800 3312          move.l    0(A0,D0.L),D0
0000207A  0C80 0000 3313          cmp.l     #1,D0
0000207E  0001      
00002080  6622      3314          bne.s     DisableBreakPoints_4
                    3315   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00002082  2002      3316          move.l    D2,D0
00002084  E588      3317          lsl.l     #2,D0
00002086  41F9 0084 3318          lea       _BreakPointAddress,A0
0000208A  0128      
0000208C  2D70 0800 3319          move.l    0(A0,D0.L),-4(A6)
00002090  FFFC      
                    3320   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00002092  2002      3321          move.l    D2,D0
00002094  E388      3322          lsl.l     #1,D0
00002096  41F9 0084 3323          lea       _BreakPointInstruction,A0
0000209A  0148      
0000209C  226E FFFC 3324          move.l    -4(A6),A1
000020A0  32B0 0800 3325          move.w    0(A0,D0.L),(A1)
                    3326   DisableBreakPoints_4:
000020A4  5282      3327          addq.l    #1,D2
000020A6  60BA      3328          bra       DisableBreakPoints_1
                    3329   DisableBreakPoints_3:
000020A8  4CDF 0004 3330          movem.l   (A7)+,D2
000020AC  4E5E      3331          unlk      A6
000020AE  4E75      3332          rts
                    3333   ; }
                    3334   ; }
                    3335   ; }
                    3336   ; void EnableBreakPoints(void)
                    3337   ; {
                    3338   _EnableBreakPoints:
000020B0  4E56 FFFC 3339          link      A6,#-4
000020B4  48E7 2000 3340          movem.l   D2,-(A7)
                    3341   ; int i ;
                    3342   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3343   ; for(i = 0; i < 8; i++)  {
000020B8  4282      3344          clr.l     D2
                    3345   EnableBreakPoints_1:
000020BA  0C82 0000 3346          cmp.l     #8,D2
000020BE  0008      
000020C0  6C32      3347          bge.s     EnableBreakPoints_3
                    3348   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
000020C2  2002      3349          move.l    D2,D0
000020C4  E588      3350          lsl.l     #2,D0
000020C6  41F9 0084 3351          lea       _BreakPointSetOrCleared,A0
000020CA  0158      
000020CC  2030 0800 3352          move.l    0(A0,D0.L),D0
000020D0  0C80 0000 3353          cmp.l     #1,D0
000020D4  0001      
000020D6  6618      3354          bne.s     EnableBreakPoints_4
                    3355   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
000020D8  2002      3356          move.l    D2,D0
000020DA  E588      3357          lsl.l     #2,D0
000020DC  41F9 0084 3358          lea       _BreakPointAddress,A0
000020E0  0128      
000020E2  2D70 0800 3359          move.l    0(A0,D0.L),-4(A6)
000020E6  FFFC      
                    3360   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
000020E8  206E FFFC 3361          move.l    -4(A6),A0
000020EC  30BC 4E4E 3362          move.w    #20046,(A0)
                    3363   EnableBreakPoints_4:
000020F0  5282      3364          addq.l    #1,D2
000020F2  60C6      3365          bra       EnableBreakPoints_1
                    3366   EnableBreakPoints_3:
000020F4  4CDF 0004 3367          movem.l   (A7)+,D2
000020F8  4E5E      3368          unlk      A6
000020FA  4E75      3369          rts
                    3370   ; }
                    3371   ; }
                    3372   ; }
                    3373   ; void KillAllBreakPoints(void)
                    3374   ; {
                    3375   _KillAllBreakPoints:
000020FC  4E56 FFFC 3376          link      A6,#-4
00002100  48E7 2000 3377          movem.l   D2,-(A7)
                    3378   ; int i ;
                    3379   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3380   ; for(i = 0; i < 8; i++)  {
00002104  4282      3381          clr.l     D2
                    3382   KillAllBreakPoints_1:
00002106  0C82 0000 3383          cmp.l     #8,D2
0000210A  0008      
0000210C  6C00 0052 3384          bge       KillAllBreakPoints_3
                    3385   ; // clear BP
                    3386   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00002110  2002      3387          move.l    D2,D0
00002112  E588      3388          lsl.l     #2,D0
00002114  41F9 0084 3389          lea       _BreakPointAddress,A0
00002118  0128      
0000211A  2D70 0800 3390          move.l    0(A0,D0.L),-4(A6)
0000211E  FFFC      
                    3391   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00002120  2002      3392          move.l    D2,D0
00002122  E388      3393          lsl.l     #1,D0
00002124  41F9 0084 3394          lea       _BreakPointInstruction,A0
00002128  0148      
0000212A  226E FFFC 3395          move.l    -4(A6),A1
0000212E  32B0 0800 3396          move.w    0(A0,D0.L),(A1)
                    3397   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00002132  2002      3398          move.l    D2,D0
00002134  E588      3399          lsl.l     #2,D0
00002136  41F9 0084 3400          lea       _BreakPointAddress,A0
0000213A  0128      
0000213C  42B0 0800 3401          clr.l     0(A0,D0.L)
                    3402   ; BreakPointInstruction[i] = 0 ;
00002140  2002      3403          move.l    D2,D0
00002142  E388      3404          lsl.l     #1,D0
00002144  41F9 0084 3405          lea       _BreakPointInstruction,A0
00002148  0148      
0000214A  4270 0800 3406          clr.w     0(A0,D0.L)
                    3407   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
0000214E  2002      3408          move.l    D2,D0
00002150  E588      3409          lsl.l     #2,D0
00002152  41F9 0084 3410          lea       _BreakPointSetOrCleared,A0
00002156  0158      
00002158  42B0 0800 3411          clr.l     0(A0,D0.L)
0000215C  5282      3412          addq.l    #1,D2
0000215E  60A6      3413          bra       KillAllBreakPoints_1
                    3414   KillAllBreakPoints_3:
00002160  4CDF 0004 3415          movem.l   (A7)+,D2
00002164  4E5E      3416          unlk      A6
00002166  4E75      3417          rts
                    3418   ; }
                    3419   ; //BreakPointDisplay() ;       // display the break points
                    3420   ; }
                    3421   ; void KillAllWatchPoints(void)
                    3422   ; {
                    3423   _KillAllWatchPoints:
00002168  48E7 2000 3424          movem.l   D2,-(A7)
                    3425   ; int i ;
                    3426   ; for(i = 0; i < 8; i++)  {
0000216C  4282      3427          clr.l     D2
                    3428   KillAllWatchPoints_1:
0000216E  0C82 0000 3429          cmp.l     #8,D2
00002172  0008      
00002174  6C20      3430          bge.s     KillAllWatchPoints_3
                    3431   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00002176  2002      3432          move.l    D2,D0
00002178  E588      3433          lsl.l     #2,D0
0000217A  41F9 0084 3434          lea       _WatchPointAddress,A0
0000217E  017C      
00002180  42B0 0800 3435          clr.l     0(A0,D0.L)
                    3436   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00002184  2002      3437          move.l    D2,D0
00002186  E588      3438          lsl.l     #2,D0
00002188  41F9 0084 3439          lea       _WatchPointSetOrCleared,A0
0000218C  019C      
0000218E  42B0 0800 3440          clr.l     0(A0,D0.L)
00002192  5282      3441          addq.l    #1,D2
00002194  60D8      3442          bra       KillAllWatchPoints_1
                    3443   KillAllWatchPoints_3:
00002196  4CDF 0004 3444          movem.l   (A7)+,D2
0000219A  4E75      3445          rts
                    3446   ; }
                    3447   ; //WatchPointDisplay() ;       // display the break points
                    3448   ; }
                    3449   ; void SetBreakPoint(void)
                    3450   ; {
                    3451   _SetBreakPoint:
0000219C  4E56 FFFC 3452          link      A6,#-4
000021A0  48E7 3830 3453          movem.l   D2/D3/D4/A2/A3,-(A7)
000021A4  45F9 0000 3454          lea       _printf,A2
000021A8  5776      
000021AA  47F9 0084 3455          lea       _BreakPointSetOrCleared,A3
000021AE  0158      
                    3456   ; int i ;
                    3457   ; int BPNumber;
                    3458   ; int BPAddress;
                    3459   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3460   ; // see if any free break points
                    3461   ; for(i = 0; i < 8; i ++) {
000021B0  4282      3462          clr.l     D2
                    3463   SetBreakPoint_1:
000021B2  0C82 0000 3464          cmp.l     #8,D2
000021B6  0008      
000021B8  6C10      3465          bge.s     SetBreakPoint_3
                    3466   ; if( BreakPointSetOrCleared[i] == 0)
000021BA  2002      3467          move.l    D2,D0
000021BC  E588      3468          lsl.l     #2,D0
000021BE  2033 0800 3469          move.l    0(A3,D0.L),D0
000021C2  6602      3470          bne.s     SetBreakPoint_4
                    3471   ; break ;         // if spare BP found allow user to set it
000021C4  6004      3472          bra.s     SetBreakPoint_3
                    3473   SetBreakPoint_4:
000021C6  5282      3474          addq.l    #1,D2
000021C8  60E8      3475          bra       SetBreakPoint_1
                    3476   SetBreakPoint_3:
                    3477   ; }
                    3478   ; if(i == 8) {
000021CA  0C82 0000 3479          cmp.l     #8,D2
000021CE  0008      
000021D0  660E      3480          bne.s     SetBreakPoint_6
                    3481   ; printf("\r\nNo FREE Break Points.....") ;
000021D2  4879 0000 3482          pea       @m68kde~1_100
000021D6  6ABA      
000021D8  4E92      3483          jsr       (A2)
000021DA  584F      3484          addq.w    #4,A7
                    3485   ; return ;
000021DC  6000 00EA 3486          bra       SetBreakPoint_15
                    3487   SetBreakPoint_6:
                    3488   ; }
                    3489   ; printf("\r\nBreak Point Address: ") ;
000021E0  4879 0000 3490          pea       @m68kde~1_101
000021E4  6AD6      
000021E6  4E92      3491          jsr       (A2)
000021E8  584F      3492          addq.w    #4,A7
                    3493   ; BPAddress = Get8HexDigits(0) ;
000021EA  42A7      3494          clr.l     -(A7)
000021EC  6100 EB00 3495          bsr       _Get8HexDigits
000021F0  584F      3496          addq.w    #4,A7
000021F2  2600      3497          move.l    D0,D3
                    3498   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
000021F4  2803      3499          move.l    D3,D4
                    3500   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
000021F6  2003      3501          move.l    D3,D0
000021F8  C0BC 0000 3502          and.l     #1,D0
000021FC  0001      
000021FE  0C80 0000 3503          cmp.l     #1,D0
00002202  0001      
00002204  660E      3504          bne.s     SetBreakPoint_9
                    3505   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00002206  4879 0000 3506          pea       @m68kde~1_102
0000220A  6AEE      
0000220C  4E92      3507          jsr       (A2)
0000220E  584F      3508          addq.w    #4,A7
                    3509   ; return ;
00002210  6000 00B6 3510          bra       SetBreakPoint_15
                    3511   SetBreakPoint_9:
                    3512   ; }
                    3513   ; if(BPAddress < 0x00008000)  {   // cannot set BP at an odd address
00002214  0C83 0000 3514          cmp.l     #32768,D3
00002218  8000      
0000221A  640E      3515          bhs.s     SetBreakPoint_11
                    3516   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
0000221C  4879 0000 3517          pea       @m68kde~1_103
00002220  6B24      
00002222  4E92      3518          jsr       (A2)
00002224  584F      3519          addq.w    #4,A7
                    3520   ; return ;
00002226  6000 00A0 3521          bra       SetBreakPoint_15
                    3522   SetBreakPoint_11:
                    3523   ; }
                    3524   ; // search for first free bp or existing same BP
                    3525   ; for(i = 0; i < 8; i++)  {
0000222A  4282      3526          clr.l     D2
                    3527   SetBreakPoint_13:
0000222C  0C82 0000 3528          cmp.l     #8,D2
00002230  0008      
00002232  6C00 0094 3529          bge       SetBreakPoint_15
                    3530   ; if(BreakPointAddress[i] == BPAddress)   {
00002236  2002      3531          move.l    D2,D0
00002238  E588      3532          lsl.l     #2,D0
0000223A  41F9 0084 3533          lea       _BreakPointAddress,A0
0000223E  0128      
00002240  B6B0 0800 3534          cmp.l     0(A0,D0.L),D3
00002244  6610      3535          bne.s     SetBreakPoint_16
                    3536   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00002246  2F03      3537          move.l    D3,-(A7)
00002248  4879 0000 3538          pea       @m68kde~1_104
0000224C  6B6C      
0000224E  4E92      3539          jsr       (A2)
00002250  504F      3540          addq.w    #8,A7
                    3541   ; return ;
00002252  6000 0074 3542          bra       SetBreakPoint_15
                    3543   SetBreakPoint_16:
                    3544   ; }
                    3545   ; if(BreakPointSetOrCleared[i] == 0) {
00002256  2002      3546          move.l    D2,D0
00002258  E588      3547          lsl.l     #2,D0
0000225A  2033 0800 3548          move.l    0(A3,D0.L),D0
0000225E  6600 0062 3549          bne       SetBreakPoint_18
                    3550   ; // set BP here
                    3551   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00002262  2002      3552          move.l    D2,D0
00002264  E588      3553          lsl.l     #2,D0
00002266  27BC 0000 3554          move.l    #1,0(A3,D0.L)
0000226A  0001 0800 
                    3555   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
0000226E  2044      3556          move.l    D4,A0
00002270  2002      3557          move.l    D2,D0
00002272  E388      3558          lsl.l     #1,D0
00002274  43F9 0084 3559          lea       _BreakPointInstruction,A1
00002278  0148      
0000227A  3390 0800 3560          move.w    (A0),0(A1,D0.L)
                    3561   ; DisassembleInstruction(ProgramBreakPointAddress) ;
0000227E  2F04      3562          move.l    D4,-(A7)
00002280  6100 147E 3563          bsr       _DisassembleInstruction
00002284  584F      3564          addq.w    #4,A7
                    3565   ; FormatInstructionForTrace() ;
00002286  6100 F266 3566          bsr       _FormatInstructionForTrace
                    3567   ; printf("\r\nBreak Point Set at Address: [$%08x], Instruction = %s", ProgramBreakPointAddress, Instruction) ;
0000228A  4879 0084 3568          pea       _Instruction
0000228E  04DC      
00002290  2F04      3569          move.l    D4,-(A7)
00002292  4879 0000 3570          pea       @m68kde~1_105
00002296  6BA4      
00002298  4E92      3571          jsr       (A2)
0000229A  DEFC 000C 3572          add.w     #12,A7
                    3573   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
0000229E  2044      3574          move.l    D4,A0
000022A0  30BC 4E4E 3575          move.w    #20046,(A0)
                    3576   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
000022A4  2002      3577          move.l    D2,D0
000022A6  E588      3578          lsl.l     #2,D0
000022A8  41F9 0084 3579          lea       _BreakPointAddress,A0
000022AC  0128      
000022AE  2183 0800 3580          move.l    D3,0(A0,D0.L)
                    3581   ; printf("\r\n") ;
000022B2  4879 0000 3582          pea       @m68kde~1_106
000022B6  6BDC      
000022B8  4E92      3583          jsr       (A2)
000022BA  584F      3584          addq.w    #4,A7
                    3585   ; BreakPointDisplay() ;       // display the break points
000022BC  6100 FA7A 3586          bsr       _BreakPointDisplay
                    3587   ; return ;
000022C0  6006      3588          bra.s     SetBreakPoint_15
                    3589   SetBreakPoint_18:
000022C2  5282      3590          addq.l    #1,D2
000022C4  6000 FF66 3591          bra       SetBreakPoint_13
                    3592   SetBreakPoint_15:
000022C8  4CDF 0C1C 3593          movem.l   (A7)+,D2/D3/D4/A2/A3
000022CC  4E5E      3594          unlk      A6
000022CE  4E75      3595          rts
                    3596   ; }
                    3597   ; }
                    3598   ; }
                    3599   ; void SetWatchPoint(void)
                    3600   ; {
                    3601   _SetWatchPoint:
000022D0  4E56 FFF8 3602          link      A6,#-8
000022D4  48E7 3030 3603          movem.l   D2/D3/A2/A3,-(A7)
000022D8  45F9 0000 3604          lea       _printf,A2
000022DC  5776      
000022DE  47F9 0084 3605          lea       _WatchPointSetOrCleared,A3
000022E2  019C      
                    3606   ; int i ;
                    3607   ; int WPNumber;
                    3608   ; int WPAddress;
                    3609   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3610   ; // see if any free break points
                    3611   ; for(i = 0; i < 8; i ++) {
000022E4  4282      3612          clr.l     D2
                    3613   SetWatchPoint_1:
000022E6  0C82 0000 3614          cmp.l     #8,D2
000022EA  0008      
000022EC  6C10      3615          bge.s     SetWatchPoint_3
                    3616   ; if( WatchPointSetOrCleared[i] == 0)
000022EE  2002      3617          move.l    D2,D0
000022F0  E588      3618          lsl.l     #2,D0
000022F2  2033 0800 3619          move.l    0(A3,D0.L),D0
000022F6  6602      3620          bne.s     SetWatchPoint_4
                    3621   ; break ;         // if spare WP found allow user to set it
000022F8  6004      3622          bra.s     SetWatchPoint_3
                    3623   SetWatchPoint_4:
000022FA  5282      3624          addq.l    #1,D2
000022FC  60E8      3625          bra       SetWatchPoint_1
                    3626   SetWatchPoint_3:
                    3627   ; }
                    3628   ; if(i == 8) {
000022FE  0C82 0000 3629          cmp.l     #8,D2
00002302  0008      
00002304  660E      3630          bne.s     SetWatchPoint_6
                    3631   ; printf("\r\nNo FREE Watch Points.....") ;
00002306  4879 0000 3632          pea       @m68kde~1_107
0000230A  6BE0      
0000230C  4E92      3633          jsr       (A2)
0000230E  584F      3634          addq.w    #4,A7
                    3635   ; return ;
00002310  6000 008C 3636          bra       SetWatchPoint_11
                    3637   SetWatchPoint_6:
                    3638   ; }
                    3639   ; printf("\r\nWatch Point Address: ") ;
00002314  4879 0000 3640          pea       @m68kde~1_108
00002318  6BFC      
0000231A  4E92      3641          jsr       (A2)
0000231C  584F      3642          addq.w    #4,A7
                    3643   ; WPAddress = Get8HexDigits(0) ;
0000231E  42A7      3644          clr.l     -(A7)
00002320  6100 E9CC 3645          bsr       _Get8HexDigits
00002324  584F      3646          addq.w    #4,A7
00002326  2600      3647          move.l    D0,D3
                    3648   ; // search for first free wp or existing same wp
                    3649   ; for(i = 0; i < 8; i++)  {
00002328  4282      3650          clr.l     D2
                    3651   SetWatchPoint_9:
0000232A  0C82 0000 3652          cmp.l     #8,D2
0000232E  0008      
00002330  6C00 006C 3653          bge       SetWatchPoint_11
                    3654   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00002334  2002      3655          move.l    D2,D0
00002336  E588      3656          lsl.l     #2,D0
00002338  41F9 0084 3657          lea       _WatchPointAddress,A0
0000233C  017C      
0000233E  B6B0 0800 3658          cmp.l     0(A0,D0.L),D3
00002342  6614      3659          bne.s     SetWatchPoint_12
00002344  4A83      3660          tst.l     D3
00002346  6710      3661          beq.s     SetWatchPoint_12
                    3662   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00002348  2F03      3663          move.l    D3,-(A7)
0000234A  4879 0000 3664          pea       @m68kde~1_109
0000234E  6C14      
00002350  4E92      3665          jsr       (A2)
00002352  504F      3666          addq.w    #8,A7
                    3667   ; return ;
00002354  6000 0048 3668          bra       SetWatchPoint_11
                    3669   SetWatchPoint_12:
                    3670   ; }
                    3671   ; if(WatchPointSetOrCleared[i] == 0) {
00002358  2002      3672          move.l    D2,D0
0000235A  E588      3673          lsl.l     #2,D0
0000235C  2033 0800 3674          move.l    0(A3,D0.L),D0
00002360  6600 0038 3675          bne       SetWatchPoint_14
                    3676   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00002364  2002      3677          move.l    D2,D0
00002366  E588      3678          lsl.l     #2,D0
00002368  27BC 0000 3679          move.l    #1,0(A3,D0.L)
0000236C  0001 0800 
                    3680   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
00002370  2F03      3681          move.l    D3,-(A7)
00002372  4879 0000 3682          pea       @m68kde~1_110
00002376  6C4A      
00002378  4E92      3683          jsr       (A2)
0000237A  504F      3684          addq.w    #8,A7
                    3685   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
0000237C  2002      3686          move.l    D2,D0
0000237E  E588      3687          lsl.l     #2,D0
00002380  41F9 0084 3688          lea       _WatchPointAddress,A0
00002384  017C      
00002386  2183 0800 3689          move.l    D3,0(A0,D0.L)
                    3690   ; printf("\r\n") ;
0000238A  4879 0000 3691          pea       @m68kde~1_111
0000238E  6C70      
00002390  4E92      3692          jsr       (A2)
00002392  584F      3693          addq.w    #4,A7
                    3694   ; WatchPointDisplay() ;       // display the break points
00002394  6100 FA9A 3695          bsr       _WatchPointDisplay
                    3696   ; return ;
00002398  6004      3697          bra.s     SetWatchPoint_11
                    3698   SetWatchPoint_14:
0000239A  5282      3699          addq.l    #1,D2
0000239C  608C      3700          bra       SetWatchPoint_9
                    3701   SetWatchPoint_11:
0000239E  4CDF 0C0C 3702          movem.l   (A7)+,D2/D3/A2/A3
000023A2  4E5E      3703          unlk      A6
000023A4  4E75      3704          rts
                    3705   ; }
                    3706   ; }
                    3707   ; }
                    3708   ; void HandleBreakPoint(void)
                    3709   ; {
                    3710   _HandleBreakPoint:
000023A6  4E56 FFFC 3711          link      A6,#-4
000023AA  48E7 0038 3712          movem.l   A2/A3/A4,-(A7)
000023AE  45F9 0084 3713          lea       _i,A2
000023B2  00C2      
000023B4  47F9 0000 3714          lea       _printf,A3
000023B8  5776      
000023BA  49F9 0084 3715          lea       _PC,A4
000023BE  011A      
                    3716   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3717   ; // now we have to put the break point back to run the instruction
                    3718   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3719   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
000023C0  5594      3720          subq.l    #2,(A4)
                    3721   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
000023C2  4879 0000 3722          pea       @m68kde~1_112
000023C6  6C74      
000023C8  4E93      3723          jsr       (A3)
000023CA  584F      3724          addq.w    #4,A7
                    3725   ; printf("\r\nSingle Step : [ON]") ;
000023CC  4879 0000 3726          pea       @m68kde~1_113
000023D0  6C88      
000023D2  4E93      3727          jsr       (A3)
000023D4  584F      3728          addq.w    #4,A7
                    3729   ; printf("\r\nBreakPoints : [Enabled]") ;
000023D6  4879 0000 3730          pea       @m68kde~1_114
000023DA  6C9E      
000023DC  4E93      3731          jsr       (A3)
000023DE  584F      3732          addq.w    #4,A7
                    3733   ; // now clear the break point (put original instruction back)
                    3734   ; ProgramBreakPointAddress = PC ;
000023E0  2D54 FFFC 3735          move.l    (A4),-4(A6)
                    3736   ; for(i = 0; i < 8; i ++) {
000023E4  4292      3737          clr.l     (A2)
                    3738   HandleBreakPoint_1:
000023E6  2012      3739          move.l    (A2),D0
000023E8  0C80 0000 3740          cmp.l     #8,D0
000023EC  0008      
000023EE  6400 0056 3741          bhs       HandleBreakPoint_3
                    3742   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
000023F2  2012      3743          move.l    (A2),D0
000023F4  E588      3744          lsl.l     #2,D0
000023F6  41F9 0084 3745          lea       _BreakPointAddress,A0
000023FA  0128      
000023FC  2230 0800 3746          move.l    0(A0,D0.L),D1
00002400  B294      3747          cmp.l     (A4),D1
00002402  6600 003E 3748          bne       HandleBreakPoint_4
                    3749   ; BreakPointAddress[i] = 0 ;
00002406  2012      3750          move.l    (A2),D0
00002408  E588      3751          lsl.l     #2,D0
0000240A  41F9 0084 3752          lea       _BreakPointAddress,A0
0000240E  0128      
00002410  42B0 0800 3753          clr.l     0(A0,D0.L)
                    3754   ; BreakPointSetOrCleared[i] = 0 ;
00002414  2012      3755          move.l    (A2),D0
00002416  E588      3756          lsl.l     #2,D0
00002418  41F9 0084 3757          lea       _BreakPointSetOrCleared,A0
0000241C  0158      
0000241E  42B0 0800 3758          clr.l     0(A0,D0.L)
                    3759   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00002422  2012      3760          move.l    (A2),D0
00002424  E388      3761          lsl.l     #1,D0
00002426  41F9 0084 3762          lea       _BreakPointInstruction,A0
0000242A  0148      
0000242C  226E FFFC 3763          move.l    -4(A6),A1
00002430  32B0 0800 3764          move.w    0(A0,D0.L),(A1)
                    3765   ; BreakPointInstruction[i] = 0 ;
00002434  2012      3766          move.l    (A2),D0
00002436  E388      3767          lsl.l     #1,D0
00002438  41F9 0084 3768          lea       _BreakPointInstruction,A0
0000243C  0148      
0000243E  4270 0800 3769          clr.w     0(A0,D0.L)
                    3770   HandleBreakPoint_4:
00002442  5292      3771          addq.l    #1,(A2)
00002444  60A0      3772          bra       HandleBreakPoint_1
                    3773   HandleBreakPoint_3:
                    3774   ; }
                    3775   ; }
                    3776   ; DumpRegisters() ;
00002446  6100 F130 3777          bsr       _DumpRegisters
                    3778   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
0000244A  4879 0000 3779          pea       @m68kde~1_115
0000244E  6CB8      
00002450  4E93      3780          jsr       (A3)
00002452  584F      3781          addq.w    #4,A7
                    3782   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00002454  4879 0000 3783          pea       @m68kde~1_116
00002458  6CE4      
0000245A  4E93      3784          jsr       (A3)
0000245C  584F      3785          addq.w    #4,A7
                    3786   ; menu() ;
0000245E  6100 0248 3787          bsr       _menu
00002462  4CDF 1C00 3788          movem.l   (A7)+,A2/A3/A4
00002466  4E5E      3789          unlk      A6
00002468  4E75      3790          rts
                    3791   ; }
                    3792   ; void UnknownCommand()
                    3793   ; {
                    3794   _UnknownCommand:
                    3795   ; printf("\r\nUnknown Command.....\r\n") ;
0000246A  4879 0000 3796          pea       @m68kde~1_117
0000246E  6D0C      
00002470  6100 3304 3797          bsr       _printf
00002474  584F      3798          addq.w    #4,A7
                    3799   ; Help() ;
00002476  6100 014C 3800          bsr       _Help
0000247A  4E75      3801          rts
                    3802   ; }
                    3803   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3804   ; void CallDebugMonitor(void)
                    3805   ; {
                    3806   _CallDebugMonitor:
                    3807   ; printf("\r\nProgram Ended (TRAP #15)....") ;
0000247C  4879 0000 3808          pea       @m68kde~1_118
00002480  6D26      
00002482  6100 32F2 3809          bsr       _printf
00002486  584F      3810          addq.w    #4,A7
                    3811   ; menu();
00002488  6100 021E 3812          bsr       _menu
0000248C  4E75      3813          rts
                    3814   ; }
                    3815   ; void Breakpoint(void)
                    3816   ; {
                    3817   _Breakpoint:
0000248E  48E7 2000 3818          movem.l   D2,-(A7)
                    3819   ; char c;
                    3820   ; c = toupper(_getch());
00002492  2F00      3821          move.l    D0,-(A7)
00002494  6100 E726 3822          bsr       __getch
00002498  2200      3823          move.l    D0,D1
0000249A  201F      3824          move.l    (A7)+,D0
0000249C  2F01      3825          move.l    D1,-(A7)
0000249E  6100 32AA 3826          bsr       _toupper
000024A2  584F      3827          addq.w    #4,A7
000024A4  1400      3828          move.b    D0,D2
                    3829   ; if( c == (char)('D'))                                      // BreakPoint Display
000024A6  0C02 0044 3830          cmp.b     #68,D2
000024AA  6608      3831          bne.s     Breakpoint_1
                    3832   ; BreakPointDisplay() ;
000024AC  6100 F88A 3833          bsr       _BreakPointDisplay
000024B0  6000 0050 3834          bra       Breakpoint_10
                    3835   Breakpoint_1:
                    3836   ; else if(c == (char)('K')) {                                 // breakpoint Kill
000024B4  0C02 004B 3837          cmp.b     #75,D2
000024B8  662C      3838          bne.s     Breakpoint_3
                    3839   ; printf("\r\nKill All Break Points...(y/n)?") ;
000024BA  4879 0000 3840          pea       @m68kde~1_119
000024BE  6D46      
000024C0  6100 32B4 3841          bsr       _printf
000024C4  584F      3842          addq.w    #4,A7
                    3843   ; c = toupper(_getch());
000024C6  2F00      3844          move.l    D0,-(A7)
000024C8  6100 E6F2 3845          bsr       __getch
000024CC  2200      3846          move.l    D0,D1
000024CE  201F      3847          move.l    (A7)+,D0
000024D0  2F01      3848          move.l    D1,-(A7)
000024D2  6100 3276 3849          bsr       _toupper
000024D6  584F      3850          addq.w    #4,A7
000024D8  1400      3851          move.b    D0,D2
                    3852   ; if(c == (char)('Y'))
000024DA  0C02 0059 3853          cmp.b     #89,D2
000024DE  6604      3854          bne.s     Breakpoint_5
                    3855   ; KillAllBreakPoints() ;
000024E0  6100 FC1A 3856          bsr       _KillAllBreakPoints
                    3857   Breakpoint_5:
000024E4  601C      3858          bra.s     Breakpoint_10
                    3859   Breakpoint_3:
                    3860   ; }
                    3861   ; else if(c == (char)('S')) {
000024E6  0C02 0053 3862          cmp.b     #83,D2
000024EA  6606      3863          bne.s     Breakpoint_7
                    3864   ; SetBreakPoint() ;
000024EC  6100 FCAE 3865          bsr       _SetBreakPoint
000024F0  6010      3866          bra.s     Breakpoint_10
                    3867   Breakpoint_7:
                    3868   ; }
                    3869   ; else if(c == (char)('C')) {
000024F2  0C02 0043 3870          cmp.b     #67,D2
000024F6  6606      3871          bne.s     Breakpoint_9
                    3872   ; BreakPointClear() ;
000024F8  6100 F9E2 3873          bsr       _BreakPointClear
000024FC  6004      3874          bra.s     Breakpoint_10
                    3875   Breakpoint_9:
                    3876   ; }
                    3877   ; else
                    3878   ; UnknownCommand() ;
000024FE  6100 FF6A 3879          bsr       _UnknownCommand
                    3880   Breakpoint_10:
00002502  4CDF 0004 3881          movem.l   (A7)+,D2
00002506  4E75      3882          rts
                    3883   ; }
                    3884   ; void Watchpoint(void)
                    3885   ; {
                    3886   _Watchpoint:
00002508  48E7 2000 3887          movem.l   D2,-(A7)
                    3888   ; char c;
                    3889   ; c = toupper(_getch());
0000250C  2F00      3890          move.l    D0,-(A7)
0000250E  6100 E6AC 3891          bsr       __getch
00002512  2200      3892          move.l    D0,D1
00002514  201F      3893          move.l    (A7)+,D0
00002516  2F01      3894          move.l    D1,-(A7)
00002518  6100 3230 3895          bsr       _toupper
0000251C  584F      3896          addq.w    #4,A7
0000251E  1400      3897          move.b    D0,D2
                    3898   ; if( c == (char)('D'))                                      // WatchPoint Display
00002520  0C02 0044 3899          cmp.b     #68,D2
00002524  6608      3900          bne.s     Watchpoint_1
                    3901   ; WatchPointDisplay() ;
00002526  6100 F908 3902          bsr       _WatchPointDisplay
0000252A  6000 0050 3903          bra       Watchpoint_10
                    3904   Watchpoint_1:
                    3905   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
0000252E  0C02 004B 3906          cmp.b     #75,D2
00002532  662C      3907          bne.s     Watchpoint_3
                    3908   ; printf("\r\nKill All Watch Points...(y/n)?") ;
00002534  4879 0000 3909          pea       @m68kde~1_120
00002538  6D68      
0000253A  6100 323A 3910          bsr       _printf
0000253E  584F      3911          addq.w    #4,A7
                    3912   ; c = toupper(_getch());
00002540  2F00      3913          move.l    D0,-(A7)
00002542  6100 E678 3914          bsr       __getch
00002546  2200      3915          move.l    D0,D1
00002548  201F      3916          move.l    (A7)+,D0
0000254A  2F01      3917          move.l    D1,-(A7)
0000254C  6100 31FC 3918          bsr       _toupper
00002550  584F      3919          addq.w    #4,A7
00002552  1400      3920          move.b    D0,D2
                    3921   ; if(c == (char)('Y'))
00002554  0C02 0059 3922          cmp.b     #89,D2
00002558  6604      3923          bne.s     Watchpoint_5
                    3924   ; KillAllWatchPoints() ;
0000255A  6100 FC0C 3925          bsr       _KillAllWatchPoints
                    3926   Watchpoint_5:
0000255E  601C      3927          bra.s     Watchpoint_10
                    3928   Watchpoint_3:
                    3929   ; }
                    3930   ; else if(c == (char)('S')) {
00002560  0C02 0053 3931          cmp.b     #83,D2
00002564  6606      3932          bne.s     Watchpoint_7
                    3933   ; SetWatchPoint() ;
00002566  6100 FD68 3934          bsr       _SetWatchPoint
0000256A  6010      3935          bra.s     Watchpoint_10
                    3936   Watchpoint_7:
                    3937   ; }
                    3938   ; else if(c == (char)('C')) {
0000256C  0C02 0043 3939          cmp.b     #67,D2
00002570  6606      3940          bne.s     Watchpoint_9
                    3941   ; WatchPointClear() ;
00002572  6100 FA42 3942          bsr       _WatchPointClear
00002576  6004      3943          bra.s     Watchpoint_10
                    3944   Watchpoint_9:
                    3945   ; }
                    3946   ; else
                    3947   ; UnknownCommand() ;
00002578  6100 FEF0 3948          bsr       _UnknownCommand
                    3949   Watchpoint_10:
0000257C  4CDF 0004 3950          movem.l   (A7)+,D2
00002580  4E75      3951          rts
                    3952   ; }
                    3953   ; void DMenu(void)
                    3954   ; {
                    3955   _DMenu:
00002582  48E7 2000 3956          movem.l   D2,-(A7)
                    3957   ; char c;
                    3958   ; c = toupper(_getch());
00002586  2F00      3959          move.l    D0,-(A7)
00002588  6100 E632 3960          bsr       __getch
0000258C  2200      3961          move.l    D0,D1
0000258E  201F      3962          move.l    (A7)+,D0
00002590  2F01      3963          move.l    D1,-(A7)
00002592  6100 31B6 3964          bsr       _toupper
00002596  584F      3965          addq.w    #4,A7
00002598  1400      3966          move.b    D0,D2
                    3967   ; if( c == (char)('U'))                                     // Dump Memory
0000259A  0C02 0055 3968          cmp.b     #85,D2
0000259E  6606      3969          bne.s     DMenu_1
                    3970   ; DumpMemory() ;
000025A0  6100 E982 3971          bsr       _DumpMemory
000025A4  6018      3972          bra.s     DMenu_4
                    3973   DMenu_1:
                    3974   ; else if(c == (char)('I'))   {
000025A6  0C02 0049 3975          cmp.b     #73,D2
000025AA  660E      3976          bne.s     DMenu_3
                    3977   ; DisableBreakPoints() ;
000025AC  6100 FAAA 3978          bsr       _DisableBreakPoints
                    3979   ; DisassembleProgram() ;
000025B0  6100 E790 3980          bsr       _DisassembleProgram
                    3981   ; EnableBreakPoints() ;
000025B4  6100 FAFA 3982          bsr       _EnableBreakPoints
000025B8  6004      3983          bra.s     DMenu_4
                    3984   DMenu_3:
                    3985   ; }
                    3986   ; else
                    3987   ; UnknownCommand() ;
000025BA  6100 FEAE 3988          bsr       _UnknownCommand
                    3989   DMenu_4:
000025BE  4CDF 0004 3990          movem.l   (A7)+,D2
000025C2  4E75      3991          rts
                    3992   ; }
                    3993   ; void Help(void)
                    3994   ; {
                    3995   _Help:
000025C4  48E7 2020 3996          movem.l   D2/A2,-(A7)
000025C8  45F9 0000 3997          lea       _printf,A2
000025CC  5776      
                    3998   ; char *banner = "\r\n----------------------------------------------------------------" ;
000025CE  41F9 0000 3999          lea       @m68kde~1_121,A0
000025D2  6D8A      
000025D4  2408      4000          move.l    A0,D2
                    4001   ; printf(banner) ;
000025D6  2F02      4002          move.l    D2,-(A7)
000025D8  4E92      4003          jsr       (A2)
000025DA  584F      4004          addq.w    #4,A7
                    4005   ; printf("\r\n  Debugger Command Summary") ;
000025DC  4879 0000 4006          pea       @m68kde~1_122
000025E0  6DCE      
000025E2  4E92      4007          jsr       (A2)
000025E4  584F      4008          addq.w    #4,A7
                    4009   ; printf(banner) ;
000025E6  2F02      4010          move.l    D2,-(A7)
000025E8  4E92      4011          jsr       (A2)
000025EA  584F      4012          addq.w    #4,A7
                    4013   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000025EC  4879 0000 4014          pea       @m68kde~1_123
000025F0  6DEC      
000025F2  4E92      4015          jsr       (A2)
000025F4  584F      4016          addq.w    #4,A7
                    4017   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
000025F6  4879 0000 4018          pea       @m68kde~1_124
000025FA  6E30      
000025FC  4E92      4019          jsr       (A2)
000025FE  584F      4020          addq.w    #4,A7
                    4021   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
00002600  4879 0000 4022          pea       @m68kde~1_125
00002604  6E68      
00002606  4E92      4023          jsr       (A2)
00002608  584F      4024          addq.w    #4,A7
                    4025   ; printf("\r\n  DI           - Disassemble Program");
0000260A  4879 0000 4026          pea       @m68kde~1_126
0000260E  6EA2      
00002610  4E92      4027          jsr       (A2)
00002612  584F      4028          addq.w    #4,A7
                    4029   ; printf("\r\n  DU           - Dump Memory Contents to Screen") ;
00002614  4879 0000 4030          pea       @m68kde~1_127
00002618  6ECA      
0000261A  4E92      4031          jsr       (A2)
0000261C  584F      4032          addq.w    #4,A7
                    4033   ; printf("\r\n  E            - Enter String into Memory") ;
0000261E  4879 0000 4034          pea       @m68kde~1_128
00002622  6EFC      
00002624  4E92      4035          jsr       (A2)
00002626  584F      4036          addq.w    #4,A7
                    4037   ; printf("\r\n  F            - Fill Memory with Data") ;
00002628  4879 0000 4038          pea       @m68kde~1_129
0000262C  6F28      
0000262E  4E92      4039          jsr       (A2)
00002630  584F      4040          addq.w    #4,A7
                    4041   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
00002632  2F39 0084 4042          move.l    _PC,-(A7)
00002636  011A      
00002638  4879 0000 4043          pea       @m68kde~1_130
0000263C  6F52      
0000263E  4E92      4044          jsr       (A2)
00002640  504F      4045          addq.w    #8,A7
                    4046   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
00002642  4879 0000 4047          pea       @m68kde~1_131
00002646  6F8C      
00002648  4E92      4048          jsr       (A2)
0000264A  584F      4049          addq.w    #4,A7
                    4050   ; printf("\r\n  M            - Memory Examine and Change");
0000264C  4879 0000 4051          pea       @m68kde~1_132
00002650  6FC4      
00002652  4E92      4052          jsr       (A2)
00002654  584F      4053          addq.w    #4,A7
                    4054   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
00002656  4879 0000 4055          pea       @m68kde~1_133
0000265A  6FF2      
0000265C  4E92      4056          jsr       (A2)
0000265E  584F      4057          addq.w    #4,A7
                    4058   ; printf("\r\n  R            - Display 68000 Registers") ;
00002660  4879 0000 4059          pea       @m68kde~1_134
00002664  702C      
00002666  4E92      4060          jsr       (A2)
00002668  584F      4061          addq.w    #4,A7
                    4062   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
0000266A  4879 0000 4063          pea       @m68kde~1_135
0000266E  7058      
00002670  4E92      4064          jsr       (A2)
00002672  584F      4065          addq.w    #4,A7
                    4066   ; printf("\r\n  TM           - Test Memory") ;
00002674  4879 0000 4067          pea       @m68kde~1_136
00002678  708A      
0000267A  4E92      4068          jsr       (A2)
0000267C  584F      4069          addq.w    #4,A7
                    4070   ; printf("\r\n  TS           - Test DE2 Switches: SW0-SW15") ;
0000267E  4879 0000 4071          pea       @m68kde~1_137
00002682  70AA      
00002684  4E92      4072          jsr       (A2)
00002686  584F      4073          addq.w    #4,A7
                    4074   ; printf("\r\n  TD           - Test DE2 Displays: LEDs and 7-Segment") ;
00002688  4879 0000 4075          pea       @m68kde~1_138
0000268C  70DA      
0000268E  4E92      4076          jsr       (A2)
00002690  584F      4077          addq.w    #4,A7
                    4078   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
00002692  4879 0000 4079          pea       @m68kde~1_139
00002696  7114      
00002698  4E92      4080          jsr       (A2)
0000269A  584F      4081          addq.w    #4,A7
                    4082   ; printf(banner) ;
0000269C  2F02      4083          move.l    D2,-(A7)
0000269E  4E92      4084          jsr       (A2)
000026A0  584F      4085          addq.w    #4,A7
000026A2  4CDF 0404 4086          movem.l   (A7)+,D2/A2
000026A6  4E75      4087          rts
                    4088   ; }
                    4089   ; void menu(void)
                    4090   ; {
                    4091   _menu:
000026A8  48E7 303C 4092          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000026AC  45F9 0000 4093          lea       _printf,A2
000026B0  5776      
000026B2  47F9 0084 4094          lea       _Trace,A3
000026B6  00D6      
000026B8  49F9 0084 4095          lea       _x,A4
000026BC  00C6      
000026BE  4BF9 0084 4096          lea       _SR,A5
000026C2  0126      
                    4097   ; char c,c1 ;
                    4098   ; while(1)    {
                    4099   menu_1:
                    4100   ; FlushKeyboard() ;               // dump unread characters from keyboard
000026C4  6100 E530 4101          bsr       _FlushKeyboard
                    4102   ; printf("\r\n#") ;
000026C8  4879 0000 4103          pea       @m68kde~1_140
000026CC  714C      
000026CE  4E92      4104          jsr       (A2)
000026D0  584F      4105          addq.w    #4,A7
                    4106   ; c = toupper(_getch());
000026D2  2F00      4107          move.l    D0,-(A7)
000026D4  6100 E4E6 4108          bsr       __getch
000026D8  2200      4109          move.l    D0,D1
000026DA  201F      4110          move.l    (A7)+,D0
000026DC  2F01      4111          move.l    D1,-(A7)
000026DE  6100 306A 4112          bsr       _toupper
000026E2  584F      4113          addq.w    #4,A7
000026E4  1400      4114          move.b    D0,D2
                    4115   ; if( c == (char)('L'))                  // load s record file
000026E6  0C02 004C 4116          cmp.b     #76,D2
000026EA  6608      4117          bne.s     menu_4
                    4118   ; Load_SRecordFile() ;
000026EC  6100 E9AE 4119          bsr       _Load_SRecordFile
000026F0  6000 0218 4120          bra       menu_46
                    4121   menu_4:
                    4122   ; else if( c == (char)('D'))             // dump memory
000026F4  0C02 0044 4123          cmp.b     #68,D2
000026F8  6608      4124          bne.s     menu_6
                    4125   ; DMenu() ;
000026FA  6100 FE86 4126          bsr       _DMenu
000026FE  6000 020A 4127          bra       menu_46
                    4128   menu_6:
                    4129   ; else if( c == (char)('E'))             // Enter String into memory
00002702  0C02 0045 4130          cmp.b     #69,D2
00002706  6608      4131          bne.s     menu_8
                    4132   ; EnterString() ;
00002708  6100 0334 4133          bsr       _EnterString
0000270C  6000 01FC 4134          bra       menu_46
                    4135   menu_8:
                    4136   ; else if( c == (char)('F'))             // fill memory
00002710  0C02 0046 4137          cmp.b     #70,D2
00002714  6608      4138          bne.s     menu_10
                    4139   ; FillMemory() ;
00002716  6100 E90A 4140          bsr       _FillMemory
0000271A  6000 01EE 4141          bra       menu_46
                    4142   menu_10:
                    4143   ; else if( c == (char)('G'))  {           // go user program
0000271E  0C02 0047 4144          cmp.b     #71,D2
00002722  6626      4145          bne.s     menu_12
                    4146   ; printf("\r\nProgram Running.....") ;
00002724  4879 0000 4147          pea       @m68kde~1_141
00002728  7150      
0000272A  4E92      4148          jsr       (A2)
0000272C  584F      4149          addq.w    #4,A7
                    4150   ; printf("\r\nPress <RESET> button <Key0> on DE2 to stop") ;
0000272E  4879 0000 4151          pea       @m68kde~1_142
00002732  7168      
00002734  4E92      4152          jsr       (A2)
00002736  584F      4153          addq.w    #4,A7
                    4154   ; GoFlag = 1 ;
00002738  23FC 0000 4155          move.l    #1,_GoFlag
0000273C  0001 0084 
00002740  00DA      
                    4156   ; go() ;
00002742  6100 E1D0 4157          bsr       _go
00002746  6000 01C2 4158          bra       menu_46
                    4159   menu_12:
                    4160   ; }
                    4161   ; else if( c == (char)('M'))           // memory examine and modify
0000274A  0C02 004D 4162          cmp.b     #77,D2
0000274E  6608      4163          bne.s     menu_14
                    4164   ; MemoryChange() ;
00002750  6100 EAB6 4165          bsr       _MemoryChange
00002754  6000 01B4 4166          bra       menu_46
                    4167   menu_14:
                    4168   ; else if( c == (char)('P'))            // Program Flash Chip
00002758  0C02 0050 4169          cmp.b     #80,D2
0000275C  6608      4170          bne.s     menu_16
                    4171   ; ProgramFlashChip() ;
0000275E  6100 EBA2 4172          bsr       _ProgramFlashChip
00002762  6000 01A6 4173          bra       menu_46
                    4174   menu_16:
                    4175   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002766  0C02 0043 4176          cmp.b     #67,D2
0000276A  6608      4177          bne.s     menu_18
                    4178   ; LoadFromFlashChip();
0000276C  6100 ECAC 4179          bsr       _LoadFromFlashChip
00002770  6000 0198 4180          bra       menu_46
                    4181   menu_18:
                    4182   ; else if( c == (char)('R'))             // dump registers
00002774  0C02 0052 4183          cmp.b     #82,D2
00002778  6608      4184          bne.s     menu_20
                    4185   ; DumpRegisters() ;
0000277A  6100 EDFC 4186          bsr       _DumpRegisters
0000277E  6000 018A 4187          bra       menu_46
                    4188   menu_20:
                    4189   ; else if( c == (char)('.'))           // change registers
00002782  0C02 002E 4190          cmp.b     #46,D2
00002786  6608      4191          bne.s     menu_22
                    4192   ; ChangeRegisters() ;
00002788  6100 F2FA 4193          bsr       _ChangeRegisters
0000278C  6000 017C 4194          bra       menu_46
                    4195   menu_22:
                    4196   ; else if( c == (char)('B'))              // breakpoint command
00002790  0C02 0042 4197          cmp.b     #66,D2
00002794  6608      4198          bne.s     menu_24
                    4199   ; Breakpoint() ;
00002796  6100 FCF6 4200          bsr       _Breakpoint
0000279A  6000 016E 4201          bra       menu_46
                    4202   menu_24:
                    4203   ; else if( c == (char)('T'))  {          // Test command
0000279E  0C02 0054 4204          cmp.b     #84,D2
000027A2  6600 0042 4205          bne       menu_26
                    4206   ; c1 = toupper(_getch()) ;
000027A6  2F00      4207          move.l    D0,-(A7)
000027A8  6100 E412 4208          bsr       __getch
000027AC  2200      4209          move.l    D0,D1
000027AE  201F      4210          move.l    (A7)+,D0
000027B0  2F01      4211          move.l    D1,-(A7)
000027B2  6100 2F96 4212          bsr       _toupper
000027B6  584F      4213          addq.w    #4,A7
000027B8  1600      4214          move.b    D0,D3
                    4215   ; if(c1 == (char)('M'))                    // memory test
000027BA  0C03 004D 4216          cmp.b     #77,D3
000027BE  6606      4217          bne.s     menu_28
                    4218   ; MemoryTest() ;
000027C0  6100 02D2 4219          bsr       _MemoryTest
000027C4  601C      4220          bra.s     menu_33
                    4221   menu_28:
                    4222   ; else if( c1 == (char)('S'))              // Switch Test command
000027C6  0C03 0053 4223          cmp.b     #83,D3
000027CA  6606      4224          bne.s     menu_30
                    4225   ; SwitchTest() ;
000027CC  6100 E334 4226          bsr       _SwitchTest
000027D0  6010      4227          bra.s     menu_33
                    4228   menu_30:
                    4229   ; else if( c1 == (char)('D'))              // display Test command
000027D2  0C03 0044 4230          cmp.b     #68,D3
000027D6  6606      4231          bne.s     menu_32
                    4232   ; TestLEDS() ;
000027D8  6100 E2D4 4233          bsr       _TestLEDS
000027DC  6004      4234          bra.s     menu_33
                    4235   menu_32:
                    4236   ; else
                    4237   ; UnknownCommand() ;
000027DE  6100 FC8A 4238          bsr       _UnknownCommand
                    4239   menu_33:
000027E2  6000 0126 4240          bra       menu_46
                    4241   menu_26:
                    4242   ; }
                    4243   ; else if( c == (char)(' ')) {             // Next instruction command
000027E6  0C02 0020 4244          cmp.b     #32,D2
000027EA  6636      4245          bne.s     menu_34
                    4246   ; DisableBreakPoints() ;
000027EC  6100 F86A 4247          bsr       _DisableBreakPoints
                    4248   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
000027F0  2013      4249          move.l    (A3),D0
000027F2  0C80 0000 4250          cmp.l     #1,D0
000027F6  0001      
000027F8  661A      4251          bne.s     menu_36
000027FA  2039 0084 4252          move.l    _GoFlag,D0
000027FE  00DA      
00002800  0C80 0000 4253          cmp.l     #1,D0
00002804  0001      
00002806  660C      4254          bne.s     menu_36
                    4255   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
00002808  13FC 0001 4256          move.b    #1,4194314
0000280C  0040 000A 
                    4257   ; return ;
00002810  6000 00FC 4258          bra       menu_38
                    4259   menu_36:
                    4260   ; }
                    4261   ; else
                    4262   ; printf("\r\nError: Press 'G' first to start program") ;
00002814  4879 0000 4263          pea       @m68kde~1_143
00002818  7196      
0000281A  4E92      4264          jsr       (A2)
0000281C  584F      4265          addq.w    #4,A7
0000281E  6000 00EA 4266          bra       menu_46
                    4267   menu_34:
                    4268   ; }
                    4269   ; else if( c == (char)('S')) {             // single step
00002822  0C02 0053 4270          cmp.b     #83,D2
00002826  6600 008C 4271          bne       menu_39
                    4272   ; if(Trace == 0) {
0000282A  2013      4273          move.l    (A3),D0
0000282C  6600 0050 4274          bne       menu_41
                    4275   ; DisableBreakPoints() ;
00002830  6100 F826 4276          bsr       _DisableBreakPoints
                    4277   ; printf("\r\nSingle Step  :[ON]") ;
00002834  4879 0000 4278          pea       @m68kde~1_144
00002838  71C0      
0000283A  4E92      4279          jsr       (A2)
0000283C  584F      4280          addq.w    #4,A7
                    4281   ; printf("\r\nBreak Points :[Disabled]") ;
0000283E  4879 0000 4282          pea       @m68kde~1_145
00002842  71D6      
00002844  4E92      4283          jsr       (A2)
00002846  584F      4284          addq.w    #4,A7
                    4285   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
00002848  0055 8000 4286          or.w      #32768,(A5)
                    4287   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
0000284C  2F39 0084 4288          move.l    _PC,-(A7)
00002850  011A      
00002852  4879 0000 4289          pea       @m68kde~1_146
00002856  71F2      
00002858  4E92      4290          jsr       (A2)
0000285A  504F      4291          addq.w    #8,A7
                    4292   ; printf("\r\nPush <RESET Button> to Stop.....") ;
0000285C  4879 0000 4293          pea       @m68kde~1_147
00002860  7226      
00002862  4E92      4294          jsr       (A2)
00002864  584F      4295          addq.w    #4,A7
                    4296   ; DumpRegisters() ;
00002866  6100 ED10 4297          bsr       _DumpRegisters
                    4298   ; Trace = 1;
0000286A  26BC 0000 4299          move.l    #1,(A3)
0000286E  0001      
                    4300   ; TraceException = 1;
00002870  13FC 0001 4301          move.b    #1,4194314
00002874  0040 000A 
                    4302   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002878  28B8 0074 4303          move.l    116,(A4)
0000287C  6032      4304          bra.s     menu_42
                    4305   menu_41:
                    4306   ; }
                    4307   ; else {
                    4308   ; Trace = 0 ;
0000287E  4293      4309          clr.l     (A3)
                    4310   ; TraceException = 0 ;
00002880  4239 0040 4311          clr.b     4194314
00002884  000A      
                    4312   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002886  28B8 0074 4313          move.l    116,(A4)
                    4314   ; EnableBreakPoints() ;
0000288A  6100 F824 4315          bsr       _EnableBreakPoints
                    4316   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000288E  0255 7FFF 4317          and.w     #32767,(A5)
                    4318   ; printf("\r\nSingle Step : [OFF]") ;
00002892  4879 0000 4319          pea       @m68kde~1_148
00002896  724A      
00002898  4E92      4320          jsr       (A2)
0000289A  584F      4321          addq.w    #4,A7
                    4322   ; printf("\r\nBreak Points :[Enabled]") ;
0000289C  4879 0000 4323          pea       @m68kde~1_149
000028A0  7260      
000028A2  4E92      4324          jsr       (A2)
000028A4  584F      4325          addq.w    #4,A7
                    4326   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
000028A6  4879 0000 4327          pea       @m68kde~1_150
000028AA  727A      
000028AC  4E92      4328          jsr       (A2)
000028AE  584F      4329          addq.w    #4,A7
                    4330   menu_42:
000028B0  6000 0058 4331          bra       menu_46
                    4332   menu_39:
                    4333   ; }
                    4334   ; }
                    4335   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
000028B4  0C02 001B 4336          cmp.b     #27,D2
000028B8  6600 0040 4337          bne       menu_43
                    4338   ; Trace = 0;
000028BC  4293      4339          clr.l     (A3)
                    4340   ; TraceException = 0;
000028BE  4239 0040 4341          clr.b     4194314
000028C2  000A      
                    4342   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
000028C4  28B8 0074 4343          move.l    116,(A4)
                    4344   ; EnableBreakPoints() ;
000028C8  6100 F7E6 4345          bsr       _EnableBreakPoints
                    4346   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
000028CC  0255 7FFF 4347          and.w     #32767,(A5)
                    4348   ; printf("\r\nSingle Step  :[OFF]") ;
000028D0  4879 0000 4349          pea       @m68kde~1_151
000028D4  72A4      
000028D6  4E92      4350          jsr       (A2)
000028D8  584F      4351          addq.w    #4,A7
                    4352   ; printf("\r\nBreak Points :[Enabled]");
000028DA  4879 0000 4353          pea       @m68kde~1_152
000028DE  72BA      
000028E0  4E92      4354          jsr       (A2)
000028E2  584F      4355          addq.w    #4,A7
                    4356   ; printf("\r\nProgram Running.....") ;
000028E4  4879 0000 4357          pea       @m68kde~1_153
000028E8  72D4      
000028EA  4E92      4358          jsr       (A2)
000028EC  584F      4359          addq.w    #4,A7
                    4360   ; printf("\r\nPress <RESET> button <Key0> on DE2 to stop") ;
000028EE  4879 0000 4361          pea       @m68kde~1_154
000028F2  72EC      
000028F4  4E92      4362          jsr       (A2)
000028F6  584F      4363          addq.w    #4,A7
                    4364   ; return ;
000028F8  6014      4365          bra.s     menu_38
                    4366   menu_43:
                    4367   ; }
                    4368   ; else if( c == (char)('W'))              // Watchpoint command
000028FA  0C02 0057 4369          cmp.b     #87,D2
000028FE  6606      4370          bne.s     menu_45
                    4371   ; Watchpoint() ;
00002900  6100 FC06 4372          bsr       _Watchpoint
00002904  6004      4373          bra.s     menu_46
                    4374   menu_45:
                    4375   ; else
                    4376   ; UnknownCommand() ;
00002906  6100 FB62 4377          bsr       _UnknownCommand
                    4378   menu_46:
0000290A  6000 FDB8 4379          bra       menu_1
                    4380   menu_38:
0000290E  4CDF 3C0C 4381          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00002912  4E75      4382          rts
                    4383   ; }
                    4384   ; }
                    4385   ; void PrintErrorMessageandAbort(char *string) {
                    4386   _PrintErrorMessageandAbort:
00002914  4E56 0000 4387          link      A6,#0
                    4388   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
00002918  4879 0000 4389          pea       @m68kde~1_155
0000291C  731A      
0000291E  6100 2E56 4390          bsr       _printf
00002922  584F      4391          addq.w    #4,A7
                    4392   ; printf("%s\r\n", string) ;
00002924  2F2E 0008 4393          move.l    8(A6),-(A7)
00002928  4879 0000 4394          pea       @m68kde~1_156
0000292C  7336      
0000292E  6100 2E46 4395          bsr       _printf
00002932  504F      4396          addq.w    #8,A7
                    4397   ; menu() ;
00002934  6100 FD72 4398          bsr       _menu
00002938  4E5E      4399          unlk      A6
0000293A  4E75      4400          rts
                    4401   ; }
                    4402   ; void IRQMessage(int level) {
                    4403   _IRQMessage:
0000293C  4E56 0000 4404          link      A6,#0
                    4405   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002940  4879 0000 4406          pea       @m68kde~1_157
00002944  733C      
00002946  6100 2E2E 4407          bsr       _printf
0000294A  584F      4408          addq.w    #4,A7
                    4409   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
0000294C  2F2E 0008 4410          move.l    8(A6),-(A7)
00002950  4879 0000 4411          pea       @m68kde~1_158
00002954  7354      
00002956  6100 2E1E 4412          bsr       _printf
0000295A  504F      4413          addq.w    #8,A7
                    4414   ; menu() ;
0000295C  6100 FD4A 4415          bsr       _menu
00002960  4E5E      4416          unlk      A6
00002962  4E75      4417          rts
                    4418   ; }
                    4419   ; void UnhandledIRQ1(void) {
                    4420   _UnhandledIRQ1:
                    4421   ; IRQMessage(1);
00002964  4878 0001 4422          pea       1
00002968  61D2      4423          bsr       _IRQMessage
0000296A  584F      4424          addq.w    #4,A7
0000296C  4E75      4425          rts
                    4426   ; }
                    4427   ; void UnhandledIRQ2(void) {
                    4428   _UnhandledIRQ2:
                    4429   ; IRQMessage(2);
0000296E  4878 0002 4430          pea       2
00002972  61C8      4431          bsr       _IRQMessage
00002974  584F      4432          addq.w    #4,A7
00002976  4E75      4433          rts
                    4434   ; }
                    4435   ; void UnhandledIRQ3(void){
                    4436   _UnhandledIRQ3:
                    4437   ; IRQMessage(3);
00002978  4878 0003 4438          pea       3
0000297C  61BE      4439          bsr       _IRQMessage
0000297E  584F      4440          addq.w    #4,A7
00002980  4E75      4441          rts
                    4442   ; }
                    4443   ; void UnhandledIRQ4(void) {
                    4444   _UnhandledIRQ4:
                    4445   ; IRQMessage(4);
00002982  4878 0004 4446          pea       4
00002986  61B4      4447          bsr       _IRQMessage
00002988  584F      4448          addq.w    #4,A7
0000298A  4E75      4449          rts
                    4450   ; }
                    4451   ; void UnhandledIRQ5(void) {
                    4452   _UnhandledIRQ5:
                    4453   ; IRQMessage(5);
0000298C  4878 0005 4454          pea       5
00002990  61AA      4455          bsr       _IRQMessage
00002992  584F      4456          addq.w    #4,A7
00002994  4E75      4457          rts
                    4458   ; }
                    4459   ; void UnhandledIRQ6(void) {
                    4460   _UnhandledIRQ6:
                    4461   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
00002996  4879 0000 4462          pea       @m68kde~1_159
0000299A  7378      
0000299C  6100 FF76 4463          bsr       _PrintErrorMessageandAbort
000029A0  584F      4464          addq.w    #4,A7
                    4465   ; menu() ;
000029A2  6100 FD04 4466          bsr       _menu
000029A6  4E75      4467          rts
                    4468   ; }
                    4469   ; void UnhandledIRQ7(void) {
                    4470   _UnhandledIRQ7:
                    4471   ; IRQMessage(7);
000029A8  4878 0007 4472          pea       7
000029AC  618E      4473          bsr       _IRQMessage
000029AE  584F      4474          addq.w    #4,A7
000029B0  4E75      4475          rts
                    4476   ; }
                    4477   ; void UnhandledTrap(void) {
                    4478   _UnhandledTrap:
                    4479   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
000029B2  4879 0000 4480          pea       @m68kde~1_160
000029B6  73B8      
000029B8  6100 FF5A 4481          bsr       _PrintErrorMessageandAbort
000029BC  584F      4482          addq.w    #4,A7
000029BE  4E75      4483          rts
                    4484   ; }
                    4485   ; void BusError() {
                    4486   _BusError:
                    4487   ; PrintErrorMessageandAbort("BUS Error!") ;
000029C0  4879 0000 4488          pea       @m68kde~1_161
000029C4  73CE      
000029C6  6100 FF4C 4489          bsr       _PrintErrorMessageandAbort
000029CA  584F      4490          addq.w    #4,A7
000029CC  4E75      4491          rts
                    4492   ; }
                    4493   ; void AddressError() {
                    4494   _AddressError:
                    4495   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
000029CE  4879 0000 4496          pea       @m68kde~1_162
000029D2  73DA      
000029D4  6100 FF3E 4497          bsr       _PrintErrorMessageandAbort
000029D8  584F      4498          addq.w    #4,A7
000029DA  4E75      4499          rts
                    4500   ; }
                    4501   ; void IllegalInstruction() {
                    4502   _IllegalInstruction:
                    4503   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000029DC  4879 0000 4504          pea       @m68kde~1_163
000029E0  73EA      
000029E2  6100 FF30 4505          bsr       _PrintErrorMessageandAbort
000029E6  584F      4506          addq.w    #4,A7
000029E8  4E75      4507          rts
                    4508   ; }
                    4509   ; void Dividebyzero() {
                    4510   _Dividebyzero:
                    4511   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
000029EA  4879 0000 4512          pea       @m68kde~1_164
000029EE  73FE      
000029F0  6100 FF22 4513          bsr       _PrintErrorMessageandAbort
000029F4  584F      4514          addq.w    #4,A7
000029F6  4E75      4515          rts
                    4516   ; }
                    4517   ; void Check() {
                    4518   _Check:
                    4519   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
000029F8  4879 0000 4520          pea       @m68kde~1_165
000029FC  740E      
000029FE  6100 FF14 4521          bsr       _PrintErrorMessageandAbort
00002A02  584F      4522          addq.w    #4,A7
00002A04  4E75      4523          rts
                    4524   ; }
                    4525   ; void Trapv() {
                    4526   _Trapv:
                    4527   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
00002A06  4879 0000 4528          pea       @m68kde~1_166
00002A0A  7420      
00002A0C  6100 FF06 4529          bsr       _PrintErrorMessageandAbort
00002A10  584F      4530          addq.w    #4,A7
00002A12  4E75      4531          rts
                    4532   ; }
                    4533   ; void PrivError() {
                    4534   _PrivError:
                    4535   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
00002A14  4879 0000 4536          pea       @m68kde~1_167
00002A18  7432      
00002A1A  6100 FEF8 4537          bsr       _PrintErrorMessageandAbort
00002A1E  584F      4538          addq.w    #4,A7
00002A20  4E75      4539          rts
                    4540   ; }
                    4541   ; void UnitIRQ() {
                    4542   _UnitIRQ:
                    4543   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002A22  4879 0000 4544          pea       @m68kde~1_168
00002A26  7446      
00002A28  6100 FEEA 4545          bsr       _PrintErrorMessageandAbort
00002A2C  584F      4546          addq.w    #4,A7
00002A2E  4E75      4547          rts
                    4548   ; }
                    4549   ; void Spurious() {
                    4550   _Spurious:
                    4551   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002A30  4879 0000 4552          pea       @m68kde~1_169
00002A34  7458      
00002A36  6100 FEDC 4553          bsr       _PrintErrorMessageandAbort
00002A3A  584F      4554          addq.w    #4,A7
00002A3C  4E75      4555          rts
                    4556   ; }
                    4557   ; void EnterString(void)
                    4558   ; {
                    4559   _EnterString:
00002A3E  4E56 FFFC 4560          link      A6,#-4
00002A42  48E7 2000 4561          movem.l   D2,-(A7)
                    4562   ; unsigned char *Start;
                    4563   ; unsigned char c;
                    4564   ; printf("\r\nStart Address in Memory: ") ;
00002A46  4879 0000 4565          pea       @m68kde~1_170
00002A4A  7466      
00002A4C  6100 2D28 4566          bsr       _printf
00002A50  584F      4567          addq.w    #4,A7
                    4568   ; Start = Get8HexDigits(0) ;
00002A52  42A7      4569          clr.l     -(A7)
00002A54  6100 E298 4570          bsr       _Get8HexDigits
00002A58  584F      4571          addq.w    #4,A7
00002A5A  2400      4572          move.l    D0,D2
                    4573   ; printf("\r\nEnter String (ESC to end) :") ;
00002A5C  4879 0000 4574          pea       @m68kde~1_171
00002A60  7482      
00002A62  6100 2D12 4575          bsr       _printf
00002A66  584F      4576          addq.w    #4,A7
                    4577   ; while((c = getchar()) != 0x1b)
                    4578   EnterString_1:
00002A68  6100 2C2E 4579          bsr       _getch
00002A6C  1D40 FFFF 4580          move.b    D0,-1(A6)
00002A70  C0BC 0000 4581          and.l     #255,D0
00002A74  00FF      
00002A76  0C80 0000 4582          cmp.l     #27,D0
00002A7A  001B      
00002A7C  670A      4583          beq.s     EnterString_3
                    4584   ; *Start++ = c ;
00002A7E  2042      4585          move.l    D2,A0
00002A80  5282      4586          addq.l    #1,D2
00002A82  10AE FFFF 4587          move.b    -1(A6),(A0)
00002A86  60E0      4588          bra       EnterString_1
                    4589   EnterString_3:
                    4590   ; *Start = 0x00;  // terminate with a null
00002A88  2042      4591          move.l    D2,A0
00002A8A  4210      4592          clr.b     (A0)
00002A8C  4CDF 0004 4593          movem.l   (A7)+,D2
00002A90  4E5E      4594          unlk      A6
00002A92  4E75      4595          rts
                    4596   ; }
                    4597   ; void MemoryTest(void)
                    4598   ; {
                    4599   _MemoryTest:
00002A94  4E56 FFE8 4600          link      A6,#-24
                    4601   ; unsigned int *RamPtr, counter1=1 ;
00002A98  2D7C 0000 4602          move.l    #1,-18(A6)
00002A9C  0001 FFEE 
                    4603   ; register unsigned int i ;
                    4604   ; unsigned int Start, End ;
                    4605   ; char c ;
                    4606   ; printf("\r\nStart Address: ") ;
00002AA0  4879 0000 4607          pea       @m68kde~1_172
00002AA4  74A0      
00002AA6  6100 2CCE 4608          bsr       _printf
00002AAA  584F      4609          addq.w    #4,A7
                    4610   ; Start = Get8HexDigits(0) ;
00002AAC  42A7      4611          clr.l     -(A7)
00002AAE  6100 E23E 4612          bsr       _Get8HexDigits
00002AB2  584F      4613          addq.w    #4,A7
00002AB4  2D40 FFF6 4614          move.l    D0,-10(A6)
                    4615   ; printf("\r\nEnd Address: ") ;
00002AB8  4879 0000 4616          pea       @m68kde~1_173
00002ABC  74B2      
00002ABE  6100 2CB6 4617          bsr       _printf
00002AC2  584F      4618          addq.w    #4,A7
                    4619   ; End = Get8HexDigits(0) ;
00002AC4  42A7      4620          clr.l     -(A7)
00002AC6  6100 E226 4621          bsr       _Get8HexDigits
00002ACA  584F      4622          addq.w    #4,A7
00002ACC  2D40 FFFA 4623          move.l    D0,-6(A6)
00002AD0  4E5E      4624          unlk      A6
00002AD2  4E75      4625          rts
                    4626   ; // TODO
                    4627   ; // add your code to test memory here using 32 bit reads and writes of data between the start and end of memory
                    4628   ; }
                    4629   ; void main(void)
                    4630   ; {
                    4631   _main:
00002AD4  4E56 FFF4 4632          link      A6,#-12
00002AD8  48E7 3030 4633          movem.l   D2/D3/A2/A3,-(A7)
00002ADC  45F8 0A8E 4634          lea       _InstallExceptionHandler,A2
00002AE0  47F9 0000 4635          lea       _printf,A3
00002AE4  5776      
                    4636   ; char c ;
                    4637   ; unsigned char *SramPtr = (unsigned char *)(0x00010000) ;
00002AE6  2D7C 0001 4638          move.l    #65536,-8(A6)
00002AEA  0000 FFF8 
                    4639   ; int i ;
                    4640   ; char *BugMessage = "68k Bug V1.74";
00002AEE  41F9 0000 4641          lea       @m68kde~1_174,A0
00002AF2  74C2      
00002AF4  2608      4642          move.l    A0,D3
                    4643   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2012";
00002AF6  41F9 0000 4644          lea       @m68kde~1_175,A0
00002AFA  74D0      
00002AFC  2D48 FFFC 4645          move.l    A0,-4(A6)
                    4646   ; KillAllBreakPoints() ;
00002B00  6100 F5FA 4647          bsr       _KillAllBreakPoints
                    4648   ; i = x = y = z = PortA_Count = 0;
00002B04  42B9 0084 4649          clr.l     _PortA_Count
00002B08  00D2      
00002B0A  42B9 0084 4650          clr.l     _z
00002B0E  00CE      
00002B10  42B9 0084 4651          clr.l     _y
00002B14  00CA      
00002B16  42B9 0084 4652          clr.l     _x
00002B1A  00C6      
00002B1C  4282      4653          clr.l     D2
                    4654   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002B1E  42B9 0084 4655          clr.l     _GoFlag
00002B22  00DA      
00002B24  42B9 0084 4656          clr.l     _Trace
00002B28  00D6      
                    4657   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002B2A  42B9 0084 4658          clr.l     _d7
00002B2E  00FA      
00002B30  42B9 0084 4659          clr.l     _d6
00002B34  00F6      
00002B36  42B9 0084 4660          clr.l     _d5
00002B3A  00F2      
00002B3C  42B9 0084 4661          clr.l     _d4
00002B40  00EE      
00002B42  42B9 0084 4662          clr.l     _d3
00002B46  00EA      
00002B48  42B9 0084 4663          clr.l     _d2
00002B4C  00E6      
00002B4E  42B9 0084 4664          clr.l     _d1
00002B52  00E2      
00002B54  42B9 0084 4665          clr.l     _d0
00002B58  00DE      
                    4666   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002B5A  42B9 0084 4667          clr.l     _a6
00002B5E  0116      
00002B60  42B9 0084 4668          clr.l     _a5
00002B64  0112      
00002B66  42B9 0084 4669          clr.l     _a4
00002B6A  010E      
00002B6C  42B9 0084 4670          clr.l     _a3
00002B70  010A      
00002B72  42B9 0084 4671          clr.l     _a2
00002B76  0106      
00002B78  42B9 0084 4672          clr.l     _a1
00002B7C  0102      
00002B7E  42B9 0084 4673          clr.l     _a0
00002B82  00FE      
                    4674   ; PC = ProgramStart, SSP=0x00880000, USP = 0x00870000;
00002B84  23FC 0080 4675          move.l    #8388608,_PC
00002B88  0000 0084 
00002B8C  011A      
00002B8E  23FC 0088 4676          move.l    #8912896,_SSP
00002B92  0000 0084 
00002B96  011E      
00002B98  23FC 0087 4677          move.l    #8847360,_USP
00002B9C  0000 0084 
00002BA0  0122      
                    4678   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002BA2  33FC 2000 4679          move.w    #8192,_SR
00002BA6  0084 0126 
                    4680   ; // Initialise Breakpoint variables
                    4681   ; for(i = 0; i < 8; i++)  {
00002BAA  4282      4682          clr.l     D2
                    4683   main_1:
00002BAC  0C82 0000 4684          cmp.l     #8,D2
00002BB0  0008      
00002BB2  6C00 004C 4685          bge       main_3
                    4686   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002BB6  2002      4687          move.l    D2,D0
00002BB8  E588      4688          lsl.l     #2,D0
00002BBA  41F9 0084 4689          lea       _BreakPointAddress,A0
00002BBE  0128      
00002BC0  42B0 0800 4690          clr.l     0(A0,D0.L)
                    4691   ; WatchPointAddress[i] = 0 ;
00002BC4  2002      4692          move.l    D2,D0
00002BC6  E588      4693          lsl.l     #2,D0
00002BC8  41F9 0084 4694          lea       _WatchPointAddress,A0
00002BCC  017C      
00002BCE  42B0 0800 4695          clr.l     0(A0,D0.L)
                    4696   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002BD2  2002      4697          move.l    D2,D0
00002BD4  E388      4698          lsl.l     #1,D0
00002BD6  41F9 0084 4699          lea       _BreakPointInstruction,A0
00002BDA  0148      
00002BDC  4270 0800 4700          clr.w     0(A0,D0.L)
                    4701   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002BE0  2002      4702          move.l    D2,D0
00002BE2  E588      4703          lsl.l     #2,D0
00002BE4  41F9 0084 4704          lea       _BreakPointSetOrCleared,A0
00002BE8  0158      
00002BEA  42B0 0800 4705          clr.l     0(A0,D0.L)
                    4706   ; WatchPointSetOrCleared[i] = 0;
00002BEE  2002      4707          move.l    D2,D0
00002BF0  E588      4708          lsl.l     #2,D0
00002BF2  41F9 0084 4709          lea       _WatchPointSetOrCleared,A0
00002BF6  019C      
00002BF8  42B0 0800 4710          clr.l     0(A0,D0.L)
00002BFC  5282      4711          addq.l    #1,D2
00002BFE  60AC      4712          bra       main_1
                    4713   main_3:
                    4714   ; }
                    4715   ; // clear memory in static ram at address 00010000 for 16k
                    4716   ; for(i = 0; i < 16384; i++)
00002C00  4282      4717          clr.l     D2
                    4718   main_4:
00002C02  0C82 0000 4719          cmp.l     #16384,D2
00002C06  4000      
00002C08  6C0E      4720          bge.s     main_6
                    4721   ; *SramPtr++ = (unsigned char)(0) ;
00002C0A  206E FFF8 4722          move.l    -8(A6),A0
00002C0E  52AE FFF8 4723          addq.l    #1,-8(A6)
00002C12  4210      4724          clr.b     (A0)
00002C14  5282      4725          addq.l    #1,D2
00002C16  60EA      4726          bra       main_4
                    4727   main_6:
                    4728   ; Init_RS232() ;     // initialise the RS232 port
00002C18  6100 DF4C 4729          bsr       _Init_RS232
                    4730   ; Init_LCD() ;
00002C1C  6100 DDA2 4731          bsr       _Init_LCD
                    4732   ; for( i = 32; i < 48; i++)
00002C20  7420      4733          moveq     #32,D2
                    4734   main_7:
00002C22  0C82 0000 4735          cmp.l     #48,D2
00002C26  0030      
00002C28  6C0E      4736          bge.s     main_9
                    4737   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002C2A  2F02      4738          move.l    D2,-(A7)
00002C2C  4878 29B2 4739          pea       _UnhandledTrap
00002C30  4E92      4740          jsr       (A2)
00002C32  504F      4741          addq.w    #8,A7
00002C34  5282      4742          addq.l    #1,D2
00002C36  60EA      4743          bra       main_7
                    4744   main_9:
                    4745   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002C38  4878 002F 4746          pea       47
00002C3C  4878 26A8 4747          pea       _menu
00002C40  4E92      4748          jsr       (A2)
00002C42  504F      4749          addq.w    #8,A7
                    4750   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002C44  4878 0019 4751          pea       25
00002C48  4878 2964 4752          pea       _UnhandledIRQ1
00002C4C  4E92      4753          jsr       (A2)
00002C4E  504F      4754          addq.w    #8,A7
                    4755   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00002C50  4878 001A 4756          pea       26
00002C54  4878 296E 4757          pea       _UnhandledIRQ2
00002C58  4E92      4758          jsr       (A2)
00002C5A  504F      4759          addq.w    #8,A7
                    4760   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002C5C  4878 001B 4761          pea       27
00002C60  4878 2978 4762          pea       _UnhandledIRQ3
00002C64  4E92      4763          jsr       (A2)
00002C66  504F      4764          addq.w    #8,A7
                    4765   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002C68  4878 001C 4766          pea       28
00002C6C  4878 2982 4767          pea       _UnhandledIRQ4
00002C70  4E92      4768          jsr       (A2)
00002C72  504F      4769          addq.w    #8,A7
                    4770   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002C74  4878 001D 4771          pea       29
00002C78  4878 298C 4772          pea       _UnhandledIRQ5
00002C7C  4E92      4773          jsr       (A2)
00002C7E  504F      4774          addq.w    #8,A7
                    4775   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002C80  4878 001E 4776          pea       30
00002C84  4878 2996 4777          pea       _UnhandledIRQ6
00002C88  4E92      4778          jsr       (A2)
00002C8A  504F      4779          addq.w    #8,A7
                    4780   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002C8C  4878 001F 4781          pea       31
00002C90  4878 29A8 4782          pea       _UnhandledIRQ7
00002C94  4E92      4783          jsr       (A2)
00002C96  504F      4784          addq.w    #8,A7
                    4785   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002C98  4878 002E 4786          pea       46
00002C9C  4878 23A6 4787          pea       _HandleBreakPoint
00002CA0  4E92      4788          jsr       (A2)
00002CA2  504F      4789          addq.w    #8,A7
                    4790   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002CA4  4878 001D 4791          pea       29
00002CA8  4878 1A44 4792          pea       _DumpRegistersandPause
00002CAC  4E92      4793          jsr       (A2)
00002CAE  504F      4794          addq.w    #8,A7
                    4795   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002CB0  4878 0002 4796          pea       2
00002CB4  4878 29C0 4797          pea       _BusError
00002CB8  4E92      4798          jsr       (A2)
00002CBA  504F      4799          addq.w    #8,A7
                    4800   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00002CBC  4878 0003 4801          pea       3
00002CC0  4878 29CE 4802          pea       _AddressError
00002CC4  4E92      4803          jsr       (A2)
00002CC6  504F      4804          addq.w    #8,A7
                    4805   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002CC8  4878 0004 4806          pea       4
00002CCC  4878 29DC 4807          pea       _IllegalInstruction
00002CD0  4E92      4808          jsr       (A2)
00002CD2  504F      4809          addq.w    #8,A7
                    4810   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002CD4  4878 0005 4811          pea       5
00002CD8  4878 29EA 4812          pea       _Dividebyzero
00002CDC  4E92      4813          jsr       (A2)
00002CDE  504F      4814          addq.w    #8,A7
                    4815   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002CE0  4878 0006 4816          pea       6
00002CE4  4878 29F8 4817          pea       _Check
00002CE8  4E92      4818          jsr       (A2)
00002CEA  504F      4819          addq.w    #8,A7
                    4820   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00002CEC  4878 0007 4821          pea       7
00002CF0  4878 2A06 4822          pea       _Trapv
00002CF4  4E92      4823          jsr       (A2)
00002CF6  504F      4824          addq.w    #8,A7
                    4825   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002CF8  4878 0008 4826          pea       8
00002CFC  4878 2A14 4827          pea       _PrivError
00002D00  4E92      4828          jsr       (A2)
00002D02  504F      4829          addq.w    #8,A7
                    4830   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002D04  4878 000F 4831          pea       15
00002D08  4878 2A22 4832          pea       _UnitIRQ
00002D0C  4E92      4833          jsr       (A2)
00002D0E  504F      4834          addq.w    #8,A7
                    4835   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00002D10  4878 0018 4836          pea       24
00002D14  4878 29F8 4837          pea       _Check
00002D18  4E92      4838          jsr       (A2)
00002D1A  504F      4839          addq.w    #8,A7
                    4840   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002D1C  6100 DED8 4841          bsr       _FlushKeyboard
                    4842   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00002D20  4239 0040 4843          clr.b     4194314
00002D24  000A      
                    4844   ; // test for auto flash boot and run from Flash by reading switch 17 on DE1 board. If set, copy program from flash into Dram and run
                    4845   ; while(((char)(PortC & 0x02)) == (char)(0x02))    {
                    4846   main_10:
00002D26  1039 0040 4847          move.b    4194308,D0
00002D2A  0004      
00002D2C  C0BC 0000 4848          and.l     #255,D0
00002D30  00FF      
00002D32  C0BC 0000 4849          and.l     #2,D0
00002D36  0002      
00002D38  0C00 0002 4850          cmp.b     #2,D0
00002D3C  662A      4851          bne.s     main_12
                    4852   ; LoadFromFlashChip();
00002D3E  6100 E6DA 4853          bsr       _LoadFromFlashChip
                    4854   ; printf("\r\nRunning.....") ;
00002D42  4879 0000 4855          pea       @m68kde~1_176
00002D46  74EE      
00002D48  4E93      4856          jsr       (A3)
00002D4A  584F      4857          addq.w    #4,A7
                    4858   ; Oline1("Running.....") ;
00002D4C  4879 0000 4859          pea       @m68kde~1_177
00002D50  74FE      
00002D52  6100 DD0E 4860          bsr       _Oline1
00002D56  584F      4861          addq.w    #4,A7
                    4862   ; GoFlag = 1;
00002D58  23FC 0000 4863          move.l    #1,_GoFlag
00002D5C  0001 0084 
00002D60  00DA      
                    4864   ; go() ;
00002D62  6100 DBB0 4865          bsr       _go
00002D66  60BE      4866          bra       main_10
                    4867   main_12:
                    4868   ; }
                    4869   ; // otherwise start the debug monitor
                    4870   ; Oline0(BugMessage) ;
00002D68  2F03      4871          move.l    D3,-(A7)
00002D6A  6100 DCCC 4872          bsr       _Oline0
00002D6E  584F      4873          addq.w    #4,A7
                    4874   ; Oline1("By: PJ Davies") ;
00002D70  4879 0000 4875          pea       @m68kde~1_178
00002D74  750C      
00002D76  6100 DCEA 4876          bsr       _Oline1
00002D7A  584F      4877          addq.w    #4,A7
                    4878   ; printf("\r\n%s", BugMessage) ;
00002D7C  2F03      4879          move.l    D3,-(A7)
00002D7E  4879 0000 4880          pea       @m68kde~1_179
00002D82  751A      
00002D84  4E93      4881          jsr       (A3)
00002D86  504F      4882          addq.w    #8,A7
                    4883   ; printf("\r\n%s", CopyrightMessage) ;
00002D88  2F2E FFFC 4884          move.l    -4(A6),-(A7)
00002D8C  4879 0000 4885          pea       @m68kde~1_180
00002D90  7520      
00002D92  4E93      4886          jsr       (A3)
00002D94  504F      4887          addq.w    #8,A7
                    4888   ; menu();
00002D96  6100 F910 4889          bsr       _menu
00002D9A  4CDF 0C0C 4890          movem.l   (A7)+,D2/D3/A2/A3
00002D9E  4E5E      4891          unlk      A6
00002DA0  4E75      4892          rts
                    4893   ; }
                    4894   ; void FormatInstruction(void)    // for disassembly
                    4895   ; {
                    4896   _FormatInstruction:
00002DA2  4E56 FEC0 4897          link      A6,#-320
00002DA6  48E7 3C20 4898          movem.l   D2/D3/D4/D5/A2,-(A7)
00002DAA  45EE FEC0 4899          lea       -320(A6),A2
                    4900   ; short i, ilen = 0 ;
00002DAE  4245      4901          clr.w     D5
                    4902   ; char *iptr = Instruction ;
00002DB0  41F9 0084 4903          lea       _Instruction,A0
00002DB4  04DC      
00002DB6  2608      4904          move.l    A0,D3
                    4905   ; char *Formatted[80], *fptr ;
                    4906   ; fptr = Formatted ;
00002DB8  280A      4907          move.l    A2,D4
                    4908   ; for(i = 0; i < (short)(80); i ++)
00002DBA  4242      4909          clr.w     D2
                    4910   FormatInstruction_1:
00002DBC  0C42 0050 4911          cmp.w     #80,D2
00002DC0  6C0E      4912          bge.s     FormatInstruction_3
                    4913   ; Formatted[i] = (char)(0);          // set formatted string to null
00002DC2  48C2      4914          ext.l     D2
00002DC4  2002      4915          move.l    D2,D0
00002DC6  E588      4916          lsl.l     #2,D0
00002DC8  42B2 0800 4917          clr.l     0(A2,D0.L)
00002DCC  5242      4918          addq.w    #1,D2
00002DCE  60EC      4919          bra       FormatInstruction_1
                    4920   FormatInstruction_3:
                    4921   ; while((*iptr != ' '))   {   // while ot a space char
                    4922   FormatInstruction_4:
00002DD0  2043      4923          move.l    D3,A0
00002DD2  1010      4924          move.b    (A0),D0
00002DD4  4880      4925          ext.w     D0
00002DD6  48C0      4926          ext.l     D0
00002DD8  0C80 0000 4927          cmp.l     #32,D0
00002DDC  0020      
00002DDE  671E      4928          beq.s     FormatInstruction_6
                    4929   ; *fptr++ = *iptr++ ;     // copy string until space or end encountered
00002DE0  2043      4930          move.l    D3,A0
00002DE2  5283      4931          addq.l    #1,D3
00002DE4  2244      4932          move.l    D4,A1
00002DE6  5284      4933          addq.l    #1,D4
00002DE8  1290      4934          move.b    (A0),(A1)
                    4935   ; ilen ++ ;               // count length of string as we go
00002DEA  5245      4936          addq.w    #1,D5
                    4937   ; if(*iptr == 0)          // if we got the end and copied the NUL then return
00002DEC  2043      4938          move.l    D3,A0
00002DEE  1010      4939          move.b    (A0),D0
00002DF0  4880      4940          ext.w     D0
00002DF2  48C0      4941          ext.l     D0
00002DF4  4A80      4942          tst.l     D0
00002DF6  6604      4943          bne.s     FormatInstruction_7
                    4944   ; return ;
00002DF8  6000 0040 4945          bra       FormatInstruction_9
                    4946   FormatInstruction_7:
00002DFC  60D2      4947          bra       FormatInstruction_4
                    4948   FormatInstruction_6:
                    4949   ; }
                    4950   ; // must still be more text to process otherwise we would have returned above if got to the end
                    4951   ; for(i = 0; i < ((short)(8) - ilen); i++)
00002DFE  4242      4952          clr.w     D2
                    4953   FormatInstruction_10:
00002E00  7008      4954          moveq     #8,D0
00002E02  9045      4955          sub.w     D5,D0
00002E04  B440      4956          cmp.w     D0,D2
00002E06  6C0C      4957          bge.s     FormatInstruction_12
                    4958   ; *fptr++ = ' ' ;        // make sure first operand appears in field 8 of formatted string
00002E08  2044      4959          move.l    D4,A0
00002E0A  5284      4960          addq.l    #1,D4
00002E0C  10BC 0020 4961          move.b    #32,(A0)
00002E10  5242      4962          addq.w    #1,D2
00002E12  60EC      4963          bra       FormatInstruction_10
                    4964   FormatInstruction_12:
                    4965   ; // now skip over any spaces in original unformatted string before copying the rest
                    4966   ; while((*iptr == ' '))
                    4967   FormatInstruction_13:
00002E14  2043      4968          move.l    D3,A0
00002E16  1010      4969          move.b    (A0),D0
00002E18  4880      4970          ext.w     D0
00002E1A  48C0      4971          ext.l     D0
00002E1C  0C80 0000 4972          cmp.l     #32,D0
00002E20  0020      
00002E22  6604      4973          bne.s     FormatInstruction_15
                    4974   ; iptr++ ;
00002E24  5283      4975          addq.l    #1,D3
00002E26  60EC      4976          bra       FormatInstruction_13
                    4977   FormatInstruction_15:
                    4978   ; strcat(fptr,iptr) ;
00002E28  2F03      4979          move.l    D3,-(A7)
00002E2A  2F04      4980          move.l    D4,-(A7)
00002E2C  6100 2906 4981          bsr       _strcat
00002E30  504F      4982          addq.w    #8,A7
                    4983   ; strcpyInstruction(Formatted) ;
00002E32  2F0A      4984          move.l    A2,-(A7)
00002E34  6100 DEF4 4985          bsr       _strcpyInstruction
00002E38  584F      4986          addq.w    #4,A7
                    4987   FormatInstruction_9:
00002E3A  4CDF 043C 4988          movem.l   (A7)+,D2/D3/D4/D5/A2
00002E3E  4E5E      4989          unlk      A6
00002E40  4E75      4990          rts
                    4991   ; }
                    4992   ; unsigned short int Decode2BitOperandSize(unsigned short int OpCode)
                    4993   ; {
                    4994   _Decode2BitOperandSize:
00002E42  4E56 0000 4995          link      A6,#0
00002E46  48E7 3020 4996          movem.l   D2/D3/A2,-(A7)
00002E4A  362E 000A 4997          move.w    10(A6),D3
00002E4E  C6BC 0000 4998          and.l     #65535,D3
00002E52  FFFF      
00002E54  45F8 0D12 4999          lea       _strcatInstruction,A2
                    5000   ; unsigned short int DataSize ;       // used to determine the size of data following say an immediate instruction such as addi etc
                    5001   ; OpCode = (OpCode & (unsigned short int)(0x00C0)) >> 6 ;             // get bits 7 and 6 into positions 1,0
00002E58  3003      5002          move.w    D3,D0
00002E5A  C07C 00C0 5003          and.w     #192,D0
00002E5E  EC48      5004          lsr.w     #6,D0
00002E60  3600      5005          move.w    D0,D3
                    5006   ; if(OpCode == (unsigned short int)(0))   {
00002E62  4A43      5007          tst.w     D3
00002E64  660E      5008          bne.s     Decode2BitOperandSize_1
                    5009   ; strcatInstruction(".B ") ;
00002E66  4879 0000 5010          pea       @m68kde~1_181
00002E6A  7526      
00002E6C  4E92      5011          jsr       (A2)
00002E6E  584F      5012          addq.w    #4,A7
                    5013   ; DataSize = 1 ;
00002E70  7401      5014          moveq     #1,D2
00002E72  6020      5015          bra.s     Decode2BitOperandSize_4
                    5016   Decode2BitOperandSize_1:
                    5017   ; }
                    5018   ; else if(OpCode == (unsigned short int)(1)) {
00002E74  0C43 0001 5019          cmp.w     #1,D3
00002E78  660E      5020          bne.s     Decode2BitOperandSize_3
                    5021   ; strcatInstruction(".W ") ;
00002E7A  4879 0000 5022          pea       @m68kde~1_182
00002E7E  752A      
00002E80  4E92      5023          jsr       (A2)
00002E82  584F      5024          addq.w    #4,A7
                    5025   ; DataSize = 1 ;
00002E84  7401      5026          moveq     #1,D2
00002E86  600C      5027          bra.s     Decode2BitOperandSize_4
                    5028   Decode2BitOperandSize_3:
                    5029   ; }
                    5030   ; else {
                    5031   ; strcatInstruction(".L ") ;
00002E88  4879 0000 5032          pea       @m68kde~1_183
00002E8C  752E      
00002E8E  4E92      5033          jsr       (A2)
00002E90  584F      5034          addq.w    #4,A7
                    5035   ; DataSize = 2 ;
00002E92  7402      5036          moveq     #2,D2
                    5037   Decode2BitOperandSize_4:
                    5038   ; }
                    5039   ; return DataSize;
00002E94  3002      5040          move.w    D2,D0
00002E96  4CDF 040C 5041          movem.l   (A7)+,D2/D3/A2
00002E9A  4E5E      5042          unlk      A6
00002E9C  4E75      5043          rts
                    5044   ; }
                    5045   ; void Decode3BitDataRegister(unsigned short int OpCode)                // Data Register in Bits 11, 10 and 9
                    5046   ; {
                    5047   _Decode3BitDataRegister:
00002E9E  4E56 FFFC 5048          link      A6,#-4
00002EA2  48E7 0020 5049          movem.l   A2,-(A7)
00002EA6  45EE FFFC 5050          lea       -4(A6),A2
                    5051   ; unsigned char RegNumber[3] ;
                    5052   ; RegNumber[0] = 'D' ;
00002EAA  14BC 0044 5053          move.b    #68,(A2)
                    5054   ; RegNumber[1] = (unsigned char)(0x30) + (unsigned char)((OpCode & 0x0E00) >> 9) ;   // get data register number in bits 2,1,0 and convert to ASCII equiv
00002EAE  7030      5055          moveq     #48,D0
00002EB0  322E 000A 5056          move.w    10(A6),D1
00002EB4  C27C 0E00 5057          and.w     #3584,D1
00002EB8  E049      5058          lsr.w     #8,D1
00002EBA  E249      5059          lsr.w     #1,D1
00002EBC  D001      5060          add.b     D1,D0
00002EBE  1540 0001 5061          move.b    D0,1(A2)
                    5062   ; RegNumber[2] = 0 ;
00002EC2  422A 0002 5063          clr.b     2(A2)
                    5064   ; strcatInstruction(RegNumber) ;        // write register number to the disassembled instruction
00002EC6  2F0A      5065          move.l    A2,-(A7)
00002EC8  6100 DE48 5066          bsr       _strcatInstruction
00002ECC  584F      5067          addq.w    #4,A7
00002ECE  4CDF 0400 5068          movem.l   (A7)+,A2
00002ED2  4E5E      5069          unlk      A6
00002ED4  4E75      5070          rts
                    5071   ; }
                    5072   ; void Decode3BitAddressRegister(unsigned short int Reg)                // Address Register in Bits 2,1,0
                    5073   ; {
                    5074   _Decode3BitAddressRegister:
00002ED6  4E56 FFFC 5075          link      A6,#-4
00002EDA  48E7 0020 5076          movem.l   A2,-(A7)
00002EDE  45EE FFFC 5077          lea       -4(A6),A2
                    5078   ; unsigned char RegNumber[3];
                    5079   ; RegNumber[0] = 'A' ;
00002EE2  14BC 0041 5080          move.b    #65,(A2)
                    5081   ; RegNumber[1] = (unsigned char)(0x30) + (unsigned char)(Reg) ;   // get data register number in bits 2,1,0 and convert to ASCII equiv
00002EE6  7030      5082          moveq     #48,D0
00002EE8  322E 000A 5083          move.w    10(A6),D1
00002EEC  D001      5084          add.b     D1,D0
00002EEE  1540 0001 5085          move.b    D0,1(A2)
                    5086   ; RegNumber[2] = 0 ;
00002EF2  422A 0002 5087          clr.b     2(A2)
                    5088   ; strcatInstruction(RegNumber) ;        // write register number to the disassembled instruction
00002EF6  2F0A      5089          move.l    A2,-(A7)
00002EF8  6100 DE18 5090          bsr       _strcatInstruction
00002EFC  584F      5091          addq.w    #4,A7
00002EFE  4CDF 0400 5092          movem.l   (A7)+,A2
00002F02  4E5E      5093          unlk      A6
00002F04  4E75      5094          rts
                    5095   ; }
                    5096   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5097   ; // Special function is used to print 8,16, 32 bit operands after move #
                    5098   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5099   ; void DecodeBWLDataAfterOpCodeForMove(unsigned short int *OpCode )
                    5100   ; {
                    5101   _DecodeBWLDataAfterOpCodeForMove:
00002F06  4E56 0000 5102          link      A6,#0
00002F0A  48E7 3030 5103          movem.l   D2/D3/A2/A3,-(A7)
00002F0E  242E 0008 5104          move.l    8(A6),D2
00002F12  45F9 0084 5105          lea       _TempString,A2
00002F16  0540      
00002F18  47F9 0000 5106          lea       _sprintf,A3
00002F1C  5700      
                    5107   ; unsigned char OperandSize ;
                    5108   ; OperandSize = (*OpCode >> 12) & (unsigned short int)(0x0003) ;               // get bits 13,12 into 1,0 as these define size of #operand
00002F1E  2042      5109          move.l    D2,A0
00002F20  3010      5110          move.w    (A0),D0
00002F22  E048      5111          lsr.w     #8,D0
00002F24  E848      5112          lsr.w     #4,D0
00002F26  C07C 0003 5113          and.w     #3,D0
00002F2A  1600      5114          move.b    D0,D3
                    5115   ; InstructionSize += 1;
00002F2C  52B9 0084 5116          addq.l    #1,_InstructionSize
00002F30  0178      
                    5117   ; if(OperandSize == (char)(1))                // #byte value
00002F32  0C03 0001 5118          cmp.b     #1,D3
00002F36  6620      5119          bne.s     DecodeBWLDataAfterOpCodeForMove_1
                    5120   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002F38  2042      5121          move.l    D2,A0
00002F3A  3228 0002 5122          move.w    2(A0),D1
00002F3E  C2BC 0000 5123          and.l     #65535,D1
00002F42  FFFF      
00002F44  2F01      5124          move.l    D1,-(A7)
00002F46  4879 0000 5125          pea       @m68kde~1_184
00002F4A  7532      
00002F4C  2F0A      5126          move.l    A2,-(A7)
00002F4E  4E93      5127          jsr       (A3)
00002F50  DEFC 000C 5128          add.w     #12,A7
00002F54  6000 0068 5129          bra       DecodeBWLDataAfterOpCodeForMove_5
                    5130   DecodeBWLDataAfterOpCodeForMove_1:
                    5131   ; else if(OperandSize == (char)(3))          // #word value
00002F58  0C03 0003 5132          cmp.b     #3,D3
00002F5C  6620      5133          bne.s     DecodeBWLDataAfterOpCodeForMove_3
                    5134   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002F5E  2042      5135          move.l    D2,A0
00002F60  3228 0002 5136          move.w    2(A0),D1
00002F64  C2BC 0000 5137          and.l     #65535,D1
00002F68  FFFF      
00002F6A  2F01      5138          move.l    D1,-(A7)
00002F6C  4879 0000 5139          pea       @m68kde~1_185
00002F70  7538      
00002F72  2F0A      5140          move.l    A2,-(A7)
00002F74  4E93      5141          jsr       (A3)
00002F76  DEFC 000C 5142          add.w     #12,A7
00002F7A  6000 0042 5143          bra       DecodeBWLDataAfterOpCodeForMove_5
                    5144   DecodeBWLDataAfterOpCodeForMove_3:
                    5145   ; else if(OperandSize == (char)(2)) {                                       // long value
00002F7E  0C03 0002 5146          cmp.b     #2,D3
00002F82  6600 003A 5147          bne       DecodeBWLDataAfterOpCodeForMove_5
                    5148   ; sprintf(TempString, "#$%X", ((unsigned int)(OpCode[1]) << 16) | (unsigned int)(OpCode[2])); // create 3
00002F86  2042      5149          move.l    D2,A0
00002F88  3228 0002 5150          move.w    2(A0),D1
00002F8C  C2BC 0000 5151          and.l     #65535,D1
00002F90  FFFF      
00002F92  E189      5152          lsl.l     #8,D1
00002F94  E189      5153          lsl.l     #8,D1
00002F96  2042      5154          move.l    D2,A0
00002F98  2F00      5155          move.l    D0,-(A7)
00002F9A  3028 0004 5156          move.w    4(A0),D0
00002F9E  C0BC 0000 5157          and.l     #65535,D0
00002FA2  FFFF      
00002FA4  8280      5158          or.l      D0,D1
00002FA6  201F      5159          move.l    (A7)+,D0
00002FA8  2F01      5160          move.l    D1,-(A7)
00002FAA  4879 0000 5161          pea       @m68kde~1_186
00002FAE  753E      
00002FB0  2F0A      5162          move.l    A2,-(A7)
00002FB2  4E93      5163          jsr       (A3)
00002FB4  DEFC 000C 5164          add.w     #12,A7
                    5165   ; InstructionSize += 1;
00002FB8  52B9 0084 5166          addq.l    #1,_InstructionSize
00002FBC  0178      
                    5167   DecodeBWLDataAfterOpCodeForMove_5:
                    5168   ; }
                    5169   ; strcatInstruction(TempString) ;
00002FBE  2F0A      5170          move.l    A2,-(A7)
00002FC0  6100 DD50 5171          bsr       _strcatInstruction
00002FC4  584F      5172          addq.w    #4,A7
00002FC6  4CDF 0C0C 5173          movem.l   (A7)+,D2/D3/A2/A3
00002FCA  4E5E      5174          unlk      A6
00002FCC  4E75      5175          rts
                    5176   ; }
                    5177   ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5178   ; // This function is used to print 8,16, 32 bit operands after the opcode, this is in instruction like ADD # where immediate addressing is used as source
                    5179   ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5180   ; void DecodeBWLDataAfterOpCode(unsigned short int *OpCode )
                    5181   ; {
                    5182   _DecodeBWLDataAfterOpCode:
00002FCE  4E56 0000 5183          link      A6,#0
00002FD2  48E7 3038 5184          movem.l   D2/D3/A2/A3/A4,-(A7)
00002FD6  262E 0008 5185          move.l    8(A6),D3
00002FDA  45F9 0084 5186          lea       _TempString,A2
00002FDE  0540      
00002FE0  47F9 0000 5187          lea       _sprintf,A3
00002FE4  5700      
00002FE6  49F9 0084 5188          lea       _InstructionSize,A4
00002FEA  0178      
                    5189   ; unsigned char OperandSize ;
                    5190   ; OperandSize = (*OpCode & (unsigned short int)(0x01C0)) >> 6 ;               // get bits 8,7 and 6 into positions 1,0, these define size of operand
00002FEC  2043      5191          move.l    D3,A0
00002FEE  3010      5192          move.w    (A0),D0
00002FF0  C07C 01C0 5193          and.w     #448,D0
00002FF4  EC48      5194          lsr.w     #6,D0
00002FF6  1400      5195          move.b    D0,D2
                    5196   ; InstructionSize += 1;
00002FF8  5294      5197          addq.l    #1,(A4)
                    5198   ; if((OperandSize == (char)(0)) || (OperandSize == (char)(4)))                // #byte value
00002FFA  4A02      5199          tst.b     D2
00002FFC  6706      5200          beq.s     DecodeBWLDataAfterOpCode_3
00002FFE  0C02 0004 5201          cmp.b     #4,D2
00003002  6620      5202          bne.s     DecodeBWLDataAfterOpCode_1
                    5203   DecodeBWLDataAfterOpCode_3:
                    5204   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00003004  2043      5205          move.l    D3,A0
00003006  3228 0002 5206          move.w    2(A0),D1
0000300A  C2BC 0000 5207          and.l     #65535,D1
0000300E  FFFF      
00003010  2F01      5208          move.l    D1,-(A7)
00003012  4879 0000 5209          pea       @m68kde~1_187
00003016  7544      
00003018  2F0A      5210          move.l    A2,-(A7)
0000301A  4E93      5211          jsr       (A3)
0000301C  DEFC 000C 5212          add.w     #12,A7
00003020  6000 007C 5213          bra       DecodeBWLDataAfterOpCode_7
                    5214   DecodeBWLDataAfterOpCode_1:
                    5215   ; // #word value 7 is used by divs.w instruction (not divu)
                    5216   ; // however used by instructions like adda, cmpa, suba # to mean long value -
                    5217   ; // bugger - have to build a special case and look at opcode to see what instruction is
                    5218   ; else if((OperandSize == (char)(1)) || (OperandSize == (char)(5)) || (OperandSize == (char)(3)))         //# byte or word value
00003024  0C02 0001 5219          cmp.b     #1,D2
00003028  670C      5220          beq.s     DecodeBWLDataAfterOpCode_6
0000302A  0C02 0005 5221          cmp.b     #5,D2
0000302E  6706      5222          beq.s     DecodeBWLDataAfterOpCode_6
00003030  0C02 0003 5223          cmp.b     #3,D2
00003034  6620      5224          bne.s     DecodeBWLDataAfterOpCode_4
                    5225   DecodeBWLDataAfterOpCode_6:
                    5226   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00003036  2043      5227          move.l    D3,A0
00003038  3228 0002 5228          move.w    2(A0),D1
0000303C  C2BC 0000 5229          and.l     #65535,D1
00003040  FFFF      
00003042  2F01      5230          move.l    D1,-(A7)
00003044  4879 0000 5231          pea       @m68kde~1_188
00003048  754A      
0000304A  2F0A      5232          move.l    A2,-(A7)
0000304C  4E93      5233          jsr       (A3)
0000304E  DEFC 000C 5234          add.w     #12,A7
00003052  6000 004A 5235          bra       DecodeBWLDataAfterOpCode_7
                    5236   DecodeBWLDataAfterOpCode_4:
                    5237   ; else if((OperandSize == (char)(2))  || (OperandSize == (char)(6)) || (OperandSize == (char)(7)))    {    //# long value
00003056  0C02 0002 5238          cmp.b     #2,D2
0000305A  670E      5239          beq.s     DecodeBWLDataAfterOpCode_9
0000305C  0C02 0006 5240          cmp.b     #6,D2
00003060  6708      5241          beq.s     DecodeBWLDataAfterOpCode_9
00003062  0C02 0007 5242          cmp.b     #7,D2
00003066  6600 0036 5243          bne       DecodeBWLDataAfterOpCode_7
                    5244   DecodeBWLDataAfterOpCode_9:
                    5245   ; sprintf(TempString, "#$%X", ((unsigned int)(OpCode[1]) << 16) | (unsigned int)(OpCode[2]) ); // create 3
0000306A  2043      5246          move.l    D3,A0
0000306C  3228 0002 5247          move.w    2(A0),D1
00003070  C2BC 0000 5248          and.l     #65535,D1
00003074  FFFF      
00003076  E189      5249          lsl.l     #8,D1
00003078  E189      5250          lsl.l     #8,D1
0000307A  2043      5251          move.l    D3,A0
0000307C  2F00      5252          move.l    D0,-(A7)
0000307E  3028 0004 5253          move.w    4(A0),D0
00003082  C0BC 0000 5254          and.l     #65535,D0
00003086  FFFF      
00003088  8280      5255          or.l      D0,D1
0000308A  201F      5256          move.l    (A7)+,D0
0000308C  2F01      5257          move.l    D1,-(A7)
0000308E  4879 0000 5258          pea       @m68kde~1_189
00003092  7550      
00003094  2F0A      5259          move.l    A2,-(A7)
00003096  4E93      5260          jsr       (A3)
00003098  DEFC 000C 5261          add.w     #12,A7
                    5262   ; InstructionSize += 1;
0000309C  5294      5263          addq.l    #1,(A4)
                    5264   DecodeBWLDataAfterOpCode_7:
                    5265   ; }
                    5266   ; // special case for divs - bugger!!!
                    5267   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0x81C0)) // it's the divs instruction
0000309E  2043      5268          move.l    D3,A0
000030A0  3010      5269          move.w    (A0),D0
000030A2  C07C F1C0 5270          and.w     #61888,D0
000030A6  0C40 81C0 5271          cmp.w     #33216,D0
000030AA  6622      5272          bne.s     DecodeBWLDataAfterOpCode_10
                    5273   ; {
                    5274   ; InstructionSize = 2 ;
000030AC  28BC 0000 5275          move.l    #2,(A4)
000030B0  0002      
                    5276   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
000030B2  2043      5277          move.l    D3,A0
000030B4  3228 0002 5278          move.w    2(A0),D1
000030B8  C2BC 0000 5279          and.l     #65535,D1
000030BC  FFFF      
000030BE  2F01      5280          move.l    D1,-(A7)
000030C0  4879 0000 5281          pea       @m68kde~1_190
000030C4  7556      
000030C6  2F0A      5282          move.l    A2,-(A7)
000030C8  4E93      5283          jsr       (A3)
000030CA  DEFC 000C 5284          add.w     #12,A7
                    5285   DecodeBWLDataAfterOpCode_10:
                    5286   ; }
                    5287   ; strcatInstruction(TempString) ;
000030CE  2F0A      5288          move.l    A2,-(A7)
000030D0  6100 DC40 5289          bsr       _strcatInstruction
000030D4  584F      5290          addq.w    #4,A7
000030D6  4CDF 1C0C 5291          movem.l   (A7)+,D2/D3/A2/A3/A4
000030DA  4E5E      5292          unlk      A6
000030DC  4E75      5293          rts
                    5294   ; }
                    5295   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5296   ; // This function decodes the MODE|EA bits opcode in bits 5,4,3,2,1,0 or 11-6
                    5297   ; // DataSize is used to gain access to the operand used by EA, e.g. ADDI  #$2344422,$234234
                    5298   ; // since the data following the opcode is actually the immediate data which could be 1 or 2 words
                    5299   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5300   ; void Decode6BitEA(unsigned short int *OpCode, int EAChoice, unsigned short int DataSize, unsigned short int IsItMoveInstruction)     // decode Mode/Register
                    5301   ; {
                    5302   _Decode6BitEA:
000030DE  4E56 FFF4 5303          link      A6,#-12
000030E2  48E7 3F3C 5304          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000030E6  45F8 0D12 5305          lea       _strcatInstruction,A2
000030EA  47F9 0084 5306          lea       _TempString,A3
000030EE  0540      
000030F0  282E 0008 5307          move.l    8(A6),D4
000030F4  49F9 0000 5308          lea       _sprintf,A4
000030F8  5700      
000030FA  4BF9 0084 5309          lea       _InstructionSize,A5
000030FE  0178      
00003100  3C2E 0012 5310          move.w    18(A6),D6
00003104  CCBC 0000 5311          and.l     #65535,D6
00003108  FFFF      
                    5312   ; unsigned char OperandMode, OperandRegister, OperandSize;
                    5313   ; short int ExWord1, ExWord2 ;                       // get any extra 16 bit word associated with EA
                    5314   ; unsigned char RegNumber[3];
                    5315   ; signed char offset ;
                    5316   ; unsigned short int Xn, XnSize ;
                    5317   ; if(EAChoice == 0)   {   // if EA in bits 5-0
0000310A  202E 000C 5318          move.l    12(A6),D0
0000310E  6620      5319          bne.s     Decode6BitEA_1
                    5320   ; OperandMode = ((unsigned char)(*OpCode >> 3) & (unsigned short int)(0x7)) ;    // get bits 5,4,3 into position 2,1,0
00003110  2044      5321          move.l    D4,A0
00003112  3010      5322          move.w    (A0),D0
00003114  E648      5323          lsr.w     #3,D0
00003116  C07C 00FF 5324          and.w     #255,D0
0000311A  C07C 0007 5325          and.w     #7,D0
0000311E  1A00      5326          move.b    D0,D5
                    5327   ; OperandRegister = ((unsigned char)(*OpCode) & (unsigned short int)(0x7)) ;
00003120  2044      5328          move.l    D4,A0
00003122  3010      5329          move.w    (A0),D0
00003124  C07C 00FF 5330          and.w     #255,D0
00003128  C07C 0007 5331          and.w     #7,D0
0000312C  1600      5332          move.b    D0,D3
0000312E  6022      5333          bra.s     Decode6BitEA_2
                    5334   Decode6BitEA_1:
                    5335   ; }
                    5336   ; else    {               // else EA in bits 11-6
                    5337   ; OperandMode = ((unsigned char)(*OpCode >> 6) & (unsigned short int)(0x7)) ;
00003130  2044      5338          move.l    D4,A0
00003132  3010      5339          move.w    (A0),D0
00003134  EC48      5340          lsr.w     #6,D0
00003136  C07C 00FF 5341          and.w     #255,D0
0000313A  C07C 0007 5342          and.w     #7,D0
0000313E  1A00      5343          move.b    D0,D5
                    5344   ; OperandRegister = ((unsigned char)(*OpCode >> 9) & (unsigned short int)(0x7)) ;
00003140  2044      5345          move.l    D4,A0
00003142  3010      5346          move.w    (A0),D0
00003144  E048      5347          lsr.w     #8,D0
00003146  E248      5348          lsr.w     #1,D0
00003148  C07C 00FF 5349          and.w     #255,D0
0000314C  C07C 0007 5350          and.w     #7,D0
00003150  1600      5351          move.b    D0,D3
                    5352   Decode6BitEA_2:
                    5353   ; }
                    5354   ; if(EAChoice == 0)    {
00003152  202E 000C 5355          move.l    12(A6),D0
00003156  662A      5356          bne.s     Decode6BitEA_3
                    5357   ; ExWord1 = OpCode[1+DataSize] ;
00003158  2044      5358          move.l    D4,A0
0000315A  7001      5359          moveq     #1,D0
0000315C  CCBC 0000 5360          and.l     #65535,D6
00003160  FFFF      
00003162  D086      5361          add.l     D6,D0
00003164  E388      5362          lsl.l     #1,D0
00003166  3430 0800 5363          move.w    0(A0,D0.L),D2
                    5364   ; ExWord2 = OpCode[2+DataSize] ;
0000316A  2044      5365          move.l    D4,A0
0000316C  7002      5366          moveq     #2,D0
0000316E  CCBC 0000 5367          and.l     #65535,D6
00003172  FFFF      
00003174  D086      5368          add.l     D6,D0
00003176  E388      5369          lsl.l     #1,D0
00003178  3D70 0800 5370          move.w    0(A0,D0.L),-8(A6)
0000317C  FFF8      
0000317E  6000 0068 5371          bra       Decode6BitEA_7
                    5372   Decode6BitEA_3:
                    5373   ; }
                    5374   ; else if(EAChoice == 1)   {
00003182  202E 000C 5375          move.l    12(A6),D0
00003186  0C80 0000 5376          cmp.l     #1,D0
0000318A  0001      
0000318C  6628      5377          bne.s     Decode6BitEA_5
                    5378   ; ExWord1 = OpCode[3+DataSize] ;
0000318E  2044      5379          move.l    D4,A0
00003190  7003      5380          moveq     #3,D0
00003192  CCBC 0000 5381          and.l     #65535,D6
00003196  FFFF      
00003198  D086      5382          add.l     D6,D0
0000319A  E388      5383          lsl.l     #1,D0
0000319C  3430 0800 5384          move.w    0(A0,D0.L),D2
                    5385   ; ExWord2 = OpCode[4+DataSize] ;
000031A0  2044      5386          move.l    D4,A0
000031A2  7004      5387          moveq     #4,D0
000031A4  CCBC 0000 5388          and.l     #65535,D6
000031A8  FFFF      
000031AA  D086      5389          add.l     D6,D0
000031AC  E388      5390          lsl.l     #1,D0
000031AE  3D70 0800 5391          move.w    0(A0,D0.L),-8(A6)
000031B2  FFF8      
000031B4  6032      5392          bra.s     Decode6BitEA_7
                    5393   Decode6BitEA_5:
                    5394   ; }
                    5395   ; else if(EAChoice == 2)   {  // for move instruction
000031B6  202E 000C 5396          move.l    12(A6),D0
000031BA  0C80 0000 5397          cmp.l     #2,D0
000031BE  0002      
000031C0  6626      5398          bne.s     Decode6BitEA_7
                    5399   ; ExWord1 = OpCode[1+DataSize] ;
000031C2  2044      5400          move.l    D4,A0
000031C4  7001      5401          moveq     #1,D0
000031C6  CCBC 0000 5402          and.l     #65535,D6
000031CA  FFFF      
000031CC  D086      5403          add.l     D6,D0
000031CE  E388      5404          lsl.l     #1,D0
000031D0  3430 0800 5405          move.w    0(A0,D0.L),D2
                    5406   ; ExWord2 = OpCode[2+DataSize] ;
000031D4  2044      5407          move.l    D4,A0
000031D6  7002      5408          moveq     #2,D0
000031D8  CCBC 0000 5409          and.l     #65535,D6
000031DC  FFFF      
000031DE  D086      5410          add.l     D6,D0
000031E0  E388      5411          lsl.l     #1,D0
000031E2  3D70 0800 5412          move.w    0(A0,D0.L),-8(A6)
000031E6  FFF8      
                    5413   Decode6BitEA_7:
                    5414   ; }
                    5415   ; if(OperandMode == (unsigned char)(0)) {                    // Effective Address = Dn
000031E8  4A05      5416          tst.b     D5
000031EA  6624      5417          bne.s     Decode6BitEA_9
                    5418   ; RegNumber[0] = 'D' ;
000031EC  1D7C 0044 5419          move.b    #68,-6+0(A6)
000031F0  FFFA      
                    5420   ; RegNumber[1] = (unsigned char)(0x30 + OperandRegister) ;
000031F2  7030      5421          moveq     #48,D0
000031F4  C6BC 0000 5422          and.l     #255,D3
000031F8  00FF      
000031FA  D083      5423          add.l     D3,D0
000031FC  1D40 FFFB 5424          move.b    D0,-6+1(A6)
                    5425   ; RegNumber[2] = 0 ;
00003200  422E FFFC 5426          clr.b     -6+2(A6)
                    5427   ; strcatInstruction(RegNumber) ;
00003204  486E FFFA 5428          pea       -6(A6)
00003208  4E92      5429          jsr       (A2)
0000320A  584F      5430          addq.w    #4,A7
0000320C  6000 02FA 5431          bra       Decode6BitEA_44
                    5432   Decode6BitEA_9:
                    5433   ; }
                    5434   ; else if(OperandMode == (unsigned char)(1)) {                    // Effective Address = An
00003210  0C05 0001 5435          cmp.b     #1,D5
00003214  6616      5436          bne.s     Decode6BitEA_11
                    5437   ; Decode3BitAddressRegister(OperandRegister) ;
00003216  C67C 00FF 5438          and.w     #255,D3
0000321A  C6BC 0000 5439          and.l     #65535,D3
0000321E  FFFF      
00003220  2F03      5440          move.l    D3,-(A7)
00003222  6100 FCB2 5441          bsr       _Decode3BitAddressRegister
00003226  584F      5442          addq.w    #4,A7
00003228  6000 02DE 5443          bra       Decode6BitEA_44
                    5444   Decode6BitEA_11:
                    5445   ; }
                    5446   ; else if(OperandMode == (unsigned char)(2)) {                    // Effective Address = (An)
0000322C  0C05 0002 5447          cmp.b     #2,D5
00003230  662A      5448          bne.s     Decode6BitEA_13
                    5449   ; strcatInstruction("(") ;
00003232  4879 0000 5450          pea       @m68kde~1_191
00003236  755C      
00003238  4E92      5451          jsr       (A2)
0000323A  584F      5452          addq.w    #4,A7
                    5453   ; Decode3BitAddressRegister(OperandRegister) ;
0000323C  C67C 00FF 5454          and.w     #255,D3
00003240  C6BC 0000 5455          and.l     #65535,D3
00003244  FFFF      
00003246  2F03      5456          move.l    D3,-(A7)
00003248  6100 FC8C 5457          bsr       _Decode3BitAddressRegister
0000324C  584F      5458          addq.w    #4,A7
                    5459   ; strcatInstruction(")") ;
0000324E  4879 0000 5460          pea       @m68kde~1_192
00003252  755E      
00003254  4E92      5461          jsr       (A2)
00003256  584F      5462          addq.w    #4,A7
00003258  6000 02AE 5463          bra       Decode6BitEA_44
                    5464   Decode6BitEA_13:
                    5465   ; }
                    5466   ; else if(OperandMode == (unsigned char)(3)) {                    // Effective Address = (An)+
0000325C  0C05 0003 5467          cmp.b     #3,D5
00003260  662A      5468          bne.s     Decode6BitEA_15
                    5469   ; strcatInstruction("(") ;
00003262  4879 0000 5470          pea       @m68kde~1_193
00003266  7560      
00003268  4E92      5471          jsr       (A2)
0000326A  584F      5472          addq.w    #4,A7
                    5473   ; Decode3BitAddressRegister(OperandRegister) ;
0000326C  C67C 00FF 5474          and.w     #255,D3
00003270  C6BC 0000 5475          and.l     #65535,D3
00003274  FFFF      
00003276  2F03      5476          move.l    D3,-(A7)
00003278  6100 FC5C 5477          bsr       _Decode3BitAddressRegister
0000327C  584F      5478          addq.w    #4,A7
                    5479   ; strcatInstruction(")+") ;
0000327E  4879 0000 5480          pea       @m68kde~1_194
00003282  7562      
00003284  4E92      5481          jsr       (A2)
00003286  584F      5482          addq.w    #4,A7
00003288  6000 027E 5483          bra       Decode6BitEA_44
                    5484   Decode6BitEA_15:
                    5485   ; }
                    5486   ; else if(OperandMode == (unsigned char)(4)) {                    // Effective Address = -(An)
0000328C  0C05 0004 5487          cmp.b     #4,D5
00003290  662A      5488          bne.s     Decode6BitEA_17
                    5489   ; strcatInstruction("-(") ;
00003292  4879 0000 5490          pea       @m68kde~1_195
00003296  7566      
00003298  4E92      5491          jsr       (A2)
0000329A  584F      5492          addq.w    #4,A7
                    5493   ; Decode3BitAddressRegister(OperandRegister) ;
0000329C  C67C 00FF 5494          and.w     #255,D3
000032A0  C6BC 0000 5495          and.l     #65535,D3
000032A4  FFFF      
000032A6  2F03      5496          move.l    D3,-(A7)
000032A8  6100 FC2C 5497          bsr       _Decode3BitAddressRegister
000032AC  584F      5498          addq.w    #4,A7
                    5499   ; strcatInstruction(")") ;
000032AE  4879 0000 5500          pea       @m68kde~1_196
000032B2  756A      
000032B4  4E92      5501          jsr       (A2)
000032B6  584F      5502          addq.w    #4,A7
000032B8  6000 024E 5503          bra       Decode6BitEA_44
                    5504   Decode6BitEA_17:
                    5505   ; }
                    5506   ; else if(OperandMode == (unsigned char)(5)) {                    // Effective Address = (d16, An)
000032BC  0C05 0005 5507          cmp.b     #5,D5
000032C0  6626      5508          bne.s     Decode6BitEA_19
                    5509   ; sprintf(TempString, "%d(A%d)", ExWord1, OperandRegister) ;
000032C2  C6BC 0000 5510          and.l     #255,D3
000032C6  00FF      
000032C8  2F03      5511          move.l    D3,-(A7)
000032CA  48C2      5512          ext.l     D2
000032CC  2F02      5513          move.l    D2,-(A7)
000032CE  4879 0000 5514          pea       @m68kde~1_197
000032D2  756C      
000032D4  2F0B      5515          move.l    A3,-(A7)
000032D6  4E94      5516          jsr       (A4)
000032D8  DEFC 0010 5517          add.w     #16,A7
                    5518   ; strcatInstruction(TempString) ;
000032DC  2F0B      5519          move.l    A3,-(A7)
000032DE  4E92      5520          jsr       (A2)
000032E0  584F      5521          addq.w    #4,A7
                    5522   ; InstructionSize += 1;
000032E2  5295      5523          addq.l    #1,(A5)
000032E4  6000 0222 5524          bra       Decode6BitEA_44
                    5525   Decode6BitEA_19:
                    5526   ; }
                    5527   ; else if(OperandMode == (unsigned char)(6)) {                    // Effective Address = (d8, An, Xn)
000032E8  0C05 0006 5528          cmp.b     #6,D5
000032EC  6600 00AA 5529          bne       Decode6BitEA_21
                    5530   ; offset = ExWord1 & (short int)(0x00FF);
000032F0  3002      5531          move.w    D2,D0
000032F2  C07C 00FF 5532          and.w     #255,D0
000032F6  1D40 FFFD 5533          move.b    D0,-3(A6)
                    5534   ; sprintf(TempString, "%d(A%d,", offset, OperandRegister) ;
000032FA  C6BC 0000 5535          and.l     #255,D3
000032FE  00FF      
00003300  2F03      5536          move.l    D3,-(A7)
00003302  122E FFFD 5537          move.b    -3(A6),D1
00003306  4881      5538          ext.w     D1
00003308  48C1      5539          ext.l     D1
0000330A  2F01      5540          move.l    D1,-(A7)
0000330C  4879 0000 5541          pea       @m68kde~1_198
00003310  7574      
00003312  2F0B      5542          move.l    A3,-(A7)
00003314  4E94      5543          jsr       (A4)
00003316  DEFC 0010 5544          add.w     #16,A7
                    5545   ; strcatInstruction(TempString) ;
0000331A  2F0B      5546          move.l    A3,-(A7)
0000331C  4E92      5547          jsr       (A2)
0000331E  584F      5548          addq.w    #4,A7
                    5549   ; InstructionSize += 1;
00003320  5295      5550          addq.l    #1,(A5)
                    5551   ; // decode the Xn bit
                    5552   ; if((ExWord1 & (unsigned short int)(0x8000)) == (unsigned short int)(0x0000))
00003322  3002      5553          move.w    D2,D0
00003324  C07C 8000 5554          and.w     #32768,D0
00003328  660C      5555          bne.s     Decode6BitEA_23
                    5556   ; strcatInstruction("D") ;
0000332A  4879 0000 5557          pea       @m68kde~1_199
0000332E  757C      
00003330  4E92      5558          jsr       (A2)
00003332  584F      5559          addq.w    #4,A7
00003334  600A      5560          bra.s     Decode6BitEA_24
                    5561   Decode6BitEA_23:
                    5562   ; else
                    5563   ; strcatInstruction("A") ;
00003336  4879 0000 5564          pea       @m68kde~1_200
0000333A  757E      
0000333C  4E92      5565          jsr       (A2)
0000333E  584F      5566          addq.w    #4,A7
                    5567   Decode6BitEA_24:
                    5568   ; Xn = (ExWord1 & (unsigned short int)(0x7000)) >> 12 ;        // get Xn register Number into bits 2,1,0
00003340  3002      5569          move.w    D2,D0
00003342  C07C 7000 5570          and.w     #28672,D0
00003346  E048      5571          lsr.w     #8,D0
00003348  E848      5572          lsr.w     #4,D0
0000334A  3D40 FFFE 5573          move.w    D0,-2(A6)
                    5574   ; sprintf(TempString, "%d",Xn) ;                               // generate string for reg number 0 -7
0000334E  322E FFFE 5575          move.w    -2(A6),D1
00003352  C2BC 0000 5576          and.l     #65535,D1
00003356  FFFF      
00003358  2F01      5577          move.l    D1,-(A7)
0000335A  4879 0000 5578          pea       @m68kde~1_201
0000335E  7580      
00003360  2F0B      5579          move.l    A3,-(A7)
00003362  4E94      5580          jsr       (A4)
00003364  DEFC 000C 5581          add.w     #12,A7
                    5582   ; strcatInstruction(TempString) ;
00003368  2F0B      5583          move.l    A3,-(A7)
0000336A  4E92      5584          jsr       (A2)
0000336C  584F      5585          addq.w    #4,A7
                    5586   ; XnSize = (ExWord1 & (unsigned short int)(0x0800)) >> 11 ;    // get xn size into bit 0
0000336E  3002      5587          move.w    D2,D0
00003370  C07C 0800 5588          and.w     #2048,D0
00003374  E048      5589          lsr.w     #8,D0
00003376  E648      5590          lsr.w     #3,D0
00003378  3E00      5591          move.w    D0,D7
                    5592   ; if(XnSize == 0)
0000337A  4A47      5593          tst.w     D7
0000337C  660C      5594          bne.s     Decode6BitEA_25
                    5595   ; strcatInstruction(".W)") ;
0000337E  4879 0000 5596          pea       @m68kde~1_202
00003382  7584      
00003384  4E92      5597          jsr       (A2)
00003386  584F      5598          addq.w    #4,A7
00003388  600A      5599          bra.s     Decode6BitEA_26
                    5600   Decode6BitEA_25:
                    5601   ; else
                    5602   ; strcatInstruction(".L)") ;
0000338A  4879 0000 5603          pea       @m68kde~1_203
0000338E  7588      
00003390  4E92      5604          jsr       (A2)
00003392  584F      5605          addq.w    #4,A7
                    5606   Decode6BitEA_26:
00003394  6000 0172 5607          bra       Decode6BitEA_44
                    5608   Decode6BitEA_21:
                    5609   ; }
                    5610   ; else if(OperandMode == (unsigned char)(7)) {
00003398  0C05 0007 5611          cmp.b     #7,D5
0000339C  6600 016A 5612          bne       Decode6BitEA_44
                    5613   ; if(OperandRegister == 0) {                               // EA = (xxx).W
000033A0  C6BC 0000 5614          and.l     #255,D3
000033A4  00FF      
000033A6  661E      5615          bne.s     Decode6BitEA_29
                    5616   ; sprintf(TempString, "$%X", ExWord1) ;
000033A8  48C2      5617          ext.l     D2
000033AA  2F02      5618          move.l    D2,-(A7)
000033AC  4879 0000 5619          pea       @m68kde~1_204
000033B0  758C      
000033B2  2F0B      5620          move.l    A3,-(A7)
000033B4  4E94      5621          jsr       (A4)
000033B6  DEFC 000C 5622          add.w     #12,A7
                    5623   ; strcatInstruction(TempString) ;
000033BA  2F0B      5624          move.l    A3,-(A7)
000033BC  4E92      5625          jsr       (A2)
000033BE  584F      5626          addq.w    #4,A7
                    5627   ; InstructionSize += 1;
000033C0  5295      5628          addq.l    #1,(A5)
000033C2  6000 0144 5629          bra       Decode6BitEA_44
                    5630   Decode6BitEA_29:
                    5631   ; }
                    5632   ; else if(OperandRegister == 1)   {                         // EA = (xxx).L
000033C6  C6BC 0000 5633          and.l     #255,D3
000033CA  00FF      
000033CC  0C83 0000 5634          cmp.l     #1,D3
000033D0  0001      
000033D2  6600 0032 5635          bne       Decode6BitEA_31
                    5636   ; sprintf(TempString, "$%X", ((unsigned int)(ExWord1) << 16) | (unsigned int)(ExWord2)); // create 32 bit address
000033D6  3202      5637          move.w    D2,D1
000033D8  48C1      5638          ext.l     D1
000033DA  E189      5639          lsl.l     #8,D1
000033DC  E189      5640          lsl.l     #8,D1
000033DE  2F00      5641          move.l    D0,-(A7)
000033E0  302E FFF8 5642          move.w    -8(A6),D0
000033E4  48C0      5643          ext.l     D0
000033E6  8280      5644          or.l      D0,D1
000033E8  201F      5645          move.l    (A7)+,D0
000033EA  2F01      5646          move.l    D1,-(A7)
000033EC  4879 0000 5647          pea       @m68kde~1_205
000033F0  7590      
000033F2  2F0B      5648          move.l    A3,-(A7)
000033F4  4E94      5649          jsr       (A4)
000033F6  DEFC 000C 5650          add.w     #12,A7
                    5651   ; strcatInstruction(TempString) ;
000033FA  2F0B      5652          move.l    A3,-(A7)
000033FC  4E92      5653          jsr       (A2)
000033FE  584F      5654          addq.w    #4,A7
                    5655   ; InstructionSize += 2;
00003400  5495      5656          addq.l    #2,(A5)
00003402  6000 0104 5657          bra       Decode6BitEA_44
                    5658   Decode6BitEA_31:
                    5659   ; }
                    5660   ; else if(OperandRegister == 4) {                                 // source EA = #Immediate addressing
00003406  C6BC 0000 5661          and.l     #255,D3
0000340A  00FF      
0000340C  0C83 0000 5662          cmp.l     #4,D3
00003410  0004      
00003412  661C      5663          bne.s     Decode6BitEA_33
                    5664   ; if(IsItMoveInstruction == 0)        //not move instruction
00003414  302E 0016 5665          move.w    22(A6),D0
00003418  660A      5666          bne.s     Decode6BitEA_35
                    5667   ; DecodeBWLDataAfterOpCode(OpCode);
0000341A  2F04      5668          move.l    D4,-(A7)
0000341C  6100 FBB0 5669          bsr       _DecodeBWLDataAfterOpCode
00003420  584F      5670          addq.w    #4,A7
00003422  6008      5671          bra.s     Decode6BitEA_36
                    5672   Decode6BitEA_35:
                    5673   ; else
                    5674   ; DecodeBWLDataAfterOpCodeForMove(OpCode);
00003424  2F04      5675          move.l    D4,-(A7)
00003426  6100 FADE 5676          bsr       _DecodeBWLDataAfterOpCodeForMove
0000342A  584F      5677          addq.w    #4,A7
                    5678   Decode6BitEA_36:
0000342C  6000 00DA 5679          bra       Decode6BitEA_44
                    5680   Decode6BitEA_33:
                    5681   ; }
                    5682   ; else if(OperandRegister == 2) {                                 // source EA = (d16,PC)
00003430  C6BC 0000 5683          and.l     #255,D3
00003434  00FF      
00003436  0C83 0000 5684          cmp.l     #2,D3
0000343A  0002      
0000343C  661E      5685          bne.s     Decode6BitEA_37
                    5686   ; sprintf(TempString, "%d(PC)", ExWord1) ;
0000343E  48C2      5687          ext.l     D2
00003440  2F02      5688          move.l    D2,-(A7)
00003442  4879 0000 5689          pea       @m68kde~1_206
00003446  7594      
00003448  2F0B      5690          move.l    A3,-(A7)
0000344A  4E94      5691          jsr       (A4)
0000344C  DEFC 000C 5692          add.w     #12,A7
                    5693   ; strcatInstruction(TempString) ;
00003450  2F0B      5694          move.l    A3,-(A7)
00003452  4E92      5695          jsr       (A2)
00003454  584F      5696          addq.w    #4,A7
                    5697   ; InstructionSize += 1;
00003456  5295      5698          addq.l    #1,(A5)
00003458  6000 00AE 5699          bra       Decode6BitEA_44
                    5700   Decode6BitEA_37:
                    5701   ; }
                    5702   ; else if(OperandRegister == 3) {                                 // source EA = (d8,PC, Xn)
0000345C  C6BC 0000 5703          and.l     #255,D3
00003460  00FF      
00003462  0C83 0000 5704          cmp.l     #3,D3
00003466  0003      
00003468  6600 009E 5705          bne       Decode6BitEA_44
                    5706   ; offset = ExWord1 & (short int)(0x00FF);
0000346C  3002      5707          move.w    D2,D0
0000346E  C07C 00FF 5708          and.w     #255,D0
00003472  1D40 FFFD 5709          move.b    D0,-3(A6)
                    5710   ; sprintf(TempString, "%d(PC,", offset ) ;
00003476  122E FFFD 5711          move.b    -3(A6),D1
0000347A  4881      5712          ext.w     D1
0000347C  48C1      5713          ext.l     D1
0000347E  2F01      5714          move.l    D1,-(A7)
00003480  4879 0000 5715          pea       @m68kde~1_207
00003484  759C      
00003486  2F0B      5716          move.l    A3,-(A7)
00003488  4E94      5717          jsr       (A4)
0000348A  DEFC 000C 5718          add.w     #12,A7
                    5719   ; strcatInstruction(TempString) ;
0000348E  2F0B      5720          move.l    A3,-(A7)
00003490  4E92      5721          jsr       (A2)
00003492  584F      5722          addq.w    #4,A7
                    5723   ; InstructionSize += 1;
00003494  5295      5724          addq.l    #1,(A5)
                    5725   ; // decode the Xn bit
                    5726   ; if((ExWord1 & (unsigned short int)(0x8000)) == (unsigned short int)(0x0000))
00003496  3002      5727          move.w    D2,D0
00003498  C07C 8000 5728          and.w     #32768,D0
0000349C  660C      5729          bne.s     Decode6BitEA_41
                    5730   ; strcatInstruction("D") ;
0000349E  4879 0000 5731          pea       @m68kde~1_208
000034A2  75A4      
000034A4  4E92      5732          jsr       (A2)
000034A6  584F      5733          addq.w    #4,A7
000034A8  600A      5734          bra.s     Decode6BitEA_42
                    5735   Decode6BitEA_41:
                    5736   ; else
                    5737   ; strcatInstruction("A") ;
000034AA  4879 0000 5738          pea       @m68kde~1_209
000034AE  75A6      
000034B0  4E92      5739          jsr       (A2)
000034B2  584F      5740          addq.w    #4,A7
                    5741   Decode6BitEA_42:
                    5742   ; Xn = (ExWord1 & (unsigned short int)(0x7000)) >> 12 ;        // get Xn register Number into bits 2,1,0
000034B4  3002      5743          move.w    D2,D0
000034B6  C07C 7000 5744          and.w     #28672,D0
000034BA  E048      5745          lsr.w     #8,D0
000034BC  E848      5746          lsr.w     #4,D0
000034BE  3D40 FFFE 5747          move.w    D0,-2(A6)
                    5748   ; sprintf(TempString, "%d",Xn) ;                               // generate string for reg number 0 -7
000034C2  322E FFFE 5749          move.w    -2(A6),D1
000034C6  C2BC 0000 5750          and.l     #65535,D1
000034CA  FFFF      
000034CC  2F01      5751          move.l    D1,-(A7)
000034CE  4879 0000 5752          pea       @m68kde~1_210
000034D2  75A8      
000034D4  2F0B      5753          move.l    A3,-(A7)
000034D6  4E94      5754          jsr       (A4)
000034D8  DEFC 000C 5755          add.w     #12,A7
                    5756   ; strcatInstruction(TempString) ;
000034DC  2F0B      5757          move.l    A3,-(A7)
000034DE  4E92      5758          jsr       (A2)
000034E0  584F      5759          addq.w    #4,A7
                    5760   ; XnSize = (ExWord1 & (unsigned short int)(0x0800)) >> 11 ;    // get xn size into bit 0
000034E2  3002      5761          move.w    D2,D0
000034E4  C07C 0800 5762          and.w     #2048,D0
000034E8  E048      5763          lsr.w     #8,D0
000034EA  E648      5764          lsr.w     #3,D0
000034EC  3E00      5765          move.w    D0,D7
                    5766   ; if(XnSize == 0)
000034EE  4A47      5767          tst.w     D7
000034F0  660C      5768          bne.s     Decode6BitEA_43
                    5769   ; strcatInstruction(".W)") ;
000034F2  4879 0000 5770          pea       @m68kde~1_211
000034F6  75AC      
000034F8  4E92      5771          jsr       (A2)
000034FA  584F      5772          addq.w    #4,A7
000034FC  600A      5773          bra.s     Decode6BitEA_44
                    5774   Decode6BitEA_43:
                    5775   ; else
                    5776   ; strcatInstruction(".L)") ;
000034FE  4879 0000 5777          pea       @m68kde~1_212
00003502  75B0      
00003504  4E92      5778          jsr       (A2)
00003506  584F      5779          addq.w    #4,A7
                    5780   Decode6BitEA_44:
00003508  4CDF 3CFC 5781          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
0000350C  4E5E      5782          unlk      A6
0000350E  4E75      5783          rts
                    5784   ; }
                    5785   ; }
                    5786   ; }
                    5787   ; void Decode3BitOperandMode(unsigned short int *OpCode)               // used with instructions like ADD determines source/destination
                    5788   ; {
                    5789   _Decode3BitOperandMode:
00003510  4E56 FFFC 5790          link      A6,#-4
00003514  48E7 2000 5791          movem.l   D2,-(A7)
00003518  242E 0008 5792          move.l    8(A6),D2
                    5793   ; unsigned short int OperandMode;
                    5794   ; OperandMode = (*OpCode & (unsigned short int)(0x0100)) >> 8 ;    // get bit 8 into position 0, defines source and destination
0000351C  2042      5795          move.l    D2,A0
0000351E  3010      5796          move.w    (A0),D0
00003520  C07C 0100 5797          and.w     #256,D0
00003524  E048      5798          lsr.w     #8,D0
00003526  3D40 FFFE 5799          move.w    D0,-2(A6)
                    5800   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
0000352A  2042      5801          move.l    D2,A0
0000352C  3210      5802          move.w    (A0),D1
0000352E  C2BC 0000 5803          and.l     #65535,D1
00003532  FFFF      
00003534  2F01      5804          move.l    D1,-(A7)
00003536  6100 F90A 5805          bsr       _Decode2BitOperandSize
0000353A  584F      5806          addq.w    #4,A7
                    5807   ; if(OperandMode == 0)     {                                      // Destination is a Data Register
0000353C  302E FFFE 5808          move.w    -2(A6),D0
00003540  6600 0032 5809          bne       Decode3BitOperandMode_1
                    5810   ; Decode6BitEA(OpCode,0,0,0) ;
00003544  42A7      5811          clr.l     -(A7)
00003546  42A7      5812          clr.l     -(A7)
00003548  42A7      5813          clr.l     -(A7)
0000354A  2F02      5814          move.l    D2,-(A7)
0000354C  6100 FB90 5815          bsr       _Decode6BitEA
00003550  DEFC 0010 5816          add.w     #16,A7
                    5817   ; strcatInstruction(",") ;
00003554  4879 0000 5818          pea       @m68kde~1_213
00003558  75B4      
0000355A  6100 D7B6 5819          bsr       _strcatInstruction
0000355E  584F      5820          addq.w    #4,A7
                    5821   ; Decode3BitDataRegister(*OpCode) ;
00003560  2042      5822          move.l    D2,A0
00003562  3210      5823          move.w    (A0),D1
00003564  C2BC 0000 5824          and.l     #65535,D1
00003568  FFFF      
0000356A  2F01      5825          move.l    D1,-(A7)
0000356C  6100 F930 5826          bsr       _Decode3BitDataRegister
00003570  584F      5827          addq.w    #4,A7
00003572  602E      5828          bra.s     Decode3BitOperandMode_2
                    5829   Decode3BitOperandMode_1:
                    5830   ; }
                    5831   ; else {                                                         // Destination is in EA
                    5832   ; Decode3BitDataRegister(*OpCode) ;
00003574  2042      5833          move.l    D2,A0
00003576  3210      5834          move.w    (A0),D1
00003578  C2BC 0000 5835          and.l     #65535,D1
0000357C  FFFF      
0000357E  2F01      5836          move.l    D1,-(A7)
00003580  6100 F91C 5837          bsr       _Decode3BitDataRegister
00003584  584F      5838          addq.w    #4,A7
                    5839   ; strcatInstruction(",") ;
00003586  4879 0000 5840          pea       @m68kde~1_214
0000358A  75B6      
0000358C  6100 D784 5841          bsr       _strcatInstruction
00003590  584F      5842          addq.w    #4,A7
                    5843   ; Decode6BitEA(OpCode,0,0,0) ;
00003592  42A7      5844          clr.l     -(A7)
00003594  42A7      5845          clr.l     -(A7)
00003596  42A7      5846          clr.l     -(A7)
00003598  2F02      5847          move.l    D2,-(A7)
0000359A  6100 FB42 5848          bsr       _Decode6BitEA
0000359E  DEFC 0010 5849          add.w     #16,A7
                    5850   Decode3BitOperandMode_2:
000035A2  4CDF 0004 5851          movem.l   (A7)+,D2
000035A6  4E5E      5852          unlk      A6
000035A8  4E75      5853          rts
                    5854   ; }
                    5855   ; }
                    5856   ; void DecodeBranchCondition(unsigned short int Condition)
                    5857   ; {
                    5858   _DecodeBranchCondition:
000035AA  4E56 0000 5859          link      A6,#0
000035AE  48E7 2020 5860          movem.l   D2/A2,-(A7)
000035B2  45F8 0D12 5861          lea       _strcatInstruction,A2
000035B6  342E 000A 5862          move.w    10(A6),D2
000035BA  C4BC 0000 5863          and.l     #65535,D2
000035BE  FFFF      
                    5864   ; if(Condition == (unsigned short int)(0x04))
000035C0  0C42 0004 5865          cmp.w     #4,D2
000035C4  660E      5866          bne.s     DecodeBranchCondition_1
                    5867   ; strcatInstruction("CC") ;
000035C6  4879 0000 5868          pea       @m68kde~1_215
000035CA  75B8      
000035CC  4E92      5869          jsr       (A2)
000035CE  584F      5870          addq.w    #4,A7
000035D0  6000 011C 5871          bra       DecodeBranchCondition_30
                    5872   DecodeBranchCondition_1:
                    5873   ; else if(Condition == (unsigned short int)(0x05))
000035D4  0C42 0005 5874          cmp.w     #5,D2
000035D8  660E      5875          bne.s     DecodeBranchCondition_3
                    5876   ; strcatInstruction("CS") ;
000035DA  4879 0000 5877          pea       @m68kde~1_216
000035DE  75BC      
000035E0  4E92      5878          jsr       (A2)
000035E2  584F      5879          addq.w    #4,A7
000035E4  6000 0108 5880          bra       DecodeBranchCondition_30
                    5881   DecodeBranchCondition_3:
                    5882   ; else if(Condition == (unsigned short int)(0x07))
000035E8  0C42 0007 5883          cmp.w     #7,D2
000035EC  660E      5884          bne.s     DecodeBranchCondition_5
                    5885   ; strcatInstruction("EQ") ;
000035EE  4879 0000 5886          pea       @m68kde~1_217
000035F2  75C0      
000035F4  4E92      5887          jsr       (A2)
000035F6  584F      5888          addq.w    #4,A7
000035F8  6000 00F4 5889          bra       DecodeBranchCondition_30
                    5890   DecodeBranchCondition_5:
                    5891   ; else if(Condition == (unsigned short int)(0x0C))
000035FC  0C42 000C 5892          cmp.w     #12,D2
00003600  660E      5893          bne.s     DecodeBranchCondition_7
                    5894   ; strcatInstruction("GE") ;
00003602  4879 0000 5895          pea       @m68kde~1_218
00003606  75C4      
00003608  4E92      5896          jsr       (A2)
0000360A  584F      5897          addq.w    #4,A7
0000360C  6000 00E0 5898          bra       DecodeBranchCondition_30
                    5899   DecodeBranchCondition_7:
                    5900   ; else if(Condition == (unsigned short int)(0x0E))
00003610  0C42 000E 5901          cmp.w     #14,D2
00003614  660E      5902          bne.s     DecodeBranchCondition_9
                    5903   ; strcatInstruction("GT") ;
00003616  4879 0000 5904          pea       @m68kde~1_219
0000361A  75C8      
0000361C  4E92      5905          jsr       (A2)
0000361E  584F      5906          addq.w    #4,A7
00003620  6000 00CC 5907          bra       DecodeBranchCondition_30
                    5908   DecodeBranchCondition_9:
                    5909   ; else if(Condition == (unsigned short int)(0x02))
00003624  0C42 0002 5910          cmp.w     #2,D2
00003628  660E      5911          bne.s     DecodeBranchCondition_11
                    5912   ; strcatInstruction("HI") ;
0000362A  4879 0000 5913          pea       @m68kde~1_220
0000362E  75CC      
00003630  4E92      5914          jsr       (A2)
00003632  584F      5915          addq.w    #4,A7
00003634  6000 00B8 5916          bra       DecodeBranchCondition_30
                    5917   DecodeBranchCondition_11:
                    5918   ; else if(Condition == (unsigned short int)(0x0F))
00003638  0C42 000F 5919          cmp.w     #15,D2
0000363C  660E      5920          bne.s     DecodeBranchCondition_13
                    5921   ; strcatInstruction("LE") ;
0000363E  4879 0000 5922          pea       @m68kde~1_221
00003642  75D0      
00003644  4E92      5923          jsr       (A2)
00003646  584F      5924          addq.w    #4,A7
00003648  6000 00A4 5925          bra       DecodeBranchCondition_30
                    5926   DecodeBranchCondition_13:
                    5927   ; else if(Condition == (unsigned short int)(0x03))
0000364C  0C42 0003 5928          cmp.w     #3,D2
00003650  660E      5929          bne.s     DecodeBranchCondition_15
                    5930   ; strcatInstruction("LS") ;
00003652  4879 0000 5931          pea       @m68kde~1_222
00003656  75D4      
00003658  4E92      5932          jsr       (A2)
0000365A  584F      5933          addq.w    #4,A7
0000365C  6000 0090 5934          bra       DecodeBranchCondition_30
                    5935   DecodeBranchCondition_15:
                    5936   ; else if(Condition == (unsigned short int)(0x0D))
00003660  0C42 000D 5937          cmp.w     #13,D2
00003664  660E      5938          bne.s     DecodeBranchCondition_17
                    5939   ; strcatInstruction("LT") ;
00003666  4879 0000 5940          pea       @m68kde~1_223
0000366A  75D8      
0000366C  4E92      5941          jsr       (A2)
0000366E  584F      5942          addq.w    #4,A7
00003670  6000 007C 5943          bra       DecodeBranchCondition_30
                    5944   DecodeBranchCondition_17:
                    5945   ; else if(Condition == (unsigned short int)(0x0B))
00003674  0C42 000B 5946          cmp.w     #11,D2
00003678  660E      5947          bne.s     DecodeBranchCondition_19
                    5948   ; strcatInstruction("MI") ;
0000367A  4879 0000 5949          pea       @m68kde~1_224
0000367E  75DC      
00003680  4E92      5950          jsr       (A2)
00003682  584F      5951          addq.w    #4,A7
00003684  6000 0068 5952          bra       DecodeBranchCondition_30
                    5953   DecodeBranchCondition_19:
                    5954   ; else if(Condition == (unsigned short int)(0x06))
00003688  0C42 0006 5955          cmp.w     #6,D2
0000368C  660E      5956          bne.s     DecodeBranchCondition_21
                    5957   ; strcatInstruction("NE") ;
0000368E  4879 0000 5958          pea       @m68kde~1_225
00003692  75E0      
00003694  4E92      5959          jsr       (A2)
00003696  584F      5960          addq.w    #4,A7
00003698  6000 0054 5961          bra       DecodeBranchCondition_30
                    5962   DecodeBranchCondition_21:
                    5963   ; else if(Condition == (unsigned short int)(0x0A))
0000369C  0C42 000A 5964          cmp.w     #10,D2
000036A0  660E      5965          bne.s     DecodeBranchCondition_23
                    5966   ; strcatInstruction("PL") ;
000036A2  4879 0000 5967          pea       @m68kde~1_226
000036A6  75E4      
000036A8  4E92      5968          jsr       (A2)
000036AA  584F      5969          addq.w    #4,A7
000036AC  6000 0040 5970          bra       DecodeBranchCondition_30
                    5971   DecodeBranchCondition_23:
                    5972   ; else if(Condition == (unsigned short int)(0x09))
000036B0  0C42 0009 5973          cmp.w     #9,D2
000036B4  660C      5974          bne.s     DecodeBranchCondition_25
                    5975   ; strcatInstruction("VS") ;
000036B6  4879 0000 5976          pea       @m68kde~1_227
000036BA  75E8      
000036BC  4E92      5977          jsr       (A2)
000036BE  584F      5978          addq.w    #4,A7
000036C0  602C      5979          bra.s     DecodeBranchCondition_30
                    5980   DecodeBranchCondition_25:
                    5981   ; else if(Condition == (unsigned short int)(0x08))
000036C2  0C42 0008 5982          cmp.w     #8,D2
000036C6  660C      5983          bne.s     DecodeBranchCondition_27
                    5984   ; strcatInstruction("VC") ;
000036C8  4879 0000 5985          pea       @m68kde~1_228
000036CC  75EC      
000036CE  4E92      5986          jsr       (A2)
000036D0  584F      5987          addq.w    #4,A7
000036D2  601A      5988          bra.s     DecodeBranchCondition_30
                    5989   DecodeBranchCondition_27:
                    5990   ; else if(Condition == (unsigned short int)(0))
000036D4  4A42      5991          tst.w     D2
000036D6  660C      5992          bne.s     DecodeBranchCondition_29
                    5993   ; strcatInstruction("RA") ;
000036D8  4879 0000 5994          pea       @m68kde~1_229
000036DC  75F0      
000036DE  4E92      5995          jsr       (A2)
000036E0  584F      5996          addq.w    #4,A7
000036E2  600A      5997          bra.s     DecodeBranchCondition_30
                    5998   DecodeBranchCondition_29:
                    5999   ; else
                    6000   ; strcatInstruction("SR");
000036E4  4879 0000 6001          pea       @m68kde~1_230
000036E8  75F4      
000036EA  4E92      6002          jsr       (A2)
000036EC  584F      6003          addq.w    #4,A7
                    6004   DecodeBranchCondition_30:
                    6005   ; strcatInstruction(" ") ;
000036EE  4879 0000 6006          pea       @m68kde~1_231
000036F2  75F8      
000036F4  4E92      6007          jsr       (A2)
000036F6  584F      6008          addq.w    #4,A7
000036F8  4CDF 0404 6009          movem.l   (A7)+,D2/A2
000036FC  4E5E      6010          unlk      A6
000036FE  4E75      6011          rts
                    6012   ; }
                    6013   ; void DisassembleInstruction( short int *OpCode)         // pointer to Opcode
                    6014   ; {
                    6015   _DisassembleInstruction:
00003700  4E56 FFD8 6016          link      A6,#-40
00003704  48E7 3F3C 6017          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003708  242E 0008 6018          move.l    8(A6),D2
0000370C  45F9 0084 6019          lea       _InstructionSize,A2
00003710  0178      
00003712  47F8 0D2A 6020          lea       _strcpyInstruction,A3
00003716  49F9 0084 6021          lea       _TempString,A4
0000371A  0540      
0000371C  4BF9 0000 6022          lea       _sprintf,A5
00003720  5700      
                    6023   ; unsigned short int MSBits = (*OpCode >> 12);    //mask off the lower 12 bits leaving top 4 bit to analyse
00003722  2042      6024          move.l    D2,A0
00003724  3010      6025          move.w    (A0),D0
00003726  48C0      6026          ext.l     D0
00003728  E080      6027          asr.l     #8,D0
0000372A  E880      6028          asr.l     #4,D0
0000372C  3D40 FFDA 6029          move.w    D0,-38(A6)
                    6030   ; unsigned short int LS12Bits = (OpCode & (unsigned short int)(0x0FFF));
00003730  2002      6031          move.l    D2,D0
00003732  323C 0FFF 6032          move.w    #4095,D1
00003736  C2BC 0000 6033          and.l     #65535,D1
0000373A  FFFF      
0000373C  C081      6034          and.l     D1,D0
0000373E  3D40 FFDC 6035          move.w    D0,-36(A6)
                    6036   ; unsigned short int SourceBits, DestBits, Size ;
                    6037   ; unsigned char *Mode, Condition;
                    6038   ; unsigned short int Register, OpMode, EAMode, EARegister, Rx, Ry, EXGOpMode, DataSize, SourceReg;
                    6039   ; unsigned short int DataRegister, AddressRegister;
                    6040   ; signed char Displacement8Bit ;  // used for Bcc type instruction signed 8 bit displacement
                    6041   ; signed short int Displacement16Bit;
                    6042   ; short int Mask, DoneSlash;
                    6043   ; int i;
                    6044   ; strcpyInstruction("Unknown") ;
00003742  4879 0000 6045          pea       @m68kde~1_232
00003746  75FA      
00003748  4E93      6046          jsr       (A3)
0000374A  584F      6047          addq.w    #4,A7
                    6048   ; /////////////////////////////////////////////////////////////////////////////////
                    6049   ; // if instruction is ABCD
                    6050   ; /////////////////////////////////////////////////////////////////////////////////
                    6051   ; if((*OpCode & (unsigned short int)(0xF1F0 )) == (unsigned short int)(0xC100))   {
0000374C  2042      6052          move.l    D2,A0
0000374E  3010      6053          move.w    (A0),D0
00003750  C07C F1F0 6054          and.w     #61936,D0
00003754  0C40 C100 6055          cmp.w     #49408,D0
00003758  6600 008E 6056          bne       DisassembleInstruction_4
                    6057   ; DestBits = (*OpCode >> 9) & (unsigned short int )(0x0007) ;
0000375C  2042      6058          move.l    D2,A0
0000375E  3010      6059          move.w    (A0),D0
00003760  48C0      6060          ext.l     D0
00003762  E080      6061          asr.l     #8,D0
00003764  E280      6062          asr.l     #1,D0
00003766  C07C 0007 6063          and.w     #7,D0
0000376A  3D40 FFE0 6064          move.w    D0,-32(A6)
                    6065   ; SourceBits = (*OpCode & (unsigned short int )(0x0007));
0000376E  2042      6066          move.l    D2,A0
00003770  3010      6067          move.w    (A0),D0
00003772  C07C 0007 6068          and.w     #7,D0
00003776  3D40 FFDE 6069          move.w    D0,-34(A6)
                    6070   ; Mode = (*OpCode >> 3) & (unsigned short int )(0x0001) ;
0000377A  2042      6071          move.l    D2,A0
0000377C  3010      6072          move.w    (A0),D0
0000377E  48C0      6073          ext.l     D0
00003780  E680      6074          asr.l     #3,D0
00003782  C0BC 0000 6075          and.l     #1,D0
00003786  0001      
00003788  2D40 FFE4 6076          move.l    D0,-28(A6)
                    6077   ; if(Mode == 0)
0000378C  202E FFE4 6078          move.l    -28(A6),D0
00003790  662C      6079          bne.s     DisassembleInstruction_3
                    6080   ; sprintf(Instruction, "ABCD D%d,D%d", SourceBits, DestBits) ;
00003792  322E FFE0 6081          move.w    -32(A6),D1
00003796  C2BC 0000 6082          and.l     #65535,D1
0000379A  FFFF      
0000379C  2F01      6083          move.l    D1,-(A7)
0000379E  322E FFDE 6084          move.w    -34(A6),D1
000037A2  C2BC 0000 6085          and.l     #65535,D1
000037A6  FFFF      
000037A8  2F01      6086          move.l    D1,-(A7)
000037AA  4879 0000 6087          pea       @m68kde~1_233
000037AE  7602      
000037B0  4879 0084 6088          pea       _Instruction
000037B4  04DC      
000037B6  4E95      6089          jsr       (A5)
000037B8  DEFC 0010 6090          add.w     #16,A7
000037BC  602A      6091          bra.s     DisassembleInstruction_4
                    6092   DisassembleInstruction_3:
                    6093   ; else
                    6094   ; sprintf(Instruction, "ABCD -(A%d),-(A%d)", SourceBits, DestBits) ;
000037BE  322E FFE0 6095          move.w    -32(A6),D1
000037C2  C2BC 0000 6096          and.l     #65535,D1
000037C6  FFFF      
000037C8  2F01      6097          move.l    D1,-(A7)
000037CA  322E FFDE 6098          move.w    -34(A6),D1
000037CE  C2BC 0000 6099          and.l     #65535,D1
000037D2  FFFF      
000037D4  2F01      6100          move.l    D1,-(A7)
000037D6  4879 0000 6101          pea       @m68kde~1_234
000037DA  7610      
000037DC  4879 0084 6102          pea       _Instruction
000037E0  04DC      
000037E2  4E95      6103          jsr       (A5)
000037E4  DEFC 0010 6104          add.w     #16,A7
                    6105   DisassembleInstruction_4:
                    6106   ; }
                    6107   ; /////////////////////////////////////////////////////////////////////////////////
                    6108   ; // if instruction is ADD or ADDA
                    6109   ; /////////////////////////////////////////////////////////////////////////////////
                    6110   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xD000))   {
000037E8  2042      6111          move.l    D2,A0
000037EA  3010      6112          move.w    (A0),D0
000037EC  C07C F000 6113          and.w     #61440,D0
000037F0  0C40 D000 6114          cmp.w     #53248,D0
000037F4  6600 0090 6115          bne       DisassembleInstruction_8
                    6116   ; InstructionSize = 1;
000037F8  24BC 0000 6117          move.l    #1,(A2)
000037FC  0001      
                    6118   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0007)) ;
000037FE  2042      6119          move.l    D2,A0
00003800  3010      6120          move.w    (A0),D0
00003802  48C0      6121          ext.l     D0
00003804  EC80      6122          asr.l     #6,D0
00003806  C07C 0007 6123          and.w     #7,D0
0000380A  3600      6124          move.w    D0,D3
                    6125   ; if( (OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))      // if destination is an address register then use ADDA otherwise use ADD
0000380C  0C43 0003 6126          cmp.w     #3,D3
00003810  6708      6127          beq.s     DisassembleInstruction_9
00003812  0C43 0007 6128          cmp.w     #7,D3
00003816  6600 005C 6129          bne       DisassembleInstruction_7
                    6130   DisassembleInstruction_9:
                    6131   ; {
                    6132   ; if(OpMode == (unsigned short int)(0x0003))
0000381A  0C43 0003 6133          cmp.w     #3,D3
0000381E  660C      6134          bne.s     DisassembleInstruction_10
                    6135   ; strcpyInstruction("ADDA.W ") ;
00003820  4879 0000 6136          pea       @m68kde~1_235
00003824  7624      
00003826  4E93      6137          jsr       (A3)
00003828  584F      6138          addq.w    #4,A7
0000382A  600A      6139          bra.s     DisassembleInstruction_11
                    6140   DisassembleInstruction_10:
                    6141   ; else
                    6142   ; strcpyInstruction("ADDA.L ") ;
0000382C  4879 0000 6143          pea       @m68kde~1_236
00003830  762C      
00003832  4E93      6144          jsr       (A3)
00003834  584F      6145          addq.w    #4,A7
                    6146   DisassembleInstruction_11:
                    6147   ; Decode6BitEA(OpCode,0,0,0)  ;
00003836  42A7      6148          clr.l     -(A7)
00003838  42A7      6149          clr.l     -(A7)
0000383A  42A7      6150          clr.l     -(A7)
0000383C  2F02      6151          move.l    D2,-(A7)
0000383E  6100 F89E 6152          bsr       _Decode6BitEA
00003842  DEFC 0010 6153          add.w     #16,A7
                    6154   ; sprintf(TempString, ",A%X", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00003846  2042      6155          move.l    D2,A0
00003848  3210      6156          move.w    (A0),D1
0000384A  48C1      6157          ext.l     D1
0000384C  E081      6158          asr.l     #8,D1
0000384E  E281      6159          asr.l     #1,D1
00003850  C27C 0007 6160          and.w     #7,D1
00003854  C2BC 0000 6161          and.l     #65535,D1
00003858  FFFF      
0000385A  2F01      6162          move.l    D1,-(A7)
0000385C  4879 0000 6163          pea       @m68kde~1_237
00003860  7634      
00003862  2F0C      6164          move.l    A4,-(A7)
00003864  4E95      6165          jsr       (A5)
00003866  DEFC 000C 6166          add.w     #12,A7
                    6167   ; strcatInstruction(TempString) ;
0000386A  2F0C      6168          move.l    A4,-(A7)
0000386C  6100 D4A4 6169          bsr       _strcatInstruction
00003870  584F      6170          addq.w    #4,A7
00003872  6012      6171          bra.s     DisassembleInstruction_8
                    6172   DisassembleInstruction_7:
                    6173   ; }
                    6174   ; else {
                    6175   ; strcpyInstruction("ADD") ;
00003874  4879 0000 6176          pea       @m68kde~1_238
00003878  763A      
0000387A  4E93      6177          jsr       (A3)
0000387C  584F      6178          addq.w    #4,A7
                    6179   ; Decode3BitOperandMode(OpCode) ;
0000387E  2F02      6180          move.l    D2,-(A7)
00003880  6100 FC8E 6181          bsr       _Decode3BitOperandMode
00003884  584F      6182          addq.w    #4,A7
                    6183   DisassembleInstruction_8:
                    6184   ; }
                    6185   ; }
                    6186   ; /////////////////////////////////////////////////////////////////////////////////
                    6187   ; // if instruction is ADDI or ANDI or CMPI or EORI or ORI or SUBI
                    6188   ; /////////////////////////////////////////////////////////////////////////////////
                    6189   ; if( (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0600) |
00003886  2042      6190          move.l    D2,A0
00003888  3010      6191          move.w    (A0),D0
0000388A  C07C FF00 6192          and.w     #65280,D0
0000388E  0C40 0600 6193          cmp.w     #1536,D0
00003892  6604      6194          bne.s     DisassembleInstruction_14
00003894  7001      6195          moveq     #1,D0
00003896  6002      6196          bra.s     DisassembleInstruction_15
                    6197   DisassembleInstruction_14:
00003898  4280      6198          clr.l     D0
                    6199   DisassembleInstruction_15:
0000389A  2042      6200          move.l    D2,A0
0000389C  3210      6201          move.w    (A0),D1
0000389E  C27C FF00 6202          and.w     #65280,D1
000038A2  0C41 0200 6203          cmp.w     #512,D1
000038A6  6604      6204          bne.s     DisassembleInstruction_16
000038A8  7201      6205          moveq     #1,D1
000038AA  6002      6206          bra.s     DisassembleInstruction_17
                    6207   DisassembleInstruction_16:
000038AC  4281      6208          clr.l     D1
                    6209   DisassembleInstruction_17:
000038AE  8041      6210          or.w      D1,D0
000038B0  2042      6211          move.l    D2,A0
000038B2  3210      6212          move.w    (A0),D1
000038B4  C27C FF00 6213          and.w     #65280,D1
000038B8  0C41 0C00 6214          cmp.w     #3072,D1
000038BC  6604      6215          bne.s     DisassembleInstruction_18
000038BE  7201      6216          moveq     #1,D1
000038C0  6002      6217          bra.s     DisassembleInstruction_19
                    6218   DisassembleInstruction_18:
000038C2  4281      6219          clr.l     D1
                    6220   DisassembleInstruction_19:
000038C4  8041      6221          or.w      D1,D0
000038C6  2042      6222          move.l    D2,A0
000038C8  3210      6223          move.w    (A0),D1
000038CA  C27C FF00 6224          and.w     #65280,D1
000038CE  0C41 0A00 6225          cmp.w     #2560,D1
000038D2  6604      6226          bne.s     DisassembleInstruction_20
000038D4  7201      6227          moveq     #1,D1
000038D6  6002      6228          bra.s     DisassembleInstruction_21
                    6229   DisassembleInstruction_20:
000038D8  4281      6230          clr.l     D1
                    6231   DisassembleInstruction_21:
000038DA  8041      6232          or.w      D1,D0
000038DC  2042      6233          move.l    D2,A0
000038DE  3210      6234          move.w    (A0),D1
000038E0  C27C FF00 6235          and.w     #65280,D1
000038E4  6604      6236          bne.s     DisassembleInstruction_22
000038E6  7201      6237          moveq     #1,D1
000038E8  6002      6238          bra.s     DisassembleInstruction_23
                    6239   DisassembleInstruction_22:
000038EA  4281      6240          clr.l     D1
                    6241   DisassembleInstruction_23:
000038EC  8041      6242          or.w      D1,D0
000038EE  2042      6243          move.l    D2,A0
000038F0  3210      6244          move.w    (A0),D1
000038F2  C27C FF00 6245          and.w     #65280,D1
000038F6  0C41 0400 6246          cmp.w     #1024,D1
000038FA  6604      6247          bne.s     DisassembleInstruction_24
000038FC  7201      6248          moveq     #1,D1
000038FE  6002      6249          bra.s     DisassembleInstruction_25
                    6250   DisassembleInstruction_24:
00003900  4281      6251          clr.l     D1
                    6252   DisassembleInstruction_25:
00003902  8041      6253          or.w      D1,D0
00003904  6700 00E4 6254          beq       DisassembleInstruction_12
                    6255   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0200) |
                    6256   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0C00) |
                    6257   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0A00) |
                    6258   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0000) |
                    6259   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0400))
                    6260   ; {
                    6261   ; InstructionSize = 1;
00003908  24BC 0000 6262          move.l    #1,(A2)
0000390C  0001      
                    6263   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0600))
0000390E  2042      6264          move.l    D2,A0
00003910  3010      6265          move.w    (A0),D0
00003912  C07C FF00 6266          and.w     #65280,D0
00003916  0C40 0600 6267          cmp.w     #1536,D0
0000391A  660E      6268          bne.s     DisassembleInstruction_26
                    6269   ; strcpyInstruction("ADDI") ;
0000391C  4879 0000 6270          pea       @m68kde~1_239
00003920  763E      
00003922  4E93      6271          jsr       (A3)
00003924  584F      6272          addq.w    #4,A7
00003926  6000 0084 6273          bra       DisassembleInstruction_36
                    6274   DisassembleInstruction_26:
                    6275   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0200))
0000392A  2042      6276          move.l    D2,A0
0000392C  3010      6277          move.w    (A0),D0
0000392E  C07C FF00 6278          and.w     #65280,D0
00003932  0C40 0200 6279          cmp.w     #512,D0
00003936  660E      6280          bne.s     DisassembleInstruction_28
                    6281   ; strcpyInstruction("ANDI") ;
00003938  4879 0000 6282          pea       @m68kde~1_240
0000393C  7644      
0000393E  4E93      6283          jsr       (A3)
00003940  584F      6284          addq.w    #4,A7
00003942  6000 0068 6285          bra       DisassembleInstruction_36
                    6286   DisassembleInstruction_28:
                    6287   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0C00))
00003946  2042      6288          move.l    D2,A0
00003948  3010      6289          move.w    (A0),D0
0000394A  C07C FF00 6290          and.w     #65280,D0
0000394E  0C40 0C00 6291          cmp.w     #3072,D0
00003952  660E      6292          bne.s     DisassembleInstruction_30
                    6293   ; strcpyInstruction("CMPI") ;
00003954  4879 0000 6294          pea       @m68kde~1_241
00003958  764A      
0000395A  4E93      6295          jsr       (A3)
0000395C  584F      6296          addq.w    #4,A7
0000395E  6000 004C 6297          bra       DisassembleInstruction_36
                    6298   DisassembleInstruction_30:
                    6299   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0A00))
00003962  2042      6300          move.l    D2,A0
00003964  3010      6301          move.w    (A0),D0
00003966  C07C FF00 6302          and.w     #65280,D0
0000396A  0C40 0A00 6303          cmp.w     #2560,D0
0000396E  660E      6304          bne.s     DisassembleInstruction_32
                    6305   ; strcpyInstruction("EORI") ;
00003970  4879 0000 6306          pea       @m68kde~1_242
00003974  7650      
00003976  4E93      6307          jsr       (A3)
00003978  584F      6308          addq.w    #4,A7
0000397A  6000 0030 6309          bra       DisassembleInstruction_36
                    6310   DisassembleInstruction_32:
                    6311   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0000))
0000397E  2042      6312          move.l    D2,A0
00003980  3010      6313          move.w    (A0),D0
00003982  C07C FF00 6314          and.w     #65280,D0
00003986  660C      6315          bne.s     DisassembleInstruction_34
                    6316   ; strcpyInstruction("ORI") ;
00003988  4879 0000 6317          pea       @m68kde~1_243
0000398C  7656      
0000398E  4E93      6318          jsr       (A3)
00003990  584F      6319          addq.w    #4,A7
00003992  6018      6320          bra.s     DisassembleInstruction_36
                    6321   DisassembleInstruction_34:
                    6322   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0400))
00003994  2042      6323          move.l    D2,A0
00003996  3010      6324          move.w    (A0),D0
00003998  C07C FF00 6325          and.w     #65280,D0
0000399C  0C40 0400 6326          cmp.w     #1024,D0
000039A0  660A      6327          bne.s     DisassembleInstruction_36
                    6328   ; strcpyInstruction("SUBI") ;
000039A2  4879 0000 6329          pea       @m68kde~1_244
000039A6  765A      
000039A8  4E93      6330          jsr       (A3)
000039AA  584F      6331          addq.w    #4,A7
                    6332   DisassembleInstruction_36:
                    6333   ; DataSize = Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
000039AC  2042      6334          move.l    D2,A0
000039AE  3210      6335          move.w    (A0),D1
000039B0  C2BC 0000 6336          and.l     #65535,D1
000039B4  FFFF      
000039B6  2F01      6337          move.l    D1,-(A7)
000039B8  6100 F488 6338          bsr       _Decode2BitOperandSize
000039BC  584F      6339          addq.w    #4,A7
000039BE  3E00      6340          move.w    D0,D7
                    6341   ; DecodeBWLDataAfterOpCode(OpCode);                                // go add the 8,16,32 bit data to instruction string
000039C0  2F02      6342          move.l    D2,-(A7)
000039C2  6100 F60A 6343          bsr       _DecodeBWLDataAfterOpCode
000039C6  584F      6344          addq.w    #4,A7
                    6345   ; strcatInstruction(",") ;
000039C8  4879 0000 6346          pea       @m68kde~1_245
000039CC  7660      
000039CE  6100 D342 6347          bsr       _strcatInstruction
000039D2  584F      6348          addq.w    #4,A7
                    6349   ; Decode6BitEA(OpCode,0,DataSize,0) ;                                         // decode EA
000039D4  42A7      6350          clr.l     -(A7)
000039D6  CEBC 0000 6351          and.l     #65535,D7
000039DA  FFFF      
000039DC  2F07      6352          move.l    D7,-(A7)
000039DE  42A7      6353          clr.l     -(A7)
000039E0  2F02      6354          move.l    D2,-(A7)
000039E2  6100 F6FA 6355          bsr       _Decode6BitEA
000039E6  DEFC 0010 6356          add.w     #16,A7
                    6357   DisassembleInstruction_12:
                    6358   ; }
                    6359   ; /////////////////////////////////////////////////////////////////////////////////
                    6360   ; // if instruction is ADDI #data,SR
                    6361   ; /////////////////////////////////////////////////////////////////////////////////
                    6362   ; if(*OpCode  == (unsigned short int)(0x027c))   {
000039EA  2042      6363          move.l    D2,A0
000039EC  3010      6364          move.w    (A0),D0
000039EE  0C40 027C 6365          cmp.w     #636,D0
000039F2  6622      6366          bne.s     DisassembleInstruction_38
                    6367   ; InstructionSize = 2;
000039F4  24BC 0000 6368          move.l    #2,(A2)
000039F8  0002      
                    6369   ; sprintf(Instruction, "ANDI #$%X,SR", OpCode[1]);
000039FA  2042      6370          move.l    D2,A0
000039FC  3228 0002 6371          move.w    2(A0),D1
00003A00  48C1      6372          ext.l     D1
00003A02  2F01      6373          move.l    D1,-(A7)
00003A04  4879 0000 6374          pea       @m68kde~1_246
00003A08  7662      
00003A0A  4879 0084 6375          pea       _Instruction
00003A0E  04DC      
00003A10  4E95      6376          jsr       (A5)
00003A12  DEFC 000C 6377          add.w     #12,A7
                    6378   DisassembleInstruction_38:
                    6379   ; }
                    6380   ; /////////////////////////////////////////////////////////////////////////////////
                    6381   ; // if instruction is ADDQ
                    6382   ; /////////////////////////////////////////////////////////////////////////////////
                    6383   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0x5000))   {
00003A16  2042      6384          move.l    D2,A0
00003A18  3010      6385          move.w    (A0),D0
00003A1A  C07C F100 6386          and.w     #61696,D0
00003A1E  0C40 5000 6387          cmp.w     #20480,D0
00003A22  6600 0060 6388          bne       DisassembleInstruction_40
                    6389   ; InstructionSize = 1;
00003A26  24BC 0000 6390          move.l    #1,(A2)
00003A2A  0001      
                    6391   ; strcpyInstruction("ADDQ") ;
00003A2C  4879 0000 6392          pea       @m68kde~1_247
00003A30  7670      
00003A32  4E93      6393          jsr       (A3)
00003A34  584F      6394          addq.w    #4,A7
                    6395   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003A36  2042      6396          move.l    D2,A0
00003A38  3210      6397          move.w    (A0),D1
00003A3A  C2BC 0000 6398          and.l     #65535,D1
00003A3E  FFFF      
00003A40  2F01      6399          move.l    D1,-(A7)
00003A42  6100 F3FE 6400          bsr       _Decode2BitOperandSize
00003A46  584F      6401          addq.w    #4,A7
                    6402   ; sprintf(TempString, "#%1X,", ((*OpCode >> 9) & (unsigned short int)(0x0007)));    // print 3 bit #data in positions 11,10,9 in opcode
00003A48  2042      6403          move.l    D2,A0
00003A4A  3210      6404          move.w    (A0),D1
00003A4C  48C1      6405          ext.l     D1
00003A4E  E081      6406          asr.l     #8,D1
00003A50  E281      6407          asr.l     #1,D1
00003A52  C27C 0007 6408          and.w     #7,D1
00003A56  C2BC 0000 6409          and.l     #65535,D1
00003A5A  FFFF      
00003A5C  2F01      6410          move.l    D1,-(A7)
00003A5E  4879 0000 6411          pea       @m68kde~1_248
00003A62  7676      
00003A64  2F0C      6412          move.l    A4,-(A7)
00003A66  4E95      6413          jsr       (A5)
00003A68  DEFC 000C 6414          add.w     #12,A7
                    6415   ; strcatInstruction(TempString) ;
00003A6C  2F0C      6416          move.l    A4,-(A7)
00003A6E  6100 D2A2 6417          bsr       _strcatInstruction
00003A72  584F      6418          addq.w    #4,A7
                    6419   ; Decode6BitEA(OpCode,0,0,0) ;                                           // decode EA
00003A74  42A7      6420          clr.l     -(A7)
00003A76  42A7      6421          clr.l     -(A7)
00003A78  42A7      6422          clr.l     -(A7)
00003A7A  2F02      6423          move.l    D2,-(A7)
00003A7C  6100 F660 6424          bsr       _Decode6BitEA
00003A80  DEFC 0010 6425          add.w     #16,A7
                    6426   DisassembleInstruction_40:
                    6427   ; }
                    6428   ; /////////////////////////////////////////////////////////////////////////////////
                    6429   ; // if instruction is ADDX
                    6430   ; /////////////////////////////////////////////////////////////////////////////////
                    6431   ; if((*OpCode & (unsigned short int)(0xF130 )) == (unsigned short int)(0xD100))   {
00003A84  2042      6432          move.l    D2,A0
00003A86  3010      6433          move.w    (A0),D0
00003A88  C07C F130 6434          and.w     #61744,D0
00003A8C  0C40 D100 6435          cmp.w     #53504,D0
00003A90  6600 00AE 6436          bne       DisassembleInstruction_44
                    6437   ; InstructionSize = 1;
00003A94  24BC 0000 6438          move.l    #1,(A2)
00003A98  0001      
                    6439   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0003)) ;
00003A9A  2042      6440          move.l    D2,A0
00003A9C  3010      6441          move.w    (A0),D0
00003A9E  48C0      6442          ext.l     D0
00003AA0  EC80      6443          asr.l     #6,D0
00003AA2  C07C 0003 6444          and.w     #3,D0
00003AA6  3600      6445          move.w    D0,D3
                    6446   ; if(OpMode != (unsigned short int)(0x0003)) // if size = 11 then it's ADDA not ADDX
00003AA8  0C43 0003 6447          cmp.w     #3,D3
00003AAC  6700 0092 6448          beq       DisassembleInstruction_44
                    6449   ; {
                    6450   ; strcpyInstruction("ADDX") ;
00003AB0  4879 0000 6451          pea       @m68kde~1_249
00003AB4  767C      
00003AB6  4E93      6452          jsr       (A3)
00003AB8  584F      6453          addq.w    #4,A7
                    6454   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003ABA  2042      6455          move.l    D2,A0
00003ABC  3210      6456          move.w    (A0),D1
00003ABE  C2BC 0000 6457          and.l     #65535,D1
00003AC2  FFFF      
00003AC4  2F01      6458          move.l    D1,-(A7)
00003AC6  6100 F37A 6459          bsr       _Decode2BitOperandSize
00003ACA  584F      6460          addq.w    #4,A7
                    6461   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0))    // if bit 3 of opcode is 0 indicates data registers are used as source and destination
00003ACC  2042      6462          move.l    D2,A0
00003ACE  3010      6463          move.w    (A0),D0
00003AD0  C07C 0008 6464          and.w     #8,D0
00003AD4  6600 0034 6465          bne       DisassembleInstruction_46
                    6466   ; sprintf(TempString, "D%X,D%X", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00003AD8  2042      6467          move.l    D2,A0
00003ADA  3210      6468          move.w    (A0),D1
00003ADC  48C1      6469          ext.l     D1
00003ADE  E081      6470          asr.l     #8,D1
00003AE0  E281      6471          asr.l     #1,D1
00003AE2  C2BC 0000 6472          and.l     #7,D1
00003AE6  0007      
00003AE8  2F01      6473          move.l    D1,-(A7)
00003AEA  2042      6474          move.l    D2,A0
00003AEC  3210      6475          move.w    (A0),D1
00003AEE  48C1      6476          ext.l     D1
00003AF0  C2BC 0000 6477          and.l     #7,D1
00003AF4  0007      
00003AF6  2F01      6478          move.l    D1,-(A7)
00003AF8  4879 0000 6479          pea       @m68kde~1_250
00003AFC  7682      
00003AFE  2F0C      6480          move.l    A4,-(A7)
00003B00  4E95      6481          jsr       (A5)
00003B02  DEFC 0010 6482          add.w     #16,A7
00003B06  6000 0030 6483          bra       DisassembleInstruction_47
                    6484   DisassembleInstruction_46:
                    6485   ; else        // -(ax),-(ay) mode used
                    6486   ; sprintf(TempString, "-(A%X),-(A%X)", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00003B0A  2042      6487          move.l    D2,A0
00003B0C  3210      6488          move.w    (A0),D1
00003B0E  48C1      6489          ext.l     D1
00003B10  E081      6490          asr.l     #8,D1
00003B12  E281      6491          asr.l     #1,D1
00003B14  C2BC 0000 6492          and.l     #7,D1
00003B18  0007      
00003B1A  2F01      6493          move.l    D1,-(A7)
00003B1C  2042      6494          move.l    D2,A0
00003B1E  3210      6495          move.w    (A0),D1
00003B20  48C1      6496          ext.l     D1
00003B22  C2BC 0000 6497          and.l     #7,D1
00003B26  0007      
00003B28  2F01      6498          move.l    D1,-(A7)
00003B2A  4879 0000 6499          pea       @m68kde~1_251
00003B2E  768A      
00003B30  2F0C      6500          move.l    A4,-(A7)
00003B32  4E95      6501          jsr       (A5)
00003B34  DEFC 0010 6502          add.w     #16,A7
                    6503   DisassembleInstruction_47:
                    6504   ; strcatInstruction(TempString) ;
00003B38  2F0C      6505          move.l    A4,-(A7)
00003B3A  6100 D1D6 6506          bsr       _strcatInstruction
00003B3E  584F      6507          addq.w    #4,A7
                    6508   DisassembleInstruction_44:
                    6509   ; }
                    6510   ; }
                    6511   ; /////////////////////////////////////////////////////////////////////////////////
                    6512   ; // if instruction is AND
                    6513   ; /////////////////////////////////////////////////////////////////////////////////
                    6514   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xC000))   {
00003B40  2042      6515          move.l    D2,A0
00003B42  3010      6516          move.w    (A0),D0
00003B44  C07C F000 6517          and.w     #61440,D0
00003B48  0C40 C000 6518          cmp.w     #49152,D0
00003B4C  662C      6519          bne.s     DisassembleInstruction_50
                    6520   ; InstructionSize = 1;
00003B4E  24BC 0000 6521          move.l    #1,(A2)
00003B52  0001      
                    6522   ; // need to differentiate between AND and ABCD using Mode bits in 5,4,3
                    6523   ; OpMode = (*OpCode >> 4) & (unsigned short int)(0x001F);
00003B54  2042      6524          move.l    D2,A0
00003B56  3010      6525          move.w    (A0),D0
00003B58  48C0      6526          ext.l     D0
00003B5A  E880      6527          asr.l     #4,D0
00003B5C  C07C 001F 6528          and.w     #31,D0
00003B60  3600      6529          move.w    D0,D3
                    6530   ; if(OpMode != (unsigned short int)(0x0010))   {
00003B62  0C43 0010 6531          cmp.w     #16,D3
00003B66  6712      6532          beq.s     DisassembleInstruction_50
                    6533   ; strcpyInstruction("AND") ;
00003B68  4879 0000 6534          pea       @m68kde~1_252
00003B6C  7698      
00003B6E  4E93      6535          jsr       (A3)
00003B70  584F      6536          addq.w    #4,A7
                    6537   ; Decode3BitOperandMode(OpCode) ;
00003B72  2F02      6538          move.l    D2,-(A7)
00003B74  6100 F99A 6539          bsr       _Decode3BitOperandMode
00003B78  584F      6540          addq.w    #4,A7
                    6541   DisassembleInstruction_50:
                    6542   ; }
                    6543   ; }
                    6544   ; /////////////////////////////////////////////////////////////////////////////////
                    6545   ; // if instruction is ANDI to CCR
                    6546   ; /////////////////////////////////////////////////////////////////////////////////
                    6547   ; if(*OpCode == (unsigned short int)(0x023C))   {
00003B7A  2042      6548          move.l    D2,A0
00003B7C  3010      6549          move.w    (A0),D0
00003B7E  0C40 023C 6550          cmp.w     #572,D0
00003B82  662A      6551          bne.s     DisassembleInstruction_52
                    6552   ; sprintf(Instruction, "ANDI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
00003B84  2042      6553          move.l    D2,A0
00003B86  3228 0002 6554          move.w    2(A0),D1
00003B8A  C27C 00FF 6555          and.w     #255,D1
00003B8E  C2BC 0000 6556          and.l     #65535,D1
00003B92  FFFF      
00003B94  2F01      6557          move.l    D1,-(A7)
00003B96  4879 0000 6558          pea       @m68kde~1_253
00003B9A  769C      
00003B9C  4879 0084 6559          pea       _Instruction
00003BA0  04DC      
00003BA2  4E95      6560          jsr       (A5)
00003BA4  DEFC 000C 6561          add.w     #12,A7
                    6562   ; InstructionSize = 2;
00003BA8  24BC 0000 6563          move.l    #2,(A2)
00003BAC  0002      
                    6564   DisassembleInstruction_52:
                    6565   ; }
                    6566   ; /////////////////////////////////////////////////////////////////////////////////
                    6567   ; // if instruction is ASL/ASR/LSL/LSR/ROL/ROR NOTE two versions of this with different OPCodes
                    6568   ; /////////////////////////////////////////////////////////////////////////////////
                    6569   ; if( ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE000)) |   // ASL/ASR
00003BAE  2042      6570          move.l    D2,A0
00003BB0  3010      6571          move.w    (A0),D0
00003BB2  C07C F018 6572          and.w     #61464,D0
00003BB6  0C40 E000 6573          cmp.w     #57344,D0
00003BBA  6604      6574          bne.s     DisassembleInstruction_56
00003BBC  7001      6575          moveq     #1,D0
00003BBE  6002      6576          bra.s     DisassembleInstruction_57
                    6577   DisassembleInstruction_56:
00003BC0  4280      6578          clr.l     D0
                    6579   DisassembleInstruction_57:
00003BC2  2042      6580          move.l    D2,A0
00003BC4  3210      6581          move.w    (A0),D1
00003BC6  C27C FEC0 6582          and.w     #65216,D1
00003BCA  0C41 E0C0 6583          cmp.w     #57536,D1
00003BCE  6604      6584          bne.s     DisassembleInstruction_58
00003BD0  7201      6585          moveq     #1,D1
00003BD2  6002      6586          bra.s     DisassembleInstruction_59
                    6587   DisassembleInstruction_58:
00003BD4  4281      6588          clr.l     D1
                    6589   DisassembleInstruction_59:
00003BD6  8041      6590          or.w      D1,D0
00003BD8  2042      6591          move.l    D2,A0
00003BDA  3210      6592          move.w    (A0),D1
00003BDC  C27C F018 6593          and.w     #61464,D1
00003BE0  0C41 E008 6594          cmp.w     #57352,D1
00003BE4  6604      6595          bne.s     DisassembleInstruction_60
00003BE6  7201      6596          moveq     #1,D1
00003BE8  6002      6597          bra.s     DisassembleInstruction_61
                    6598   DisassembleInstruction_60:
00003BEA  4281      6599          clr.l     D1
                    6600   DisassembleInstruction_61:
00003BEC  8041      6601          or.w      D1,D0
00003BEE  2042      6602          move.l    D2,A0
00003BF0  3210      6603          move.w    (A0),D1
00003BF2  C27C FEC0 6604          and.w     #65216,D1
00003BF6  0C41 E2C0 6605          cmp.w     #58048,D1
00003BFA  6604      6606          bne.s     DisassembleInstruction_62
00003BFC  7201      6607          moveq     #1,D1
00003BFE  6002      6608          bra.s     DisassembleInstruction_63
                    6609   DisassembleInstruction_62:
00003C00  4281      6610          clr.l     D1
                    6611   DisassembleInstruction_63:
00003C02  8041      6612          or.w      D1,D0
00003C04  2042      6613          move.l    D2,A0
00003C06  3210      6614          move.w    (A0),D1
00003C08  C27C F018 6615          and.w     #61464,D1
00003C0C  0C41 E018 6616          cmp.w     #57368,D1
00003C10  6604      6617          bne.s     DisassembleInstruction_64
00003C12  7201      6618          moveq     #1,D1
00003C14  6002      6619          bra.s     DisassembleInstruction_65
                    6620   DisassembleInstruction_64:
00003C16  4281      6621          clr.l     D1
                    6622   DisassembleInstruction_65:
00003C18  8041      6623          or.w      D1,D0
00003C1A  2042      6624          move.l    D2,A0
00003C1C  3210      6625          move.w    (A0),D1
00003C1E  C27C FEC0 6626          and.w     #65216,D1
00003C22  0C41 E6C0 6627          cmp.w     #59072,D1
00003C26  6604      6628          bne.s     DisassembleInstruction_66
00003C28  7201      6629          moveq     #1,D1
00003C2A  6002      6630          bra.s     DisassembleInstruction_67
                    6631   DisassembleInstruction_66:
00003C2C  4281      6632          clr.l     D1
                    6633   DisassembleInstruction_67:
00003C2E  8041      6634          or.w      D1,D0
00003C30  2042      6635          move.l    D2,A0
00003C32  3210      6636          move.w    (A0),D1
00003C34  C27C F018 6637          and.w     #61464,D1
00003C38  0C41 E010 6638          cmp.w     #57360,D1
00003C3C  6604      6639          bne.s     DisassembleInstruction_68
00003C3E  7201      6640          moveq     #1,D1
00003C40  6002      6641          bra.s     DisassembleInstruction_69
                    6642   DisassembleInstruction_68:
00003C42  4281      6643          clr.l     D1
                    6644   DisassembleInstruction_69:
00003C44  8041      6645          or.w      D1,D0
00003C46  2042      6646          move.l    D2,A0
00003C48  3210      6647          move.w    (A0),D1
00003C4A  C27C FEC0 6648          and.w     #65216,D1
00003C4E  0C41 E4C0 6649          cmp.w     #58560,D1
00003C52  6604      6650          bne.s     DisassembleInstruction_70
00003C54  7201      6651          moveq     #1,D1
00003C56  6002      6652          bra.s     DisassembleInstruction_71
                    6653   DisassembleInstruction_70:
00003C58  4281      6654          clr.l     D1
                    6655   DisassembleInstruction_71:
00003C5A  8041      6656          or.w      D1,D0
00003C5C  6700 0256 6657          beq       DisassembleInstruction_73
                    6658   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE0C0)) |
                    6659   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE008)) |   // LSL/LSR
                    6660   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE2C0)) |
                    6661   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE018)) |   // ROR/ROL
                    6662   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE6C0)) |
                    6663   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE010)) |   // ROXR/ROXL
                    6664   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE4C0)))
                    6665   ; {
                    6666   ; InstructionSize = 1;
00003C60  24BC 0000 6667          move.l    #1,(A2)
00003C64  0001      
                    6668   ; // 2nd version e.g. ASR/ASL/LSR/LSL/ROR/ROL/ROXL/ROXR <EA> shift a word 1 bit
                    6669   ; if((*OpCode & (unsigned short int)(0x00C0)) == (unsigned short int)(0x00C0)) // if bits 7,6 == 1,1
00003C66  2042      6670          move.l    D2,A0
00003C68  3010      6671          move.w    (A0),D0
00003C6A  C07C 00C0 6672          and.w     #192,D0
00003C6E  0C40 00C0 6673          cmp.w     #192,D0
00003C72  6600 00EA 6674          bne       DisassembleInstruction_72
                    6675   ; {
                    6676   ; // test direction by testing bit 8
                    6677   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE0C0))    //asr/asl
00003C76  2042      6678          move.l    D2,A0
00003C78  3010      6679          move.w    (A0),D0
00003C7A  C07C FEC0 6680          and.w     #65216,D0
00003C7E  0C40 E0C0 6681          cmp.w     #57536,D0
00003C82  6624      6682          bne.s     DisassembleInstruction_77
                    6683   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003C84  2042      6684          move.l    D2,A0
00003C86  3010      6685          move.w    (A0),D0
00003C88  C07C 0100 6686          and.w     #256,D0
00003C8C  0C40 0100 6687          cmp.w     #256,D0
00003C90  660C      6688          bne.s     DisassembleInstruction_76
                    6689   ; strcpyInstruction("ASL") ;
00003C92  4879 0000 6690          pea       @m68kde~1_254
00003C96  76AC      
00003C98  4E93      6691          jsr       (A3)
00003C9A  584F      6692          addq.w    #4,A7
00003C9C  600A      6693          bra.s     DisassembleInstruction_77
                    6694   DisassembleInstruction_76:
                    6695   ; else
                    6696   ; strcpyInstruction("ASR") ;
00003C9E  4879 0000 6697          pea       @m68kde~1_255
00003CA2  76B0      
00003CA4  4E93      6698          jsr       (A3)
00003CA6  584F      6699          addq.w    #4,A7
                    6700   DisassembleInstruction_77:
                    6701   ; // test direction by testing bit 8
                    6702   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE2C0))    //lsr/lsl
00003CA8  2042      6703          move.l    D2,A0
00003CAA  3010      6704          move.w    (A0),D0
00003CAC  C07C FEC0 6705          and.w     #65216,D0
00003CB0  0C40 E2C0 6706          cmp.w     #58048,D0
00003CB4  6624      6707          bne.s     DisassembleInstruction_81
                    6708   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003CB6  2042      6709          move.l    D2,A0
00003CB8  3010      6710          move.w    (A0),D0
00003CBA  C07C 0100 6711          and.w     #256,D0
00003CBE  0C40 0100 6712          cmp.w     #256,D0
00003CC2  660C      6713          bne.s     DisassembleInstruction_80
                    6714   ; strcpyInstruction("LSL") ;
00003CC4  4879 0000 6715          pea       @m68kde~1_256
00003CC8  76B4      
00003CCA  4E93      6716          jsr       (A3)
00003CCC  584F      6717          addq.w    #4,A7
00003CCE  600A      6718          bra.s     DisassembleInstruction_81
                    6719   DisassembleInstruction_80:
                    6720   ; else
                    6721   ; strcpyInstruction("LSR") ;
00003CD0  4879 0000 6722          pea       @m68kde~1_257
00003CD4  76B8      
00003CD6  4E93      6723          jsr       (A3)
00003CD8  584F      6724          addq.w    #4,A7
                    6725   DisassembleInstruction_81:
                    6726   ; // test direction by testing bit 8
                    6727   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE6C0))    //ror/rol
00003CDA  2042      6728          move.l    D2,A0
00003CDC  3010      6729          move.w    (A0),D0
00003CDE  C07C FEC0 6730          and.w     #65216,D0
00003CE2  0C40 E6C0 6731          cmp.w     #59072,D0
00003CE6  6624      6732          bne.s     DisassembleInstruction_85
                    6733   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003CE8  2042      6734          move.l    D2,A0
00003CEA  3010      6735          move.w    (A0),D0
00003CEC  C07C 0100 6736          and.w     #256,D0
00003CF0  0C40 0100 6737          cmp.w     #256,D0
00003CF4  660C      6738          bne.s     DisassembleInstruction_84
                    6739   ; strcpyInstruction("ROL") ;
00003CF6  4879 0000 6740          pea       @m68kde~1_258
00003CFA  76BC      
00003CFC  4E93      6741          jsr       (A3)
00003CFE  584F      6742          addq.w    #4,A7
00003D00  600A      6743          bra.s     DisassembleInstruction_85
                    6744   DisassembleInstruction_84:
                    6745   ; else
                    6746   ; strcpyInstruction("ROR") ;
00003D02  4879 0000 6747          pea       @m68kde~1_259
00003D06  76C0      
00003D08  4E93      6748          jsr       (A3)
00003D0A  584F      6749          addq.w    #4,A7
                    6750   DisassembleInstruction_85:
                    6751   ; // test direction by testing bit 8
                    6752   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE4C0))    //roxr/roxl
00003D0C  2042      6753          move.l    D2,A0
00003D0E  3010      6754          move.w    (A0),D0
00003D10  C07C FEC0 6755          and.w     #65216,D0
00003D14  0C40 E4C0 6756          cmp.w     #58560,D0
00003D18  6624      6757          bne.s     DisassembleInstruction_89
                    6758   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003D1A  2042      6759          move.l    D2,A0
00003D1C  3010      6760          move.w    (A0),D0
00003D1E  C07C 0100 6761          and.w     #256,D0
00003D22  0C40 0100 6762          cmp.w     #256,D0
00003D26  660C      6763          bne.s     DisassembleInstruction_88
                    6764   ; strcpyInstruction("ROXL") ;
00003D28  4879 0000 6765          pea       @m68kde~1_260
00003D2C  76C4      
00003D2E  4E93      6766          jsr       (A3)
00003D30  584F      6767          addq.w    #4,A7
00003D32  600A      6768          bra.s     DisassembleInstruction_89
                    6769   DisassembleInstruction_88:
                    6770   ; else
                    6771   ; strcpyInstruction("ROXR") ;
00003D34  4879 0000 6772          pea       @m68kde~1_261
00003D38  76CA      
00003D3A  4E93      6773          jsr       (A3)
00003D3C  584F      6774          addq.w    #4,A7
                    6775   DisassembleInstruction_89:
                    6776   ; strcatInstruction("  ") ;
00003D3E  4879 0000 6777          pea       @m68kde~1_262
00003D42  76D0      
00003D44  6100 CFCC 6778          bsr       _strcatInstruction
00003D48  584F      6779          addq.w    #4,A7
                    6780   ; Decode6BitEA(OpCode,0, 0,0) ;
00003D4A  42A7      6781          clr.l     -(A7)
00003D4C  42A7      6782          clr.l     -(A7)
00003D4E  42A7      6783          clr.l     -(A7)
00003D50  2F02      6784          move.l    D2,-(A7)
00003D52  6100 F38A 6785          bsr       _Decode6BitEA
00003D56  DEFC 0010 6786          add.w     #16,A7
00003D5A  6000 0158 6787          bra       DisassembleInstruction_73
                    6788   DisassembleInstruction_72:
                    6789   ; }
                    6790   ; // first version of above instructions, bit 5 is 0
                    6791   ; else
                    6792   ; {
                    6793   ; // test instruction and direction by testing bits 4,3
                    6794   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0))    //asr/asl
00003D5E  2042      6795          move.l    D2,A0
00003D60  3010      6796          move.w    (A0),D0
00003D62  C07C 0018 6797          and.w     #24,D0
00003D66  6624      6798          bne.s     DisassembleInstruction_93
                    6799   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003D68  2042      6800          move.l    D2,A0
00003D6A  3010      6801          move.w    (A0),D0
00003D6C  C07C 0100 6802          and.w     #256,D0
00003D70  0C40 0100 6803          cmp.w     #256,D0
00003D74  660C      6804          bne.s     DisassembleInstruction_92
                    6805   ; strcpyInstruction("ASL") ;
00003D76  4879 0000 6806          pea       @m68kde~1_263
00003D7A  76D4      
00003D7C  4E93      6807          jsr       (A3)
00003D7E  584F      6808          addq.w    #4,A7
00003D80  600A      6809          bra.s     DisassembleInstruction_93
                    6810   DisassembleInstruction_92:
                    6811   ; else
                    6812   ; strcpyInstruction("ASR") ;
00003D82  4879 0000 6813          pea       @m68kde~1_264
00003D86  76D8      
00003D88  4E93      6814          jsr       (A3)
00003D8A  584F      6815          addq.w    #4,A7
                    6816   DisassembleInstruction_93:
                    6817   ; // test instruction and direction by testing bits 4,3
                    6818   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0008))    //lsr/lsl
00003D8C  2042      6819          move.l    D2,A0
00003D8E  3010      6820          move.w    (A0),D0
00003D90  C07C 0018 6821          and.w     #24,D0
00003D94  0C40 0008 6822          cmp.w     #8,D0
00003D98  6624      6823          bne.s     DisassembleInstruction_97
                    6824   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003D9A  2042      6825          move.l    D2,A0
00003D9C  3010      6826          move.w    (A0),D0
00003D9E  C07C 0100 6827          and.w     #256,D0
00003DA2  0C40 0100 6828          cmp.w     #256,D0
00003DA6  660C      6829          bne.s     DisassembleInstruction_96
                    6830   ; strcpyInstruction("LSL") ;
00003DA8  4879 0000 6831          pea       @m68kde~1_265
00003DAC  76DC      
00003DAE  4E93      6832          jsr       (A3)
00003DB0  584F      6833          addq.w    #4,A7
00003DB2  600A      6834          bra.s     DisassembleInstruction_97
                    6835   DisassembleInstruction_96:
                    6836   ; else
                    6837   ; strcpyInstruction("LSR") ;
00003DB4  4879 0000 6838          pea       @m68kde~1_266
00003DB8  76E0      
00003DBA  4E93      6839          jsr       (A3)
00003DBC  584F      6840          addq.w    #4,A7
                    6841   DisassembleInstruction_97:
                    6842   ; // test instruction and direction by testing bits 4,3
                    6843   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0018))    //ror/rol
00003DBE  2042      6844          move.l    D2,A0
00003DC0  3010      6845          move.w    (A0),D0
00003DC2  C07C 0018 6846          and.w     #24,D0
00003DC6  0C40 0018 6847          cmp.w     #24,D0
00003DCA  6624      6848          bne.s     DisassembleInstruction_101
                    6849   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003DCC  2042      6850          move.l    D2,A0
00003DCE  3010      6851          move.w    (A0),D0
00003DD0  C07C 0100 6852          and.w     #256,D0
00003DD4  0C40 0100 6853          cmp.w     #256,D0
00003DD8  660C      6854          bne.s     DisassembleInstruction_100
                    6855   ; strcpyInstruction("ROL") ;
00003DDA  4879 0000 6856          pea       @m68kde~1_267
00003DDE  76E4      
00003DE0  4E93      6857          jsr       (A3)
00003DE2  584F      6858          addq.w    #4,A7
00003DE4  600A      6859          bra.s     DisassembleInstruction_101
                    6860   DisassembleInstruction_100:
                    6861   ; else
                    6862   ; strcpyInstruction("ROR") ;
00003DE6  4879 0000 6863          pea       @m68kde~1_268
00003DEA  76E8      
00003DEC  4E93      6864          jsr       (A3)
00003DEE  584F      6865          addq.w    #4,A7
                    6866   DisassembleInstruction_101:
                    6867   ; // test instruction and direction by testing bits 4,3
                    6868   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0010))    //roxr/roxl
00003DF0  2042      6869          move.l    D2,A0
00003DF2  3010      6870          move.w    (A0),D0
00003DF4  C07C 0018 6871          and.w     #24,D0
00003DF8  0C40 0010 6872          cmp.w     #16,D0
00003DFC  6624      6873          bne.s     DisassembleInstruction_105
                    6874   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003DFE  2042      6875          move.l    D2,A0
00003E00  3010      6876          move.w    (A0),D0
00003E02  C07C 0100 6877          and.w     #256,D0
00003E06  0C40 0100 6878          cmp.w     #256,D0
00003E0A  660C      6879          bne.s     DisassembleInstruction_104
                    6880   ; strcpyInstruction("ROXL") ;
00003E0C  4879 0000 6881          pea       @m68kde~1_269
00003E10  76EC      
00003E12  4E93      6882          jsr       (A3)
00003E14  584F      6883          addq.w    #4,A7
00003E16  600A      6884          bra.s     DisassembleInstruction_105
                    6885   DisassembleInstruction_104:
                    6886   ; else
                    6887   ; strcpyInstruction("ROXR") ;
00003E18  4879 0000 6888          pea       @m68kde~1_270
00003E1C  76F2      
00003E1E  4E93      6889          jsr       (A3)
00003E20  584F      6890          addq.w    #4,A7
                    6891   DisassembleInstruction_105:
                    6892   ; Decode2BitOperandSize(*OpCode) ;
00003E22  2042      6893          move.l    D2,A0
00003E24  3210      6894          move.w    (A0),D1
00003E26  C2BC 0000 6895          and.l     #65535,D1
00003E2A  FFFF      
00003E2C  2F01      6896          move.l    D1,-(A7)
00003E2E  6100 F012 6897          bsr       _Decode2BitOperandSize
00003E32  584F      6898          addq.w    #4,A7
                    6899   ; if((*OpCode & (unsigned short int)(0x0020)) == (unsigned short int)(0)) {   // if shift count defined by #value (bit 5 = 0), e.g. asl #3,d0
00003E34  2042      6900          move.l    D2,A0
00003E36  3010      6901          move.w    (A0),D0
00003E38  C07C 0020 6902          and.w     #32,D0
00003E3C  6600 003A 6903          bne       DisassembleInstruction_106
                    6904   ; sprintf(TempString,"#$%X,D%X",
00003E40  2042      6905          move.l    D2,A0
00003E42  3210      6906          move.w    (A0),D1
00003E44  C27C 0007 6907          and.w     #7,D1
00003E48  C2BC 0000 6908          and.l     #65535,D1
00003E4C  FFFF      
00003E4E  2F01      6909          move.l    D1,-(A7)
00003E50  2042      6910          move.l    D2,A0
00003E52  3210      6911          move.w    (A0),D1
00003E54  48C1      6912          ext.l     D1
00003E56  E081      6913          asr.l     #8,D1
00003E58  E281      6914          asr.l     #1,D1
00003E5A  C27C 0007 6915          and.w     #7,D1
00003E5E  C2BC 0000 6916          and.l     #65535,D1
00003E62  FFFF      
00003E64  2F01      6917          move.l    D1,-(A7)
00003E66  4879 0000 6918          pea       @m68kde~1_271
00003E6A  76F8      
00003E6C  2F0C      6919          move.l    A4,-(A7)
00003E6E  4E95      6920          jsr       (A5)
00003E70  DEFC 0010 6921          add.w     #16,A7
00003E74  6000 0036 6922          bra       DisassembleInstruction_107
                    6923   DisassembleInstruction_106:
                    6924   ; ((*OpCode >> 9) & (unsigned short int)(0x0007)),
                    6925   ; (*OpCode & (unsigned short int)(0x0007))) ;
                    6926   ; }
                    6927   ; else {                                                                      // if shift is for example ASR D1,D2
                    6928   ; sprintf(TempString,"D%X,D%X",
00003E78  2042      6929          move.l    D2,A0
00003E7A  3210      6930          move.w    (A0),D1
00003E7C  C27C 0007 6931          and.w     #7,D1
00003E80  C2BC 0000 6932          and.l     #65535,D1
00003E84  FFFF      
00003E86  2F01      6933          move.l    D1,-(A7)
00003E88  2042      6934          move.l    D2,A0
00003E8A  3210      6935          move.w    (A0),D1
00003E8C  48C1      6936          ext.l     D1
00003E8E  E081      6937          asr.l     #8,D1
00003E90  E281      6938          asr.l     #1,D1
00003E92  C27C 0007 6939          and.w     #7,D1
00003E96  C2BC 0000 6940          and.l     #65535,D1
00003E9A  FFFF      
00003E9C  2F01      6941          move.l    D1,-(A7)
00003E9E  4879 0000 6942          pea       @m68kde~1_272
00003EA2  7702      
00003EA4  2F0C      6943          move.l    A4,-(A7)
00003EA6  4E95      6944          jsr       (A5)
00003EA8  DEFC 0010 6945          add.w     #16,A7
                    6946   DisassembleInstruction_107:
                    6947   ; ((*OpCode >> 9) & (unsigned short int)(0x0007)),
                    6948   ; (*OpCode & (unsigned short int)(0x0007))) ;
                    6949   ; }
                    6950   ; strcatInstruction(TempString) ;
00003EAC  2F0C      6951          move.l    A4,-(A7)
00003EAE  6100 CE62 6952          bsr       _strcatInstruction
00003EB2  584F      6953          addq.w    #4,A7
                    6954   DisassembleInstruction_73:
                    6955   ; }
                    6956   ; }
                    6957   ; /////////////////////////////////////////////////////////////////////////////////
                    6958   ; // if instruction is BCC and BSR and BRA
                    6959   ; /////////////////////////////////////////////////////////////////////////////////
                    6960   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0x6000))
00003EB4  2042      6961          move.l    D2,A0
00003EB6  3010      6962          move.w    (A0),D0
00003EB8  C07C F000 6963          and.w     #61440,D0
00003EBC  0C40 6000 6964          cmp.w     #24576,D0
00003EC0  6600 00A2 6965          bne       DisassembleInstruction_108
                    6966   ; {
                    6967   ; InstructionSize = 1;
00003EC4  24BC 0000 6968          move.l    #1,(A2)
00003EC8  0001      
                    6969   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0xF)) ;
00003ECA  2042      6970          move.l    D2,A0
00003ECC  3010      6971          move.w    (A0),D0
00003ECE  48C0      6972          ext.l     D0
00003ED0  E080      6973          asr.l     #8,D0
00003ED2  C07C 000F 6974          and.w     #15,D0
00003ED6  1D40 FFE9 6975          move.b    D0,-23(A6)
                    6976   ; strcpyInstruction("B") ;
00003EDA  4879 0000 6977          pea       @m68kde~1_273
00003EDE  770A      
00003EE0  4E93      6978          jsr       (A3)
00003EE2  584F      6979          addq.w    #4,A7
                    6980   ; DecodeBranchCondition(Condition) ;
00003EE4  122E FFE9 6981          move.b    -23(A6),D1
00003EE8  C27C 00FF 6982          and.w     #255,D1
00003EEC  C2BC 0000 6983          and.l     #65535,D1
00003EF0  FFFF      
00003EF2  2F01      6984          move.l    D1,-(A7)
00003EF4  6100 F6B4 6985          bsr       _DecodeBranchCondition
00003EF8  584F      6986          addq.w    #4,A7
                    6987   ; Displacement8Bit = (*OpCode & (unsigned short int)(0xFF)) ;
00003EFA  2042      6988          move.l    D2,A0
00003EFC  3010      6989          move.w    (A0),D0
00003EFE  C07C 00FF 6990          and.w     #255,D0
00003F02  1D40 FFFB 6991          move.b    D0,-5(A6)
                    6992   ; if(Displacement8Bit == (unsigned short int)(0))  {           // if 16 bit displacement
00003F06  102E FFFB 6993          move.b    -5(A6),D0
00003F0A  4880      6994          ext.w     D0
00003F0C  4A40      6995          tst.w     D0
00003F0E  662A      6996          bne.s     DisassembleInstruction_110
                    6997   ; sprintf(TempString, "$%X", (int)(OpCode) + (int)(OpCode[1]) +  2) ;
00003F10  2202      6998          move.l    D2,D1
00003F12  2042      6999          move.l    D2,A0
00003F14  2F00      7000          move.l    D0,-(A7)
00003F16  3028 0002 7001          move.w    2(A0),D0
00003F1A  48C0      7002          ext.l     D0
00003F1C  D280      7003          add.l     D0,D1
00003F1E  201F      7004          move.l    (A7)+,D0
00003F20  5481      7005          addq.l    #2,D1
00003F22  2F01      7006          move.l    D1,-(A7)
00003F24  4879 0000 7007          pea       @m68kde~1_274
00003F28  770C      
00003F2A  2F0C      7008          move.l    A4,-(A7)
00003F2C  4E95      7009          jsr       (A5)
00003F2E  DEFC 000C 7010          add.w     #12,A7
                    7011   ; InstructionSize = 2 ;
00003F32  24BC 0000 7012          move.l    #2,(A2)
00003F36  0002      
00003F38  6022      7013          bra.s     DisassembleInstruction_111
                    7014   DisassembleInstruction_110:
                    7015   ; }
                    7016   ; else
                    7017   ; sprintf(TempString, "$%X", (int)(OpCode) + Displacement8Bit + 2) ;           // 8 bit displacement
00003F3A  2202      7018          move.l    D2,D1
00003F3C  2F00      7019          move.l    D0,-(A7)
00003F3E  102E FFFB 7020          move.b    -5(A6),D0
00003F42  4880      7021          ext.w     D0
00003F44  48C0      7022          ext.l     D0
00003F46  D280      7023          add.l     D0,D1
00003F48  201F      7024          move.l    (A7)+,D0
00003F4A  5481      7025          addq.l    #2,D1
00003F4C  2F01      7026          move.l    D1,-(A7)
00003F4E  4879 0000 7027          pea       @m68kde~1_275
00003F52  7710      
00003F54  2F0C      7028          move.l    A4,-(A7)
00003F56  4E95      7029          jsr       (A5)
00003F58  DEFC 000C 7030          add.w     #12,A7
                    7031   DisassembleInstruction_111:
                    7032   ; strcatInstruction(TempString) ;
00003F5C  2F0C      7033          move.l    A4,-(A7)
00003F5E  6100 CDB2 7034          bsr       _strcatInstruction
00003F62  584F      7035          addq.w    #4,A7
                    7036   DisassembleInstruction_108:
                    7037   ; }
                    7038   ; /////////////////////////////////////////////////////////////////////////////////
                    7039   ; // if instruction is BCHG dn,<EA>
                    7040   ; /////////////////////////////////////////////////////////////////////////////////
                    7041   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0140))   {
00003F64  2042      7042          move.l    D2,A0
00003F66  3010      7043          move.w    (A0),D0
00003F68  C07C F1C0 7044          and.w     #61888,D0
00003F6C  0C40 0140 7045          cmp.w     #320,D0
00003F70  6600 004E 7046          bne       DisassembleInstruction_112
                    7047   ; InstructionSize = 1;
00003F74  24BC 0000 7048          move.l    #1,(A2)
00003F78  0001      
                    7049   ; strcpyInstruction("BCHG ") ;
00003F7A  4879 0000 7050          pea       @m68kde~1_276
00003F7E  7714      
00003F80  4E93      7051          jsr       (A3)
00003F82  584F      7052          addq.w    #4,A7
                    7053   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00003F84  2042      7054          move.l    D2,A0
00003F86  3210      7055          move.w    (A0),D1
00003F88  48C1      7056          ext.l     D1
00003F8A  E081      7057          asr.l     #8,D1
00003F8C  E281      7058          asr.l     #1,D1
00003F8E  C27C 0007 7059          and.w     #7,D1
00003F92  C2BC 0000 7060          and.l     #65535,D1
00003F96  FFFF      
00003F98  2F01      7061          move.l    D1,-(A7)
00003F9A  4879 0000 7062          pea       @m68kde~1_277
00003F9E  771A      
00003FA0  2F0C      7063          move.l    A4,-(A7)
00003FA2  4E95      7064          jsr       (A5)
00003FA4  DEFC 000C 7065          add.w     #12,A7
                    7066   ; strcatInstruction(TempString) ;
00003FA8  2F0C      7067          move.l    A4,-(A7)
00003FAA  6100 CD66 7068          bsr       _strcatInstruction
00003FAE  584F      7069          addq.w    #4,A7
                    7070   ; Decode6BitEA(OpCode,0,0,0) ;
00003FB0  42A7      7071          clr.l     -(A7)
00003FB2  42A7      7072          clr.l     -(A7)
00003FB4  42A7      7073          clr.l     -(A7)
00003FB6  2F02      7074          move.l    D2,-(A7)
00003FB8  6100 F124 7075          bsr       _Decode6BitEA
00003FBC  DEFC 0010 7076          add.w     #16,A7
                    7077   DisassembleInstruction_112:
                    7078   ; }
                    7079   ; /////////////////////////////////////////////////////////////////////////////////
                    7080   ; // if instruction is BCHG #data,<EA>
                    7081   ; /////////////////////////////////////////////////////////////////////////////////
                    7082   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0840))   {
00003FC0  2042      7083          move.l    D2,A0
00003FC2  3010      7084          move.w    (A0),D0
00003FC4  C07C FFC0 7085          and.w     #65472,D0
00003FC8  0C40 0840 7086          cmp.w     #2112,D0
00003FCC  6600 0044 7087          bne       DisassembleInstruction_114
                    7088   ; strcpyInstruction("BCHG ") ;
00003FD0  4879 0000 7089          pea       @m68kde~1_278
00003FD4  7720      
00003FD6  4E93      7090          jsr       (A3)
00003FD8  584F      7091          addq.w    #4,A7
                    7092   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00003FDA  2042      7093          move.l    D2,A0
00003FDC  3228 0002 7094          move.w    2(A0),D1
00003FE0  48C1      7095          ext.l     D1
00003FE2  2F01      7096          move.l    D1,-(A7)
00003FE4  4879 0000 7097          pea       @m68kde~1_279
00003FE8  7726      
00003FEA  2F0C      7098          move.l    A4,-(A7)
00003FEC  4E95      7099          jsr       (A5)
00003FEE  DEFC 000C 7100          add.w     #12,A7
                    7101   ; InstructionSize = 2 ;
00003FF2  24BC 0000 7102          move.l    #2,(A2)
00003FF6  0002      
                    7103   ; strcatInstruction(TempString) ;
00003FF8  2F0C      7104          move.l    A4,-(A7)
00003FFA  6100 CD16 7105          bsr       _strcatInstruction
00003FFE  584F      7106          addq.w    #4,A7
                    7107   ; Decode6BitEA(OpCode,0,1,0) ;
00004000  42A7      7108          clr.l     -(A7)
00004002  4878 0001 7109          pea       1
00004006  42A7      7110          clr.l     -(A7)
00004008  2F02      7111          move.l    D2,-(A7)
0000400A  6100 F0D2 7112          bsr       _Decode6BitEA
0000400E  DEFC 0010 7113          add.w     #16,A7
                    7114   DisassembleInstruction_114:
                    7115   ; }
                    7116   ; /////////////////////////////////////////////////////////////////////////////////
                    7117   ; // if instruction is BCLR  dn,<EA>
                    7118   ; /////////////////////////////////////////////////////////////////////////////////
                    7119   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0180))   {
00004012  2042      7120          move.l    D2,A0
00004014  3010      7121          move.w    (A0),D0
00004016  C07C F1C0 7122          and.w     #61888,D0
0000401A  0C40 0180 7123          cmp.w     #384,D0
0000401E  6600 004E 7124          bne       DisassembleInstruction_116
                    7125   ; InstructionSize = 1;
00004022  24BC 0000 7126          move.l    #1,(A2)
00004026  0001      
                    7127   ; strcpyInstruction("BCLR ") ;
00004028  4879 0000 7128          pea       @m68kde~1_280
0000402C  772C      
0000402E  4E93      7129          jsr       (A3)
00004030  584F      7130          addq.w    #4,A7
                    7131   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00004032  2042      7132          move.l    D2,A0
00004034  3210      7133          move.w    (A0),D1
00004036  48C1      7134          ext.l     D1
00004038  E081      7135          asr.l     #8,D1
0000403A  E281      7136          asr.l     #1,D1
0000403C  C27C 0007 7137          and.w     #7,D1
00004040  C2BC 0000 7138          and.l     #65535,D1
00004044  FFFF      
00004046  2F01      7139          move.l    D1,-(A7)
00004048  4879 0000 7140          pea       @m68kde~1_281
0000404C  7732      
0000404E  2F0C      7141          move.l    A4,-(A7)
00004050  4E95      7142          jsr       (A5)
00004052  DEFC 000C 7143          add.w     #12,A7
                    7144   ; strcatInstruction(TempString) ;
00004056  2F0C      7145          move.l    A4,-(A7)
00004058  6100 CCB8 7146          bsr       _strcatInstruction
0000405C  584F      7147          addq.w    #4,A7
                    7148   ; Decode6BitEA(OpCode,0,0,0) ;
0000405E  42A7      7149          clr.l     -(A7)
00004060  42A7      7150          clr.l     -(A7)
00004062  42A7      7151          clr.l     -(A7)
00004064  2F02      7152          move.l    D2,-(A7)
00004066  6100 F076 7153          bsr       _Decode6BitEA
0000406A  DEFC 0010 7154          add.w     #16,A7
                    7155   DisassembleInstruction_116:
                    7156   ; }
                    7157   ; /////////////////////////////////////////////////////////////////////////////////
                    7158   ; // if instruction is BCLR #data,<EA>
                    7159   ; /////////////////////////////////////////////////////////////////////////////////
                    7160   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0880))   {
0000406E  2042      7161          move.l    D2,A0
00004070  3010      7162          move.w    (A0),D0
00004072  C07C FFC0 7163          and.w     #65472,D0
00004076  0C40 0880 7164          cmp.w     #2176,D0
0000407A  6600 0044 7165          bne       DisassembleInstruction_118
                    7166   ; strcpyInstruction("BCLR ") ;
0000407E  4879 0000 7167          pea       @m68kde~1_282
00004082  7738      
00004084  4E93      7168          jsr       (A3)
00004086  584F      7169          addq.w    #4,A7
                    7170   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00004088  2042      7171          move.l    D2,A0
0000408A  3228 0002 7172          move.w    2(A0),D1
0000408E  48C1      7173          ext.l     D1
00004090  2F01      7174          move.l    D1,-(A7)
00004092  4879 0000 7175          pea       @m68kde~1_283
00004096  773E      
00004098  2F0C      7176          move.l    A4,-(A7)
0000409A  4E95      7177          jsr       (A5)
0000409C  DEFC 000C 7178          add.w     #12,A7
                    7179   ; InstructionSize = 2 ;
000040A0  24BC 0000 7180          move.l    #2,(A2)
000040A4  0002      
                    7181   ; strcatInstruction(TempString) ;
000040A6  2F0C      7182          move.l    A4,-(A7)
000040A8  6100 CC68 7183          bsr       _strcatInstruction
000040AC  584F      7184          addq.w    #4,A7
                    7185   ; Decode6BitEA(OpCode,0,1,0) ;
000040AE  42A7      7186          clr.l     -(A7)
000040B0  4878 0001 7187          pea       1
000040B4  42A7      7188          clr.l     -(A7)
000040B6  2F02      7189          move.l    D2,-(A7)
000040B8  6100 F024 7190          bsr       _Decode6BitEA
000040BC  DEFC 0010 7191          add.w     #16,A7
                    7192   DisassembleInstruction_118:
                    7193   ; }
                    7194   ; /////////////////////////////////////////////////////////////////////////////////
                    7195   ; // if instruction is BSET dn,<EA>
                    7196   ; /////////////////////////////////////////////////////////////////////////////////
                    7197   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x01C0))   {
000040C0  2042      7198          move.l    D2,A0
000040C2  3010      7199          move.w    (A0),D0
000040C4  C07C F1C0 7200          and.w     #61888,D0
000040C8  0C40 01C0 7201          cmp.w     #448,D0
000040CC  6600 004E 7202          bne       DisassembleInstruction_120
                    7203   ; InstructionSize = 1;
000040D0  24BC 0000 7204          move.l    #1,(A2)
000040D4  0001      
                    7205   ; strcpyInstruction("BSET ") ;
000040D6  4879 0000 7206          pea       @m68kde~1_284
000040DA  7744      
000040DC  4E93      7207          jsr       (A3)
000040DE  584F      7208          addq.w    #4,A7
                    7209   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
000040E0  2042      7210          move.l    D2,A0
000040E2  3210      7211          move.w    (A0),D1
000040E4  48C1      7212          ext.l     D1
000040E6  E081      7213          asr.l     #8,D1
000040E8  E281      7214          asr.l     #1,D1
000040EA  C27C 0007 7215          and.w     #7,D1
000040EE  C2BC 0000 7216          and.l     #65535,D1
000040F2  FFFF      
000040F4  2F01      7217          move.l    D1,-(A7)
000040F6  4879 0000 7218          pea       @m68kde~1_285
000040FA  774A      
000040FC  2F0C      7219          move.l    A4,-(A7)
000040FE  4E95      7220          jsr       (A5)
00004100  DEFC 000C 7221          add.w     #12,A7
                    7222   ; strcatInstruction(TempString) ;
00004104  2F0C      7223          move.l    A4,-(A7)
00004106  6100 CC0A 7224          bsr       _strcatInstruction
0000410A  584F      7225          addq.w    #4,A7
                    7226   ; Decode6BitEA(OpCode,0,0,0) ;
0000410C  42A7      7227          clr.l     -(A7)
0000410E  42A7      7228          clr.l     -(A7)
00004110  42A7      7229          clr.l     -(A7)
00004112  2F02      7230          move.l    D2,-(A7)
00004114  6100 EFC8 7231          bsr       _Decode6BitEA
00004118  DEFC 0010 7232          add.w     #16,A7
                    7233   DisassembleInstruction_120:
                    7234   ; }
                    7235   ; /////////////////////////////////////////////////////////////////////////////////
                    7236   ; // if instruction is BSET #data,<EA>
                    7237   ; /////////////////////////////////////////////////////////////////////////////////
                    7238   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x08C0))   {
0000411C  2042      7239          move.l    D2,A0
0000411E  3010      7240          move.w    (A0),D0
00004120  C07C FFC0 7241          and.w     #65472,D0
00004124  0C40 08C0 7242          cmp.w     #2240,D0
00004128  6600 0044 7243          bne       DisassembleInstruction_122
                    7244   ; strcpyInstruction("BSET ") ;
0000412C  4879 0000 7245          pea       @m68kde~1_286
00004130  7750      
00004132  4E93      7246          jsr       (A3)
00004134  584F      7247          addq.w    #4,A7
                    7248   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00004136  2042      7249          move.l    D2,A0
00004138  3228 0002 7250          move.w    2(A0),D1
0000413C  48C1      7251          ext.l     D1
0000413E  2F01      7252          move.l    D1,-(A7)
00004140  4879 0000 7253          pea       @m68kde~1_287
00004144  7756      
00004146  2F0C      7254          move.l    A4,-(A7)
00004148  4E95      7255          jsr       (A5)
0000414A  DEFC 000C 7256          add.w     #12,A7
                    7257   ; InstructionSize = 2 ;
0000414E  24BC 0000 7258          move.l    #2,(A2)
00004152  0002      
                    7259   ; strcatInstruction(TempString) ;
00004154  2F0C      7260          move.l    A4,-(A7)
00004156  6100 CBBA 7261          bsr       _strcatInstruction
0000415A  584F      7262          addq.w    #4,A7
                    7263   ; Decode6BitEA(OpCode,0,1,0) ;
0000415C  42A7      7264          clr.l     -(A7)
0000415E  4878 0001 7265          pea       1
00004162  42A7      7266          clr.l     -(A7)
00004164  2F02      7267          move.l    D2,-(A7)
00004166  6100 EF76 7268          bsr       _Decode6BitEA
0000416A  DEFC 0010 7269          add.w     #16,A7
                    7270   DisassembleInstruction_122:
                    7271   ; }
                    7272   ; /////////////////////////////////////////////////////////////////////////////////
                    7273   ; // if instruction is BTST dn,<EA>
                    7274   ; /////////////////////////////////////////////////////////////////////////////////
                    7275   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0100))   {
0000416E  2042      7276          move.l    D2,A0
00004170  3010      7277          move.w    (A0),D0
00004172  C07C F1C0 7278          and.w     #61888,D0
00004176  0C40 0100 7279          cmp.w     #256,D0
0000417A  6600 004E 7280          bne       DisassembleInstruction_124
                    7281   ; InstructionSize = 1;
0000417E  24BC 0000 7282          move.l    #1,(A2)
00004182  0001      
                    7283   ; strcpyInstruction("BTST ") ;
00004184  4879 0000 7284          pea       @m68kde~1_288
00004188  775C      
0000418A  4E93      7285          jsr       (A3)
0000418C  584F      7286          addq.w    #4,A7
                    7287   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
0000418E  2042      7288          move.l    D2,A0
00004190  3210      7289          move.w    (A0),D1
00004192  48C1      7290          ext.l     D1
00004194  E081      7291          asr.l     #8,D1
00004196  E281      7292          asr.l     #1,D1
00004198  C27C 0007 7293          and.w     #7,D1
0000419C  C2BC 0000 7294          and.l     #65535,D1
000041A0  FFFF      
000041A2  2F01      7295          move.l    D1,-(A7)
000041A4  4879 0000 7296          pea       @m68kde~1_289
000041A8  7762      
000041AA  2F0C      7297          move.l    A4,-(A7)
000041AC  4E95      7298          jsr       (A5)
000041AE  DEFC 000C 7299          add.w     #12,A7
                    7300   ; strcatInstruction(TempString) ;
000041B2  2F0C      7301          move.l    A4,-(A7)
000041B4  6100 CB5C 7302          bsr       _strcatInstruction
000041B8  584F      7303          addq.w    #4,A7
                    7304   ; Decode6BitEA(OpCode,0,0,0) ;
000041BA  42A7      7305          clr.l     -(A7)
000041BC  42A7      7306          clr.l     -(A7)
000041BE  42A7      7307          clr.l     -(A7)
000041C0  2F02      7308          move.l    D2,-(A7)
000041C2  6100 EF1A 7309          bsr       _Decode6BitEA
000041C6  DEFC 0010 7310          add.w     #16,A7
                    7311   DisassembleInstruction_124:
                    7312   ; }
                    7313   ; /////////////////////////////////////////////////////////////////////////////////
                    7314   ; // if instruction is BTST #data,<EA>
                    7315   ; /////////////////////////////////////////////////////////////////////////////////
                    7316   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0800))   {
000041CA  2042      7317          move.l    D2,A0
000041CC  3010      7318          move.w    (A0),D0
000041CE  C07C FFC0 7319          and.w     #65472,D0
000041D2  0C40 0800 7320          cmp.w     #2048,D0
000041D6  6600 0044 7321          bne       DisassembleInstruction_126
                    7322   ; strcpyInstruction("BTST ") ;
000041DA  4879 0000 7323          pea       @m68kde~1_290
000041DE  7768      
000041E0  4E93      7324          jsr       (A3)
000041E2  584F      7325          addq.w    #4,A7
                    7326   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
000041E4  2042      7327          move.l    D2,A0
000041E6  3228 0002 7328          move.w    2(A0),D1
000041EA  48C1      7329          ext.l     D1
000041EC  2F01      7330          move.l    D1,-(A7)
000041EE  4879 0000 7331          pea       @m68kde~1_291
000041F2  776E      
000041F4  2F0C      7332          move.l    A4,-(A7)
000041F6  4E95      7333          jsr       (A5)
000041F8  DEFC 000C 7334          add.w     #12,A7
                    7335   ; InstructionSize = 2 ;
000041FC  24BC 0000 7336          move.l    #2,(A2)
00004200  0002      
                    7337   ; strcatInstruction(TempString) ;
00004202  2F0C      7338          move.l    A4,-(A7)
00004204  6100 CB0C 7339          bsr       _strcatInstruction
00004208  584F      7340          addq.w    #4,A7
                    7341   ; Decode6BitEA(OpCode,0,1,0) ;
0000420A  42A7      7342          clr.l     -(A7)
0000420C  4878 0001 7343          pea       1
00004210  42A7      7344          clr.l     -(A7)
00004212  2F02      7345          move.l    D2,-(A7)
00004214  6100 EEC8 7346          bsr       _Decode6BitEA
00004218  DEFC 0010 7347          add.w     #16,A7
                    7348   DisassembleInstruction_126:
                    7349   ; }
                    7350   ; /////////////////////////////////////////////////////////////////////////////////
                    7351   ; // if instruction is CHK.W <EA>,DN
                    7352   ; /////////////////////////////////////////////////////////////////////////////////
                    7353   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x4180))   {
0000421C  2042      7354          move.l    D2,A0
0000421E  3010      7355          move.w    (A0),D0
00004220  C07C F1C0 7356          and.w     #61888,D0
00004224  0C40 4180 7357          cmp.w     #16768,D0
00004228  6600 004E 7358          bne       DisassembleInstruction_128
                    7359   ; InstructionSize = 1;
0000422C  24BC 0000 7360          move.l    #1,(A2)
00004230  0001      
                    7361   ; strcpyInstruction("CHK ") ;
00004232  4879 0000 7362          pea       @m68kde~1_292
00004236  7774      
00004238  4E93      7363          jsr       (A3)
0000423A  584F      7364          addq.w    #4,A7
                    7365   ; Decode6BitEA(OpCode,0,0,0) ;
0000423C  42A7      7366          clr.l     -(A7)
0000423E  42A7      7367          clr.l     -(A7)
00004240  42A7      7368          clr.l     -(A7)
00004242  2F02      7369          move.l    D2,-(A7)
00004244  6100 EE98 7370          bsr       _Decode6BitEA
00004248  DEFC 0010 7371          add.w     #16,A7
                    7372   ; sprintf(TempString, ",D%d", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
0000424C  2042      7373          move.l    D2,A0
0000424E  3210      7374          move.w    (A0),D1
00004250  48C1      7375          ext.l     D1
00004252  E081      7376          asr.l     #8,D1
00004254  E281      7377          asr.l     #1,D1
00004256  C27C 0007 7378          and.w     #7,D1
0000425A  C2BC 0000 7379          and.l     #65535,D1
0000425E  FFFF      
00004260  2F01      7380          move.l    D1,-(A7)
00004262  4879 0000 7381          pea       @m68kde~1_293
00004266  777A      
00004268  2F0C      7382          move.l    A4,-(A7)
0000426A  4E95      7383          jsr       (A5)
0000426C  DEFC 000C 7384          add.w     #12,A7
                    7385   ; strcatInstruction(TempString) ;
00004270  2F0C      7386          move.l    A4,-(A7)
00004272  6100 CA9E 7387          bsr       _strcatInstruction
00004276  584F      7388          addq.w    #4,A7
                    7389   DisassembleInstruction_128:
                    7390   ; }
                    7391   ; /////////////////////////////////////////////////////////////////////////////////
                    7392   ; // if instruction is CLR <EA>
                    7393   ; /////////////////////////////////////////////////////////////////////////////////
                    7394   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x4200))   {
00004278  2042      7395          move.l    D2,A0
0000427A  3010      7396          move.w    (A0),D0
0000427C  C07C FF00 7397          and.w     #65280,D0
00004280  0C40 4200 7398          cmp.w     #16896,D0
00004284  6600 0034 7399          bne       DisassembleInstruction_130
                    7400   ; InstructionSize = 1;
00004288  24BC 0000 7401          move.l    #1,(A2)
0000428C  0001      
                    7402   ; strcpyInstruction("CLR") ;
0000428E  4879 0000 7403          pea       @m68kde~1_294
00004292  7780      
00004294  4E93      7404          jsr       (A3)
00004296  584F      7405          addq.w    #4,A7
                    7406   ; Decode2BitOperandSize(*OpCode) ;
00004298  2042      7407          move.l    D2,A0
0000429A  3210      7408          move.w    (A0),D1
0000429C  C2BC 0000 7409          and.l     #65535,D1
000042A0  FFFF      
000042A2  2F01      7410          move.l    D1,-(A7)
000042A4  6100 EB9C 7411          bsr       _Decode2BitOperandSize
000042A8  584F      7412          addq.w    #4,A7
                    7413   ; Decode6BitEA(OpCode,0,0,0) ;
000042AA  42A7      7414          clr.l     -(A7)
000042AC  42A7      7415          clr.l     -(A7)
000042AE  42A7      7416          clr.l     -(A7)
000042B0  2F02      7417          move.l    D2,-(A7)
000042B2  6100 EE2A 7418          bsr       _Decode6BitEA
000042B6  DEFC 0010 7419          add.w     #16,A7
                    7420   DisassembleInstruction_130:
                    7421   ; }
                    7422   ; /////////////////////////////////////////////////////////////////////////////////
                    7423   ; // if instruction is CMP, CMPA
                    7424   ; /////////////////////////////////////////////////////////////////////////////////
                    7425   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xB000))
000042BA  2042      7426          move.l    D2,A0
000042BC  3010      7427          move.w    (A0),D0
000042BE  C07C F000 7428          and.w     #61440,D0
000042C2  0C40 B000 7429          cmp.w     #45056,D0
000042C6  6600 0090 7430          bne       DisassembleInstruction_135
                    7431   ; {
                    7432   ; InstructionSize = 1;
000042CA  24BC 0000 7433          move.l    #1,(A2)
000042CE  0001      
                    7434   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
000042D0  2042      7435          move.l    D2,A0
000042D2  3010      7436          move.w    (A0),D0
000042D4  48C0      7437          ext.l     D0
000042D6  EC80      7438          asr.l     #6,D0
000042D8  C07C 0007 7439          and.w     #7,D0
000042DC  3600      7440          move.w    D0,D3
                    7441   ; if((OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))    {
000042DE  0C43 0003 7442          cmp.w     #3,D3
000042E2  6708      7443          beq.s     DisassembleInstruction_136
000042E4  0C43 0007 7444          cmp.w     #7,D3
000042E8  6600 005C 7445          bne       DisassembleInstruction_134
                    7446   DisassembleInstruction_136:
                    7447   ; if(OpMode == (unsigned short int)(0x0003))
000042EC  0C43 0003 7448          cmp.w     #3,D3
000042F0  660C      7449          bne.s     DisassembleInstruction_137
                    7450   ; strcpyInstruction("CMPA.W ") ;
000042F2  4879 0000 7451          pea       @m68kde~1_295
000042F6  7784      
000042F8  4E93      7452          jsr       (A3)
000042FA  584F      7453          addq.w    #4,A7
000042FC  600A      7454          bra.s     DisassembleInstruction_138
                    7455   DisassembleInstruction_137:
                    7456   ; else
                    7457   ; strcpyInstruction("CMPA.L ") ;
000042FE  4879 0000 7458          pea       @m68kde~1_296
00004302  778C      
00004304  4E93      7459          jsr       (A3)
00004306  584F      7460          addq.w    #4,A7
                    7461   DisassembleInstruction_138:
                    7462   ; Decode6BitEA(OpCode,0,0,0) ;
00004308  42A7      7463          clr.l     -(A7)
0000430A  42A7      7464          clr.l     -(A7)
0000430C  42A7      7465          clr.l     -(A7)
0000430E  2F02      7466          move.l    D2,-(A7)
00004310  6100 EDCC 7467          bsr       _Decode6BitEA
00004314  DEFC 0010 7468          add.w     #16,A7
                    7469   ; sprintf(TempString, ",A%d", ((*OpCode >> 9) & (unsigned short int)(0x0007))) ;
00004318  2042      7470          move.l    D2,A0
0000431A  3210      7471          move.w    (A0),D1
0000431C  48C1      7472          ext.l     D1
0000431E  E081      7473          asr.l     #8,D1
00004320  E281      7474          asr.l     #1,D1
00004322  C27C 0007 7475          and.w     #7,D1
00004326  C2BC 0000 7476          and.l     #65535,D1
0000432A  FFFF      
0000432C  2F01      7477          move.l    D1,-(A7)
0000432E  4879 0000 7478          pea       @m68kde~1_297
00004332  7794      
00004334  2F0C      7479          move.l    A4,-(A7)
00004336  4E95      7480          jsr       (A5)
00004338  DEFC 000C 7481          add.w     #12,A7
                    7482   ; strcatInstruction(TempString) ;
0000433C  2F0C      7483          move.l    A4,-(A7)
0000433E  6100 C9D2 7484          bsr       _strcatInstruction
00004342  584F      7485          addq.w    #4,A7
00004344  6012      7486          bra.s     DisassembleInstruction_135
                    7487   DisassembleInstruction_134:
                    7488   ; }
                    7489   ; else {
                    7490   ; strcpyInstruction("CMP") ;
00004346  4879 0000 7491          pea       @m68kde~1_298
0000434A  779A      
0000434C  4E93      7492          jsr       (A3)
0000434E  584F      7493          addq.w    #4,A7
                    7494   ; Decode3BitOperandMode(OpCode) ;
00004350  2F02      7495          move.l    D2,-(A7)
00004352  6100 F1BC 7496          bsr       _Decode3BitOperandMode
00004356  584F      7497          addq.w    #4,A7
                    7498   DisassembleInstruction_135:
                    7499   ; }
                    7500   ; }
                    7501   ; /////////////////////////////////////////////////////////////////////////////////
                    7502   ; // if instruction is CMPM
                    7503   ; /////////////////////////////////////////////////////////////////////////////////
                    7504   ; if((*OpCode & (unsigned short int)(0xF138 )) == (unsigned short int)(0xB108))
00004358  2042      7505          move.l    D2,A0
0000435A  3010      7506          move.w    (A0),D0
0000435C  C07C F138 7507          and.w     #61752,D0
00004360  0C40 B108 7508          cmp.w     #45320,D0
00004364  6600 007E 7509          bne       DisassembleInstruction_141
                    7510   ; {
                    7511   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
00004368  2042      7512          move.l    D2,A0
0000436A  3010      7513          move.w    (A0),D0
0000436C  48C0      7514          ext.l     D0
0000436E  EC80      7515          asr.l     #6,D0
00004370  C07C 0003 7516          and.w     #3,D0
00004374  3600      7517          move.w    D0,D3
                    7518   ; if((OpMode >= (unsigned short int)(0x0000)) && (OpMode <= (unsigned short int)(0x0002)))
00004376  0C43 0000 7519          cmp.w     #0,D3
0000437A  6500 0068 7520          blo       DisassembleInstruction_141
0000437E  0C43 0002 7521          cmp.w     #2,D3
00004382  6200 0060 7522          bhi       DisassembleInstruction_141
                    7523   ; {
                    7524   ; InstructionSize = 1;
00004386  24BC 0000 7525          move.l    #1,(A2)
0000438A  0001      
                    7526   ; strcpyInstruction("CMPM") ;
0000438C  4879 0000 7527          pea       @m68kde~1_299
00004390  779E      
00004392  4E93      7528          jsr       (A3)
00004394  584F      7529          addq.w    #4,A7
                    7530   ; Decode2BitOperandSize(*OpCode) ;
00004396  2042      7531          move.l    D2,A0
00004398  3210      7532          move.w    (A0),D1
0000439A  C2BC 0000 7533          and.l     #65535,D1
0000439E  FFFF      
000043A0  2F01      7534          move.l    D1,-(A7)
000043A2  6100 EA9E 7535          bsr       _Decode2BitOperandSize
000043A6  584F      7536          addq.w    #4,A7
                    7537   ; sprintf(TempString, "(A%d)+,(A%d)+", (*OpCode & (unsigned short int)(0x7)) , ((*OpCode >> 9) & (unsigned short int)(0x7)));
000043A8  2042      7538          move.l    D2,A0
000043AA  3210      7539          move.w    (A0),D1
000043AC  48C1      7540          ext.l     D1
000043AE  E081      7541          asr.l     #8,D1
000043B0  E281      7542          asr.l     #1,D1
000043B2  C27C 0007 7543          and.w     #7,D1
000043B6  C2BC 0000 7544          and.l     #65535,D1
000043BA  FFFF      
000043BC  2F01      7545          move.l    D1,-(A7)
000043BE  2042      7546          move.l    D2,A0
000043C0  3210      7547          move.w    (A0),D1
000043C2  C27C 0007 7548          and.w     #7,D1
000043C6  C2BC 0000 7549          and.l     #65535,D1
000043CA  FFFF      
000043CC  2F01      7550          move.l    D1,-(A7)
000043CE  4879 0000 7551          pea       @m68kde~1_300
000043D2  77A4      
000043D4  2F0C      7552          move.l    A4,-(A7)
000043D6  4E95      7553          jsr       (A5)
000043D8  DEFC 0010 7554          add.w     #16,A7
                    7555   ; strcatInstruction(TempString) ;
000043DC  2F0C      7556          move.l    A4,-(A7)
000043DE  6100 C932 7557          bsr       _strcatInstruction
000043E2  584F      7558          addq.w    #4,A7
                    7559   DisassembleInstruction_141:
                    7560   ; }
                    7561   ; }
                    7562   ; /////////////////////////////////////////////////////////////////////////////////
                    7563   ; // if instruction is DBCC
                    7564   ; /////////////////////////////////////////////////////////////////////////////////
                    7565   ; if((*OpCode & (unsigned short int)(0xF0F8 )) == (unsigned short int)(0x50C8))
000043E4  2042      7566          move.l    D2,A0
000043E6  3010      7567          move.w    (A0),D0
000043E8  C07C F0F8 7568          and.w     #61688,D0
000043EC  0C40 50C8 7569          cmp.w     #20680,D0
000043F0  6600 0084 7570          bne       DisassembleInstruction_143
                    7571   ; {
                    7572   ; InstructionSize = 2;
000043F4  24BC 0000 7573          move.l    #2,(A2)
000043F8  0002      
                    7574   ; strcpy(Instruction,"DB") ;
000043FA  4879 0000 7575          pea       @m68kde~1_301
000043FE  77B2      
00004400  4879 0084 7576          pea       _Instruction
00004404  04DC      
00004406  6100 1218 7577          bsr       _strcpy
0000440A  504F      7578          addq.w    #8,A7
                    7579   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0x000F)) ;
0000440C  2042      7580          move.l    D2,A0
0000440E  3010      7581          move.w    (A0),D0
00004410  48C0      7582          ext.l     D0
00004412  E080      7583          asr.l     #8,D0
00004414  C07C 000F 7584          and.w     #15,D0
00004418  1D40 FFE9 7585          move.b    D0,-23(A6)
                    7586   ; DecodeBranchCondition(Condition) ;
0000441C  122E FFE9 7587          move.b    -23(A6),D1
00004420  C27C 00FF 7588          and.w     #255,D1
00004424  C2BC 0000 7589          and.l     #65535,D1
00004428  FFFF      
0000442A  2F01      7590          move.l    D1,-(A7)
0000442C  6100 F17C 7591          bsr       _DecodeBranchCondition
00004430  584F      7592          addq.w    #4,A7
                    7593   ; sprintf(TempString, "D%d,%+d(PC) to Addr:$%X",(*OpCode & (unsigned short int)(0x7)), (int)(OpCode[1]), (int)(OpCode) + (int)(OpCode[1]) +  2) ;
00004432  2202      7594          move.l    D2,D1
00004434  2042      7595          move.l    D2,A0
00004436  2F00      7596          move.l    D0,-(A7)
00004438  3028 0002 7597          move.w    2(A0),D0
0000443C  48C0      7598          ext.l     D0
0000443E  D280      7599          add.l     D0,D1
00004440  201F      7600          move.l    (A7)+,D0
00004442  5481      7601          addq.l    #2,D1
00004444  2F01      7602          move.l    D1,-(A7)
00004446  2042      7603          move.l    D2,A0
00004448  3228 0002 7604          move.w    2(A0),D1
0000444C  48C1      7605          ext.l     D1
0000444E  2F01      7606          move.l    D1,-(A7)
00004450  2042      7607          move.l    D2,A0
00004452  3210      7608          move.w    (A0),D1
00004454  C27C 0007 7609          and.w     #7,D1
00004458  C2BC 0000 7610          and.l     #65535,D1
0000445C  FFFF      
0000445E  2F01      7611          move.l    D1,-(A7)
00004460  4879 0000 7612          pea       @m68kde~1_302
00004464  77B6      
00004466  2F0C      7613          move.l    A4,-(A7)
00004468  4E95      7614          jsr       (A5)
0000446A  DEFC 0014 7615          add.w     #20,A7
                    7616   ; strcatInstruction(TempString) ;
0000446E  2F0C      7617          move.l    A4,-(A7)
00004470  6100 C8A0 7618          bsr       _strcatInstruction
00004474  584F      7619          addq.w    #4,A7
                    7620   DisassembleInstruction_143:
                    7621   ; }
                    7622   ; /////////////////////////////////////////////////////////////////////////////////
                    7623   ; // if instruction is DIVS
                    7624   ; /////////////////////////////////////////////////////////////////////////////////
                    7625   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x81C0))
00004476  2042      7626          move.l    D2,A0
00004478  3010      7627          move.w    (A0),D0
0000447A  C07C F1C0 7628          and.w     #61888,D0
0000447E  0C40 81C0 7629          cmp.w     #33216,D0
00004482  6600 0048 7630          bne       DisassembleInstruction_145
                    7631   ; {
                    7632   ; InstructionSize = 1;
00004486  24BC 0000 7633          move.l    #1,(A2)
0000448A  0001      
                    7634   ; strcpy(Instruction,"DIVS ") ;
0000448C  4879 0000 7635          pea       @m68kde~1_303
00004490  77CE      
00004492  4879 0084 7636          pea       _Instruction
00004496  04DC      
00004498  6100 1186 7637          bsr       _strcpy
0000449C  504F      7638          addq.w    #8,A7
                    7639   ; Decode6BitEA(OpCode,0,0,0) ;
0000449E  42A7      7640          clr.l     -(A7)
000044A0  42A7      7641          clr.l     -(A7)
000044A2  42A7      7642          clr.l     -(A7)
000044A4  2F02      7643          move.l    D2,-(A7)
000044A6  6100 EC36 7644          bsr       _Decode6BitEA
000044AA  DEFC 0010 7645          add.w     #16,A7
                    7646   ; strcatInstruction(",") ;
000044AE  4879 0000 7647          pea       @m68kde~1_304
000044B2  77D4      
000044B4  6100 C85C 7648          bsr       _strcatInstruction
000044B8  584F      7649          addq.w    #4,A7
                    7650   ; Decode3BitDataRegister(*OpCode) ;
000044BA  2042      7651          move.l    D2,A0
000044BC  3210      7652          move.w    (A0),D1
000044BE  C2BC 0000 7653          and.l     #65535,D1
000044C2  FFFF      
000044C4  2F01      7654          move.l    D1,-(A7)
000044C6  6100 E9D6 7655          bsr       _Decode3BitDataRegister
000044CA  584F      7656          addq.w    #4,A7
                    7657   DisassembleInstruction_145:
                    7658   ; }
                    7659   ; /////////////////////////////////////////////////////////////////////////////////
                    7660   ; // if instruction is DIVU
                    7661   ; /////////////////////////////////////////////////////////////////////////////////
                    7662   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x80C0))
000044CC  2042      7663          move.l    D2,A0
000044CE  3010      7664          move.w    (A0),D0
000044D0  C07C F1C0 7665          and.w     #61888,D0
000044D4  0C40 80C0 7666          cmp.w     #32960,D0
000044D8  6600 0048 7667          bne       DisassembleInstruction_147
                    7668   ; {
                    7669   ; InstructionSize = 1;
000044DC  24BC 0000 7670          move.l    #1,(A2)
000044E0  0001      
                    7671   ; strcpy(Instruction,"DIVU ") ;
000044E2  4879 0000 7672          pea       @m68kde~1_305
000044E6  77D6      
000044E8  4879 0084 7673          pea       _Instruction
000044EC  04DC      
000044EE  6100 1130 7674          bsr       _strcpy
000044F2  504F      7675          addq.w    #8,A7
                    7676   ; Decode6BitEA(OpCode,0,0,0) ;
000044F4  42A7      7677          clr.l     -(A7)
000044F6  42A7      7678          clr.l     -(A7)
000044F8  42A7      7679          clr.l     -(A7)
000044FA  2F02      7680          move.l    D2,-(A7)
000044FC  6100 EBE0 7681          bsr       _Decode6BitEA
00004500  DEFC 0010 7682          add.w     #16,A7
                    7683   ; strcatInstruction(",") ;
00004504  4879 0000 7684          pea       @m68kde~1_306
00004508  77DC      
0000450A  6100 C806 7685          bsr       _strcatInstruction
0000450E  584F      7686          addq.w    #4,A7
                    7687   ; Decode3BitDataRegister(*OpCode) ;
00004510  2042      7688          move.l    D2,A0
00004512  3210      7689          move.w    (A0),D1
00004514  C2BC 0000 7690          and.l     #65535,D1
00004518  FFFF      
0000451A  2F01      7691          move.l    D1,-(A7)
0000451C  6100 E980 7692          bsr       _Decode3BitDataRegister
00004520  584F      7693          addq.w    #4,A7
                    7694   DisassembleInstruction_147:
                    7695   ; }
                    7696   ; /////////////////////////////////////////////////////////////////////////////////
                    7697   ; // if instruction is EOR
                    7698   ; /////////////////////////////////////////////////////////////////////////////////
                    7699   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xB000))   {
00004522  2042      7700          move.l    D2,A0
00004524  3010      7701          move.w    (A0),D0
00004526  C07C F000 7702          and.w     #61440,D0
0000452A  0C40 B000 7703          cmp.w     #45056,D0
0000452E  6600 004E 7704          bne       DisassembleInstruction_151
                    7705   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
00004532  2042      7706          move.l    D2,A0
00004534  3010      7707          move.w    (A0),D0
00004536  48C0      7708          ext.l     D0
00004538  EC80      7709          asr.l     #6,D0
0000453A  C07C 0007 7710          and.w     #7,D0
0000453E  3600      7711          move.w    D0,D3
                    7712   ; EAMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;    // mode cannot be 1 for EOR as it it used by CMPM instruction as a differentiator
00004540  2042      7713          move.l    D2,A0
00004542  3010      7714          move.w    (A0),D0
00004544  48C0      7715          ext.l     D0
00004546  E680      7716          asr.l     #3,D0
00004548  C07C 0007 7717          and.w     #7,D0
0000454C  3D40 FFEC 7718          move.w    D0,-20(A6)
                    7719   ; if( (OpMode >= (unsigned short int)(0x0004)) &&
00004550  0C43 0004 7720          cmp.w     #4,D3
00004554  6528      7721          blo.s     DisassembleInstruction_151
00004556  0C43 0006 7722          cmp.w     #6,D3
0000455A  6222      7723          bhi.s     DisassembleInstruction_151
0000455C  302E FFEC 7724          move.w    -20(A6),D0
00004560  0C40 0001 7725          cmp.w     #1,D0
00004564  6718      7726          beq.s     DisassembleInstruction_151
                    7727   ; (OpMode <= (unsigned short int)(0x0006)) &&
                    7728   ; (EAMode != (unsigned short int)(0x0001)))
                    7729   ; {
                    7730   ; InstructionSize = 1;
00004566  24BC 0000 7731          move.l    #1,(A2)
0000456A  0001      
                    7732   ; strcpyInstruction("EOR") ;
0000456C  4879 0000 7733          pea       @m68kde~1_307
00004570  77DE      
00004572  4E93      7734          jsr       (A3)
00004574  584F      7735          addq.w    #4,A7
                    7736   ; Decode3BitOperandMode(OpCode);
00004576  2F02      7737          move.l    D2,-(A7)
00004578  6100 EF96 7738          bsr       _Decode3BitOperandMode
0000457C  584F      7739          addq.w    #4,A7
                    7740   DisassembleInstruction_151:
                    7741   ; }
                    7742   ; }
                    7743   ; /////////////////////////////////////////////////////////////////////////////////
                    7744   ; // if instruction is EOR to CCR
                    7745   ; /////////////////////////////////////////////////////////////////////////////////
                    7746   ; if(*OpCode == (unsigned short int)(0x0A3C))   {
0000457E  2042      7747          move.l    D2,A0
00004580  3010      7748          move.w    (A0),D0
00004582  0C40 0A3C 7749          cmp.w     #2620,D0
00004586  662C      7750          bne.s     DisassembleInstruction_153
                    7751   ; InstructionSize = 1;
00004588  24BC 0000 7752          move.l    #1,(A2)
0000458C  0001      
                    7753   ; sprintf(Instruction, "EORI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
0000458E  2042      7754          move.l    D2,A0
00004590  3228 0002 7755          move.w    2(A0),D1
00004594  C27C 00FF 7756          and.w     #255,D1
00004598  C2BC 0000 7757          and.l     #65535,D1
0000459C  FFFF      
0000459E  2F01      7758          move.l    D1,-(A7)
000045A0  4879 0000 7759          pea       @m68kde~1_308
000045A4  77E2      
000045A6  4879 0084 7760          pea       _Instruction
000045AA  04DC      
000045AC  4E95      7761          jsr       (A5)
000045AE  DEFC 000C 7762          add.w     #12,A7
                    7763   ; InstructionSize += 1;
000045B2  5292      7764          addq.l    #1,(A2)
                    7765   DisassembleInstruction_153:
                    7766   ; }
                    7767   ; /////////////////////////////////////////////////////////////////////////////////
                    7768   ; // if instruction is EORI #data,SR
                    7769   ; /////////////////////////////////////////////////////////////////////////////////
                    7770   ; if(*OpCode  == (unsigned short int)(0x0A7C))   {
000045B4  2042      7771          move.l    D2,A0
000045B6  3010      7772          move.w    (A0),D0
000045B8  0C40 0A7C 7773          cmp.w     #2684,D0
000045BC  6622      7774          bne.s     DisassembleInstruction_155
                    7775   ; InstructionSize = 2;
000045BE  24BC 0000 7776          move.l    #2,(A2)
000045C2  0002      
                    7777   ; sprintf(Instruction, "EORI #$%X,SR", OpCode[1]);
000045C4  2042      7778          move.l    D2,A0
000045C6  3228 0002 7779          move.w    2(A0),D1
000045CA  48C1      7780          ext.l     D1
000045CC  2F01      7781          move.l    D1,-(A7)
000045CE  4879 0000 7782          pea       @m68kde~1_309
000045D2  77F2      
000045D4  4879 0084 7783          pea       _Instruction
000045D8  04DC      
000045DA  4E95      7784          jsr       (A5)
000045DC  DEFC 000C 7785          add.w     #12,A7
                    7786   DisassembleInstruction_155:
                    7787   ; }
                    7788   ; /////////////////////////////////////////////////////////////////////////////////
                    7789   ; // if instruction is EXG
                    7790   ; /////////////////////////////////////////////////////////////////////////////////
                    7791   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0xC100))   {
000045E0  2042      7792          move.l    D2,A0
000045E2  3010      7793          move.w    (A0),D0
000045E4  C07C F100 7794          and.w     #61696,D0
000045E8  0C40 C100 7795          cmp.w     #49408,D0
000045EC  6600 00E4 7796          bne       DisassembleInstruction_163
                    7797   ; Rx = ((*OpCode >> 9) & (unsigned short int)(0x7)) ;
000045F0  2042      7798          move.l    D2,A0
000045F2  3010      7799          move.w    (A0),D0
000045F4  48C0      7800          ext.l     D0
000045F6  E080      7801          asr.l     #8,D0
000045F8  E280      7802          asr.l     #1,D0
000045FA  C07C 0007 7803          and.w     #7,D0
000045FE  3D40 FFF0 7804          move.w    D0,-16(A6)
                    7805   ; Ry = (*OpCode & (unsigned short int)(0x7)) ;
00004602  2042      7806          move.l    D2,A0
00004604  3010      7807          move.w    (A0),D0
00004606  C07C 0007 7808          and.w     #7,D0
0000460A  3D40 FFF2 7809          move.w    D0,-14(A6)
                    7810   ; EXGOpMode = ((*OpCode >> 3) & (unsigned short int)(0x1F)) ;
0000460E  2042      7811          move.l    D2,A0
00004610  3010      7812          move.w    (A0),D0
00004612  48C0      7813          ext.l     D0
00004614  E680      7814          asr.l     #3,D0
00004616  C07C 001F 7815          and.w     #31,D0
0000461A  3D40 FFF4 7816          move.w    D0,-12(A6)
                    7817   ; if(EXGOpMode == (unsigned short int)(0x0008))   {
0000461E  302E FFF4 7818          move.w    -12(A6),D0
00004622  0C40 0008 7819          cmp.w     #8,D0
00004626  6634      7820          bne.s     DisassembleInstruction_159
                    7821   ; InstructionSize = 1;
00004628  24BC 0000 7822          move.l    #1,(A2)
0000462C  0001      
                    7823   ; sprintf(Instruction, "EXG D%d,D%d", Rx, Ry) ;
0000462E  322E FFF2 7824          move.w    -14(A6),D1
00004632  C2BC 0000 7825          and.l     #65535,D1
00004636  FFFF      
00004638  2F01      7826          move.l    D1,-(A7)
0000463A  322E FFF0 7827          move.w    -16(A6),D1
0000463E  C2BC 0000 7828          and.l     #65535,D1
00004642  FFFF      
00004644  2F01      7829          move.l    D1,-(A7)
00004646  4879 0000 7830          pea       @m68kde~1_310
0000464A  7800      
0000464C  4879 0084 7831          pea       _Instruction
00004650  04DC      
00004652  4E95      7832          jsr       (A5)
00004654  DEFC 0010 7833          add.w     #16,A7
00004658  6000 0078 7834          bra       DisassembleInstruction_163
                    7835   DisassembleInstruction_159:
                    7836   ; }
                    7837   ; else if(EXGOpMode == (unsigned short int)(0x0009))  {
0000465C  302E FFF4 7838          move.w    -12(A6),D0
00004660  0C40 0009 7839          cmp.w     #9,D0
00004664  6632      7840          bne.s     DisassembleInstruction_161
                    7841   ; InstructionSize = 1;
00004666  24BC 0000 7842          move.l    #1,(A2)
0000466A  0001      
                    7843   ; sprintf(Instruction, "EXG A%d,A%d", Rx, Ry) ;
0000466C  322E FFF2 7844          move.w    -14(A6),D1
00004670  C2BC 0000 7845          and.l     #65535,D1
00004674  FFFF      
00004676  2F01      7846          move.l    D1,-(A7)
00004678  322E FFF0 7847          move.w    -16(A6),D1
0000467C  C2BC 0000 7848          and.l     #65535,D1
00004680  FFFF      
00004682  2F01      7849          move.l    D1,-(A7)
00004684  4879 0000 7850          pea       @m68kde~1_311
00004688  780C      
0000468A  4879 0084 7851          pea       _Instruction
0000468E  04DC      
00004690  4E95      7852          jsr       (A5)
00004692  DEFC 0010 7853          add.w     #16,A7
00004696  603A      7854          bra.s     DisassembleInstruction_163
                    7855   DisassembleInstruction_161:
                    7856   ; }
                    7857   ; else if(EXGOpMode == (unsigned short int)(0x0011))  {
00004698  302E FFF4 7858          move.w    -12(A6),D0
0000469C  0C40 0011 7859          cmp.w     #17,D0
000046A0  6630      7860          bne.s     DisassembleInstruction_163
                    7861   ; InstructionSize = 1;
000046A2  24BC 0000 7862          move.l    #1,(A2)
000046A6  0001      
                    7863   ; sprintf(Instruction, "EXG D%d,A%d", Rx, Ry) ;
000046A8  322E FFF2 7864          move.w    -14(A6),D1
000046AC  C2BC 0000 7865          and.l     #65535,D1
000046B0  FFFF      
000046B2  2F01      7866          move.l    D1,-(A7)
000046B4  322E FFF0 7867          move.w    -16(A6),D1
000046B8  C2BC 0000 7868          and.l     #65535,D1
000046BC  FFFF      
000046BE  2F01      7869          move.l    D1,-(A7)
000046C0  4879 0000 7870          pea       @m68kde~1_312
000046C4  7818      
000046C6  4879 0084 7871          pea       _Instruction
000046CA  04DC      
000046CC  4E95      7872          jsr       (A5)
000046CE  DEFC 0010 7873          add.w     #16,A7
                    7874   DisassembleInstruction_163:
                    7875   ; }
                    7876   ; }
                    7877   ; /////////////////////////////////////////////////////////////////////////////////
                    7878   ; // if instruction is EXT
                    7879   ; /////////////////////////////////////////////////////////////////////////////////
                    7880   ; if((*OpCode & (unsigned short int)(0xFE38)) == (unsigned short int)(0x4800))
000046D2  2042      7881          move.l    D2,A0
000046D4  3010      7882          move.w    (A0),D0
000046D6  C07C FE38 7883          and.w     #65080,D0
000046DA  0C40 4800 7884          cmp.w     #18432,D0
000046DE  6600 0052 7885          bne       DisassembleInstruction_165
                    7886   ; {
                    7887   ; InstructionSize = 1;
000046E2  24BC 0000 7888          move.l    #1,(A2)
000046E6  0001      
                    7889   ; strcpy(Instruction,"EXT") ;
000046E8  4879 0000 7890          pea       @m68kde~1_313
000046EC  7824      
000046EE  4879 0084 7891          pea       _Instruction
000046F2  04DC      
000046F4  6100 0F2A 7892          bsr       _strcpy
000046F8  504F      7893          addq.w    #8,A7
                    7894   ; if((*OpCode & (unsigned short int)(0x00C0)) == (unsigned short int)(0x00C0))
000046FA  2042      7895          move.l    D2,A0
000046FC  3010      7896          move.w    (A0),D0
000046FE  C07C 00C0 7897          and.w     #192,D0
00004702  0C40 00C0 7898          cmp.w     #192,D0
00004706  660E      7899          bne.s     DisassembleInstruction_167
                    7900   ; strcatInstruction(".L ") ;
00004708  4879 0000 7901          pea       @m68kde~1_314
0000470C  7828      
0000470E  6100 C602 7902          bsr       _strcatInstruction
00004712  584F      7903          addq.w    #4,A7
00004714  600C      7904          bra.s     DisassembleInstruction_168
                    7905   DisassembleInstruction_167:
                    7906   ; else
                    7907   ; strcatInstruction(".W ") ;
00004716  4879 0000 7908          pea       @m68kde~1_315
0000471A  782C      
0000471C  6100 C5F4 7909          bsr       _strcatInstruction
00004720  584F      7910          addq.w    #4,A7
                    7911   DisassembleInstruction_168:
                    7912   ; Decode6BitEA(OpCode,0,0,0) ;
00004722  42A7      7913          clr.l     -(A7)
00004724  42A7      7914          clr.l     -(A7)
00004726  42A7      7915          clr.l     -(A7)
00004728  2F02      7916          move.l    D2,-(A7)
0000472A  6100 E9B2 7917          bsr       _Decode6BitEA
0000472E  DEFC 0010 7918          add.w     #16,A7
                    7919   DisassembleInstruction_165:
                    7920   ; }
                    7921   ; /////////////////////////////////////////////////////////////////////////////////
                    7922   ; // if instruction is ILLEGAL $4afc
                    7923   ; /////////////////////////////////////////////////////////////////////////////////
                    7924   ; if(*OpCode == (unsigned short int)(0x4AFC)) {
00004732  2042      7925          move.l    D2,A0
00004734  3010      7926          move.w    (A0),D0
00004736  0C40 4AFC 7927          cmp.w     #19196,D0
0000473A  6618      7928          bne.s     DisassembleInstruction_169
                    7929   ; InstructionSize = 1;
0000473C  24BC 0000 7930          move.l    #1,(A2)
00004740  0001      
                    7931   ; strcpy(Instruction,"ILLEGAL ($4AFC)") ;
00004742  4879 0000 7932          pea       @m68kde~1_316
00004746  7830      
00004748  4879 0084 7933          pea       _Instruction
0000474C  04DC      
0000474E  6100 0ED0 7934          bsr       _strcpy
00004752  504F      7935          addq.w    #8,A7
                    7936   DisassembleInstruction_169:
                    7937   ; }
                    7938   ; /////////////////////////////////////////////////////////////////////////////////
                    7939   ; // if instruction is JMP
                    7940   ; /////////////////////////////////////////////////////////////////////////////////
                    7941   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4EC0))
00004754  2042      7942          move.l    D2,A0
00004756  3010      7943          move.w    (A0),D0
00004758  C07C FFC0 7944          and.w     #65472,D0
0000475C  0C40 4EC0 7945          cmp.w     #20160,D0
00004760  6628      7946          bne.s     DisassembleInstruction_171
                    7947   ; {
                    7948   ; InstructionSize = 1;
00004762  24BC 0000 7949          move.l    #1,(A2)
00004766  0001      
                    7950   ; strcpy(Instruction,"JMP ") ;
00004768  4879 0000 7951          pea       @m68kde~1_317
0000476C  7840      
0000476E  4879 0084 7952          pea       _Instruction
00004772  04DC      
00004774  6100 0EAA 7953          bsr       _strcpy
00004778  504F      7954          addq.w    #8,A7
                    7955   ; Decode6BitEA(OpCode,0,0,0) ;
0000477A  42A7      7956          clr.l     -(A7)
0000477C  42A7      7957          clr.l     -(A7)
0000477E  42A7      7958          clr.l     -(A7)
00004780  2F02      7959          move.l    D2,-(A7)
00004782  6100 E95A 7960          bsr       _Decode6BitEA
00004786  DEFC 0010 7961          add.w     #16,A7
                    7962   DisassembleInstruction_171:
                    7963   ; }
                    7964   ; /////////////////////////////////////////////////////////////////////////////////
                    7965   ; // if instruction is JSR
                    7966   ; /////////////////////////////////////////////////////////////////////////////////
                    7967   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4E80))
0000478A  2042      7968          move.l    D2,A0
0000478C  3010      7969          move.w    (A0),D0
0000478E  C07C FFC0 7970          and.w     #65472,D0
00004792  0C40 4E80 7971          cmp.w     #20096,D0
00004796  6628      7972          bne.s     DisassembleInstruction_173
                    7973   ; {
                    7974   ; InstructionSize = 1;
00004798  24BC 0000 7975          move.l    #1,(A2)
0000479C  0001      
                    7976   ; strcpy(Instruction,"JSR ") ;
0000479E  4879 0000 7977          pea       @m68kde~1_318
000047A2  7846      
000047A4  4879 0084 7978          pea       _Instruction
000047A8  04DC      
000047AA  6100 0E74 7979          bsr       _strcpy
000047AE  504F      7980          addq.w    #8,A7
                    7981   ; Decode6BitEA(OpCode,0,0,0) ;
000047B0  42A7      7982          clr.l     -(A7)
000047B2  42A7      7983          clr.l     -(A7)
000047B4  42A7      7984          clr.l     -(A7)
000047B6  2F02      7985          move.l    D2,-(A7)
000047B8  6100 E924 7986          bsr       _Decode6BitEA
000047BC  DEFC 0010 7987          add.w     #16,A7
                    7988   DisassembleInstruction_173:
                    7989   ; }
                    7990   ; /////////////////////////////////////////////////////////////////////////////////
                    7991   ; // if instruction is LEA
                    7992   ; /////////////////////////////////////////////////////////////////////////////////
                    7993   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0x41C0))
000047C0  2042      7994          move.l    D2,A0
000047C2  3010      7995          move.w    (A0),D0
000047C4  C07C F1C0 7996          and.w     #61888,D0
000047C8  0C40 41C0 7997          cmp.w     #16832,D0
000047CC  6600 0056 7998          bne       DisassembleInstruction_175
                    7999   ; {
                    8000   ; InstructionSize = 1;
000047D0  24BC 0000 8001          move.l    #1,(A2)
000047D4  0001      
                    8002   ; strcpy(Instruction,"LEA ") ;
000047D6  4879 0000 8003          pea       @m68kde~1_319
000047DA  784C      
000047DC  4879 0084 8004          pea       _Instruction
000047E0  04DC      
000047E2  6100 0E3C 8005          bsr       _strcpy
000047E6  504F      8006          addq.w    #8,A7
                    8007   ; Decode6BitEA(OpCode,0,0,0) ;
000047E8  42A7      8008          clr.l     -(A7)
000047EA  42A7      8009          clr.l     -(A7)
000047EC  42A7      8010          clr.l     -(A7)
000047EE  2F02      8011          move.l    D2,-(A7)
000047F0  6100 E8EC 8012          bsr       _Decode6BitEA
000047F4  DEFC 0010 8013          add.w     #16,A7
                    8014   ; sprintf(TempString, ",A%d", ((*OpCode >> 9) & (unsigned short int)(0x7)));
000047F8  2042      8015          move.l    D2,A0
000047FA  3210      8016          move.w    (A0),D1
000047FC  48C1      8017          ext.l     D1
000047FE  E081      8018          asr.l     #8,D1
00004800  E281      8019          asr.l     #1,D1
00004802  C27C 0007 8020          and.w     #7,D1
00004806  C2BC 0000 8021          and.l     #65535,D1
0000480A  FFFF      
0000480C  2F01      8022          move.l    D1,-(A7)
0000480E  4879 0000 8023          pea       @m68kde~1_320
00004812  7852      
00004814  2F0C      8024          move.l    A4,-(A7)
00004816  4E95      8025          jsr       (A5)
00004818  DEFC 000C 8026          add.w     #12,A7
                    8027   ; strcatInstruction(TempString);
0000481C  2F0C      8028          move.l    A4,-(A7)
0000481E  6100 C4F2 8029          bsr       _strcatInstruction
00004822  584F      8030          addq.w    #4,A7
                    8031   DisassembleInstruction_175:
                    8032   ; }
                    8033   ; /////////////////////////////////////////////////////////////////////////////////
                    8034   ; // if instruction is LINK.W
                    8035   ; /////////////////////////////////////////////////////////////////////////////////
                    8036   ; if((*OpCode & (unsigned short int)(0xFFF8)) == (unsigned short int)(0x4E50))
00004824  2042      8037          move.l    D2,A0
00004826  3010      8038          move.w    (A0),D0
00004828  C07C FFF8 8039          and.w     #65528,D0
0000482C  0C40 4E50 8040          cmp.w     #20048,D0
00004830  6600 0050 8041          bne       DisassembleInstruction_177
                    8042   ; {
                    8043   ; InstructionSize = 1;
00004834  24BC 0000 8044          move.l    #1,(A2)
00004838  0001      
                    8045   ; strcpy(Instruction,"LINK ") ;
0000483A  4879 0000 8046          pea       @m68kde~1_321
0000483E  7858      
00004840  4879 0084 8047          pea       _Instruction
00004844  04DC      
00004846  6100 0DD8 8048          bsr       _strcpy
0000484A  504F      8049          addq.w    #8,A7
                    8050   ; sprintf(TempString, "A%d,#%d", ((*OpCode) & (unsigned short int)(0x7)),OpCode[1]);
0000484C  2042      8051          move.l    D2,A0
0000484E  3228 0002 8052          move.w    2(A0),D1
00004852  48C1      8053          ext.l     D1
00004854  2F01      8054          move.l    D1,-(A7)
00004856  2042      8055          move.l    D2,A0
00004858  3210      8056          move.w    (A0),D1
0000485A  C27C 0007 8057          and.w     #7,D1
0000485E  C2BC 0000 8058          and.l     #65535,D1
00004862  FFFF      
00004864  2F01      8059          move.l    D1,-(A7)
00004866  4879 0000 8060          pea       @m68kde~1_322
0000486A  785E      
0000486C  2F0C      8061          move.l    A4,-(A7)
0000486E  4E95      8062          jsr       (A5)
00004870  DEFC 0010 8063          add.w     #16,A7
                    8064   ; InstructionSize = 2 ;
00004874  24BC 0000 8065          move.l    #2,(A2)
00004878  0002      
                    8066   ; strcatInstruction(TempString);
0000487A  2F0C      8067          move.l    A4,-(A7)
0000487C  6100 C494 8068          bsr       _strcatInstruction
00004880  584F      8069          addq.w    #4,A7
                    8070   DisassembleInstruction_177:
                    8071   ; }
                    8072   ; /////////////////////////////////////////////////////////////////////////////////
                    8073   ; // if instruction is MOVE, MOVEA
                    8074   ; /////////////////////////////////////////////////////////////////////////////////
                    8075   ; if((*OpCode & (unsigned short int)(0xC000)) == (unsigned short int)(0x0000))
00004882  2042      8076          move.l    D2,A0
00004884  3010      8077          move.w    (A0),D0
00004886  C07C C000 8078          and.w     #49152,D0
0000488A  6600 00F2 8079          bne       DisassembleInstruction_193
                    8080   ; {
                    8081   ; Size = (*OpCode & (unsigned short int)(0x3000)) >> 12 ;   // get 2 bit size in bits 13/12 into 1,0
0000488E  2042      8082          move.l    D2,A0
00004890  3010      8083          move.w    (A0),D0
00004892  C07C 3000 8084          and.w     #12288,D0
00004896  E048      8085          lsr.w     #8,D0
00004898  E848      8086          lsr.w     #4,D0
0000489A  3D40 FFE2 8087          move.w    D0,-30(A6)
                    8088   ; OpMode = (*OpCode >> 3) & (unsigned short int)(0x0007);   // get 3 bit source mode operand
0000489E  2042      8089          move.l    D2,A0
000048A0  3010      8090          move.w    (A0),D0
000048A2  48C0      8091          ext.l     D0
000048A4  E680      8092          asr.l     #3,D0
000048A6  C07C 0007 8093          and.w     #7,D0
000048AA  3600      8094          move.w    D0,D3
                    8095   ; SourceReg = (*OpCode) & (unsigned short int)(0x0007);     // get 3 bit source register number
000048AC  2042      8096          move.l    D2,A0
000048AE  3010      8097          move.w    (A0),D0
000048B0  C07C 0007 8098          and.w     #7,D0
000048B4  3D40 FFF6 8099          move.w    D0,-10(A6)
                    8100   ; DataSize = 0 ;
000048B8  7E00      8101          moveq     #0,D7
                    8102   ; // if source addressing mode is d16(a0) or d8(a0,d0)
                    8103   ; if((OpMode == (unsigned short int)(0x0005)) || (OpMode == (unsigned short int)(0x0006)))
000048BA  0C43 0005 8104          cmp.w     #5,D3
000048BE  6706      8105          beq.s     DisassembleInstruction_183
000048C0  0C43 0006 8106          cmp.w     #6,D3
000048C4  6602      8107          bne.s     DisassembleInstruction_181
                    8108   DisassembleInstruction_183:
                    8109   ; DataSize = 1;  // source operands has 1 word after EA
000048C6  7E01      8110          moveq     #1,D7
                    8111   DisassembleInstruction_181:
                    8112   ; // if source addressing mode is a 16 or 32 bit address
                    8113   ; if((OpMode == (unsigned short int)(0x0007))) {
000048C8  0C43 0007 8114          cmp.w     #7,D3
000048CC  660C      8115          bne.s     DisassembleInstruction_187
                    8116   ; if(SourceReg == (unsigned short int)(0x0000))         // short address
000048CE  302E FFF6 8117          move.w    -10(A6),D0
000048D2  6604      8118          bne.s     DisassembleInstruction_186
                    8119   ; DataSize = 1 ;
000048D4  7E01      8120          moveq     #1,D7
000048D6  6002      8121          bra.s     DisassembleInstruction_187
                    8122   DisassembleInstruction_186:
                    8123   ; else
                    8124   ; DataSize = 2 ;
000048D8  7E02      8125          moveq     #2,D7
                    8126   DisassembleInstruction_187:
                    8127   ; }
                    8128   ; // if source addressing mode is # then figure out size
                    8129   ; if((OpMode == (unsigned short int)(0x0007)) && (SourceReg == (unsigned short int)(0x0004)))    {
000048DA  0C43 0007 8130          cmp.w     #7,D3
000048DE  6624      8131          bne.s     DisassembleInstruction_191
000048E0  302E FFF6 8132          move.w    -10(A6),D0
000048E4  0C40 0004 8133          cmp.w     #4,D0
000048E8  661A      8134          bne.s     DisassembleInstruction_191
                    8135   ; if((Size == (unsigned short int)(1)) || (Size == (unsigned short int)(3)))
000048EA  302E FFE2 8136          move.w    -30(A6),D0
000048EE  0C40 0001 8137          cmp.w     #1,D0
000048F2  670A      8138          beq.s     DisassembleInstruction_192
000048F4  302E FFE2 8139          move.w    -30(A6),D0
000048F8  0C40 0003 8140          cmp.w     #3,D0
000048FC  6604      8141          bne.s     DisassembleInstruction_190
                    8142   DisassembleInstruction_192:
                    8143   ; DataSize = 1;
000048FE  7E01      8144          moveq     #1,D7
00004900  6002      8145          bra.s     DisassembleInstruction_191
                    8146   DisassembleInstruction_190:
                    8147   ; else
                    8148   ; DataSize = 2 ;
00004902  7E02      8149          moveq     #2,D7
                    8150   DisassembleInstruction_191:
                    8151   ; //printf("DataSize = %d",DataSize) ;
                    8152   ; }
                    8153   ; if(Size != 0)
00004904  302E FFE2 8154          move.w    -30(A6),D0
00004908  6700 0074 8155          beq       DisassembleInstruction_193
                    8156   ; {
                    8157   ; InstructionSize = 1;
0000490C  24BC 0000 8158          move.l    #1,(A2)
00004910  0001      
                    8159   ; if(Size == 1)
00004912  302E FFE2 8160          move.w    -30(A6),D0
00004916  0C40 0001 8161          cmp.w     #1,D0
0000491A  660C      8162          bne.s     DisassembleInstruction_195
                    8163   ; strcpyInstruction("MOVE.B ") ;
0000491C  4879 0000 8164          pea       @m68kde~1_323
00004920  7866      
00004922  4E93      8165          jsr       (A3)
00004924  584F      8166          addq.w    #4,A7
00004926  6020      8167          bra.s     DisassembleInstruction_198
                    8168   DisassembleInstruction_195:
                    8169   ; else if(Size == 2)
00004928  302E FFE2 8170          move.w    -30(A6),D0
0000492C  0C40 0002 8171          cmp.w     #2,D0
00004930  660C      8172          bne.s     DisassembleInstruction_197
                    8173   ; strcpyInstruction("MOVE.L ") ;
00004932  4879 0000 8174          pea       @m68kde~1_324
00004936  786E      
00004938  4E93      8175          jsr       (A3)
0000493A  584F      8176          addq.w    #4,A7
0000493C  600A      8177          bra.s     DisassembleInstruction_198
                    8178   DisassembleInstruction_197:
                    8179   ; else
                    8180   ; strcpyInstruction("MOVE.W ") ;
0000493E  4879 0000 8181          pea       @m68kde~1_325
00004942  7876      
00004944  4E93      8182          jsr       (A3)
00004946  584F      8183          addq.w    #4,A7
                    8184   DisassembleInstruction_198:
                    8185   ; Decode6BitEA(OpCode,0,0,1) ;
00004948  4878 0001 8186          pea       1
0000494C  42A7      8187          clr.l     -(A7)
0000494E  42A7      8188          clr.l     -(A7)
00004950  2F02      8189          move.l    D2,-(A7)
00004952  6100 E78A 8190          bsr       _Decode6BitEA
00004956  DEFC 0010 8191          add.w     #16,A7
                    8192   ; strcatInstruction(",") ;
0000495A  4879 0000 8193          pea       @m68kde~1_326
0000495E  787E      
00004960  6100 C3B0 8194          bsr       _strcatInstruction
00004964  584F      8195          addq.w    #4,A7
                    8196   ; // tell next function how many words lie between opcode and destination, could be 1 or 2 e.g. with # addressing move.bwl #$data,<EA>
                    8197   ; // but subtract 1 to make the maths correct in the called function
                    8198   ; Decode6BitEA(OpCode,2,(DataSize),0) ;
00004966  42A7      8199          clr.l     -(A7)
00004968  CEBC 0000 8200          and.l     #65535,D7
0000496C  FFFF      
0000496E  2F07      8201          move.l    D7,-(A7)
00004970  4878 0002 8202          pea       2
00004974  2F02      8203          move.l    D2,-(A7)
00004976  6100 E766 8204          bsr       _Decode6BitEA
0000497A  DEFC 0010 8205          add.w     #16,A7
                    8206   DisassembleInstruction_193:
                    8207   ; }
                    8208   ; }
                    8209   ; /////////////////////////////////////////////////////////////////////////////////
                    8210   ; // if instruction is MOVE <EA>,CCR
                    8211   ; /////////////////////////////////////////////////////////////////////////////////
                    8212   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x44C0))
0000497E  2042      8213          move.l    D2,A0
00004980  3010      8214          move.w    (A0),D0
00004982  C07C FFC0 8215          and.w     #65472,D0
00004986  0C40 44C0 8216          cmp.w     #17600,D0
0000498A  6634      8217          bne.s     DisassembleInstruction_199
                    8218   ; {
                    8219   ; InstructionSize = 1;
0000498C  24BC 0000 8220          move.l    #1,(A2)
00004990  0001      
                    8221   ; strcpy(Instruction,"MOVE ") ;
00004992  4879 0000 8222          pea       @m68kde~1_327
00004996  7880      
00004998  4879 0084 8223          pea       _Instruction
0000499C  04DC      
0000499E  6100 0C80 8224          bsr       _strcpy
000049A2  504F      8225          addq.w    #8,A7
                    8226   ; Decode6BitEA(OpCode,0,0,0) ;
000049A4  42A7      8227          clr.l     -(A7)
000049A6  42A7      8228          clr.l     -(A7)
000049A8  42A7      8229          clr.l     -(A7)
000049AA  2F02      8230          move.l    D2,-(A7)
000049AC  6100 E730 8231          bsr       _Decode6BitEA
000049B0  DEFC 0010 8232          add.w     #16,A7
                    8233   ; strcatInstruction(",CCR") ;
000049B4  4879 0000 8234          pea       @m68kde~1_328
000049B8  7886      
000049BA  6100 C356 8235          bsr       _strcatInstruction
000049BE  584F      8236          addq.w    #4,A7
                    8237   DisassembleInstruction_199:
                    8238   ; }
                    8239   ; /////////////////////////////////////////////////////////////////////////////////
                    8240   ; // if instruction is MOVE SR,<EA>
                    8241   ; /////////////////////////////////////////////////////////////////////////////////
                    8242   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x40C0))
000049C0  2042      8243          move.l    D2,A0
000049C2  3010      8244          move.w    (A0),D0
000049C4  C07C FFC0 8245          and.w     #65472,D0
000049C8  0C40 40C0 8246          cmp.w     #16576,D0
000049CC  6628      8247          bne.s     DisassembleInstruction_201
                    8248   ; {
                    8249   ; InstructionSize = 1;
000049CE  24BC 0000 8250          move.l    #1,(A2)
000049D2  0001      
                    8251   ; strcpy(Instruction,"MOVE SR,") ;
000049D4  4879 0000 8252          pea       @m68kde~1_329
000049D8  788C      
000049DA  4879 0084 8253          pea       _Instruction
000049DE  04DC      
000049E0  6100 0C3E 8254          bsr       _strcpy
000049E4  504F      8255          addq.w    #8,A7
                    8256   ; Decode6BitEA(OpCode,0,0,0) ;
000049E6  42A7      8257          clr.l     -(A7)
000049E8  42A7      8258          clr.l     -(A7)
000049EA  42A7      8259          clr.l     -(A7)
000049EC  2F02      8260          move.l    D2,-(A7)
000049EE  6100 E6EE 8261          bsr       _Decode6BitEA
000049F2  DEFC 0010 8262          add.w     #16,A7
                    8263   DisassembleInstruction_201:
                    8264   ; }
                    8265   ; /////////////////////////////////////////////////////////////////////////////////
                    8266   ; // if instruction is MOVE <EA>,SR
                    8267   ; /////////////////////////////////////////////////////////////////////////////////
                    8268   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x46C0))
000049F6  2042      8269          move.l    D2,A0
000049F8  3010      8270          move.w    (A0),D0
000049FA  C07C FFC0 8271          and.w     #65472,D0
000049FE  0C40 46C0 8272          cmp.w     #18112,D0
00004A02  6634      8273          bne.s     DisassembleInstruction_203
                    8274   ; {
                    8275   ; InstructionSize = 1;
00004A04  24BC 0000 8276          move.l    #1,(A2)
00004A08  0001      
                    8277   ; strcpy(Instruction,"MOVE ") ;
00004A0A  4879 0000 8278          pea       @m68kde~1_330
00004A0E  7896      
00004A10  4879 0084 8279          pea       _Instruction
00004A14  04DC      
00004A16  6100 0C08 8280          bsr       _strcpy
00004A1A  504F      8281          addq.w    #8,A7
                    8282   ; Decode6BitEA(OpCode,0,0,0) ;
00004A1C  42A7      8283          clr.l     -(A7)
00004A1E  42A7      8284          clr.l     -(A7)
00004A20  42A7      8285          clr.l     -(A7)
00004A22  2F02      8286          move.l    D2,-(A7)
00004A24  6100 E6B8 8287          bsr       _Decode6BitEA
00004A28  DEFC 0010 8288          add.w     #16,A7
                    8289   ; strcatInstruction(",SR") ;
00004A2C  4879 0000 8290          pea       @m68kde~1_331
00004A30  789C      
00004A32  6100 C2DE 8291          bsr       _strcatInstruction
00004A36  584F      8292          addq.w    #4,A7
                    8293   DisassembleInstruction_203:
                    8294   ; }
                    8295   ; /////////////////////////////////////////////////////////////////////////////////
                    8296   ; // if instruction is MOVE USP,An
                    8297   ; /////////////////////////////////////////////////////////////////////////////////
                    8298   ; if((*OpCode & (unsigned short int)(0xFFF0)) == (unsigned short int)(0x4E60))
00004A38  2042      8299          move.l    D2,A0
00004A3A  3010      8300          move.w    (A0),D0
00004A3C  C07C FFF0 8301          and.w     #65520,D0
00004A40  0C40 4E60 8302          cmp.w     #20064,D0
00004A44  6600 0060 8303          bne       DisassembleInstruction_208
                    8304   ; {
                    8305   ; InstructionSize = 1;
00004A48  24BC 0000 8306          move.l    #1,(A2)
00004A4C  0001      
                    8307   ; Register = (*OpCode & (unsigned short int)(0x0007)) ;
00004A4E  2042      8308          move.l    D2,A0
00004A50  3010      8309          move.w    (A0),D0
00004A52  C07C 0007 8310          and.w     #7,D0
00004A56  3D40 FFEA 8311          move.w    D0,-22(A6)
                    8312   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008))        // transfer sp to address regier
00004A5A  2042      8313          move.l    D2,A0
00004A5C  3010      8314          move.w    (A0),D0
00004A5E  C07C 0008 8315          and.w     #8,D0
00004A62  0C40 0008 8316          cmp.w     #8,D0
00004A66  6620      8317          bne.s     DisassembleInstruction_207
                    8318   ; sprintf(Instruction, "MOVE USP,A%d", Register);
00004A68  322E FFEA 8319          move.w    -22(A6),D1
00004A6C  C2BC 0000 8320          and.l     #65535,D1
00004A70  FFFF      
00004A72  2F01      8321          move.l    D1,-(A7)
00004A74  4879 0000 8322          pea       @m68kde~1_332
00004A78  78A0      
00004A7A  4879 0084 8323          pea       _Instruction
00004A7E  04DC      
00004A80  4E95      8324          jsr       (A5)
00004A82  DEFC 000C 8325          add.w     #12,A7
00004A86  601E      8326          bra.s     DisassembleInstruction_208
                    8327   DisassembleInstruction_207:
                    8328   ; else
                    8329   ; sprintf(Instruction, "MOVE A%d,USP", Register);
00004A88  322E FFEA 8330          move.w    -22(A6),D1
00004A8C  C2BC 0000 8331          and.l     #65535,D1
00004A90  FFFF      
00004A92  2F01      8332          move.l    D1,-(A7)
00004A94  4879 0000 8333          pea       @m68kde~1_333
00004A98  78AE      
00004A9A  4879 0084 8334          pea       _Instruction
00004A9E  04DC      
00004AA0  4E95      8335          jsr       (A5)
00004AA2  DEFC 000C 8336          add.w     #12,A7
                    8337   DisassembleInstruction_208:
                    8338   ; }
                    8339   ; /////////////////////////////////////////////////////////////////////////////////
                    8340   ; // if instruction is MOVEM
                    8341   ; /////////////////////////////////////////////////////////////////////////////////
                    8342   ; if((*OpCode & (unsigned short int)(0xFB80)) == (unsigned short int)(0x4880))
00004AA6  2042      8343          move.l    D2,A0
00004AA8  3010      8344          move.w    (A0),D0
00004AAA  C07C FB80 8345          and.w     #64384,D0
00004AAE  0C40 4880 8346          cmp.w     #18560,D0
00004AB2  6600 0206 8347          bne       DisassembleInstruction_230
                    8348   ; {
                    8349   ; OpMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;
00004AB6  2042      8350          move.l    D2,A0
00004AB8  3010      8351          move.w    (A0),D0
00004ABA  48C0      8352          ext.l     D0
00004ABC  E680      8353          asr.l     #3,D0
00004ABE  C07C 0007 8354          and.w     #7,D0
00004AC2  3600      8355          move.w    D0,D3
                    8356   ; if( (OpMode != (unsigned short int)(0x0)) &&
00004AC4  4A43      8357          tst.w     D3
00004AC6  6700 01F2 8358          beq       DisassembleInstruction_230
00004ACA  0C43 0001 8359          cmp.w     #1,D3
00004ACE  6700 01EA 8360          beq       DisassembleInstruction_230
00004AD2  4A43      8361          tst.w     D3
00004AD4  6700 01E4 8362          beq       DisassembleInstruction_230
                    8363   ; (OpMode != (unsigned short int)(0x1)) &&
                    8364   ; (OpMode != (unsigned short int)(0x0)))
                    8365   ; {
                    8366   ; InstructionSize = 1;
00004AD8  24BC 0000 8367          move.l    #1,(A2)
00004ADC  0001      
                    8368   ; strcpy(Instruction,"MOVEM") ;
00004ADE  4879 0000 8369          pea       @m68kde~1_334
00004AE2  78BC      
00004AE4  4879 0084 8370          pea       _Instruction
00004AE8  04DC      
00004AEA  6100 0B34 8371          bsr       _strcpy
00004AEE  504F      8372          addq.w    #8,A7
                    8373   ; InstructionSize ++ ;
00004AF0  5292      8374          addq.l    #1,(A2)
                    8375   ; if((*OpCode & (unsigned short int)(0x0040)) == (unsigned short int)(0x0))
00004AF2  2042      8376          move.l    D2,A0
00004AF4  3010      8377          move.w    (A0),D0
00004AF6  C07C 0040 8378          and.w     #64,D0
00004AFA  660E      8379          bne.s     DisassembleInstruction_213
                    8380   ; strcatInstruction(".W ") ;
00004AFC  4879 0000 8381          pea       @m68kde~1_335
00004B00  78C2      
00004B02  6100 C20E 8382          bsr       _strcatInstruction
00004B06  584F      8383          addq.w    #4,A7
00004B08  600C      8384          bra.s     DisassembleInstruction_214
                    8385   DisassembleInstruction_213:
                    8386   ; else
                    8387   ; strcatInstruction(".L ") ;
00004B0A  4879 0000 8388          pea       @m68kde~1_336
00004B0E  78C6      
00004B10  6100 C200 8389          bsr       _strcatInstruction
00004B14  584F      8390          addq.w    #4,A7
                    8391   DisassembleInstruction_214:
                    8392   ; // movem  reg,-(An) if bit 10 = 0
                    8393   ; if((*OpCode & (unsigned short int)(0x0400))  == (unsigned short int)(0x0000))
00004B16  2042      8394          move.l    D2,A0
00004B18  3010      8395          move.w    (A0),D0
00004B1A  C07C 0400 8396          and.w     #1024,D0
00004B1E  6600 00D6 8397          bne       DisassembleInstruction_215
                    8398   ; {
                    8399   ; Mask = 0x8000 ;                     // bit 15 = 1
00004B22  3D7C 8000 8400          move.w    #32768,-2(A6)
00004B26  FFFE      
                    8401   ; DoneSlash = 0 ;
00004B28  4246      8402          clr.w     D6
                    8403   ; for(i = 0; i < 16; i ++)    {
00004B2A  4284      8404          clr.l     D4
                    8405   DisassembleInstruction_217:
00004B2C  0C84 0000 8406          cmp.l     #16,D4
00004B30  0010      
00004B32  6C00 00A2 8407          bge       DisassembleInstruction_219
                    8408   ; printf("") ;    // fixes bug otherwise the address registers doen't get printed (don't know why), something to do with sprintf I guess
00004B36  4879 0000 8409          pea       @m68kde~1_337
00004B3A  78CA      
00004B3C  6100 0C38 8410          bsr       _printf
00004B40  584F      8411          addq.w    #4,A7
                    8412   ; if((OpCode[1] & Mask) == Mask)    {
00004B42  2042      8413          move.l    D2,A0
00004B44  3028 0002 8414          move.w    2(A0),D0
00004B48  C06E FFFE 8415          and.w     -2(A6),D0
00004B4C  B06E FFFE 8416          cmp.w     -2(A6),D0
00004B50  6600 0074 8417          bne       DisassembleInstruction_220
                    8418   ; if(i < 8 )  {
00004B54  0C84 0000 8419          cmp.l     #8,D4
00004B58  0008      
00004B5A  6C00 0030 8420          bge       DisassembleInstruction_222
                    8421   ; if(DoneSlash == 0)  {
00004B5E  48C6      8422          ext.l     D6
00004B60  4A86      8423          tst.l     D6
00004B62  6614      8424          bne.s     DisassembleInstruction_224
                    8425   ; sprintf(TempString, "D%d", i) ;
00004B64  2F04      8426          move.l    D4,-(A7)
00004B66  4879 0000 8427          pea       @m68kde~1_338
00004B6A  78CC      
00004B6C  2F0C      8428          move.l    A4,-(A7)
00004B6E  4E95      8429          jsr       (A5)
00004B70  DEFC 000C 8430          add.w     #12,A7
                    8431   ; DoneSlash = 1;
00004B74  7C01      8432          moveq     #1,D6
00004B76  6010      8433          bra.s     DisassembleInstruction_225
                    8434   DisassembleInstruction_224:
                    8435   ; }
                    8436   ; else
                    8437   ; sprintf(TempString, "/D%d", i) ;
00004B78  2F04      8438          move.l    D4,-(A7)
00004B7A  4879 0000 8439          pea       @m68kde~1_339
00004B7E  78D0      
00004B80  2F0C      8440          move.l    A4,-(A7)
00004B82  4E95      8441          jsr       (A5)
00004B84  DEFC 000C 8442          add.w     #12,A7
                    8443   DisassembleInstruction_225:
00004B88  6000 0034 8444          bra       DisassembleInstruction_227
                    8445   DisassembleInstruction_222:
                    8446   ; }
                    8447   ; else   {
                    8448   ; if(DoneSlash == 0)  {
00004B8C  48C6      8449          ext.l     D6
00004B8E  4A86      8450          tst.l     D6
00004B90  6618      8451          bne.s     DisassembleInstruction_226
                    8452   ; sprintf(TempString, "A%d", i-8) ;
00004B92  2204      8453          move.l    D4,D1
00004B94  5181      8454          subq.l    #8,D1
00004B96  2F01      8455          move.l    D1,-(A7)
00004B98  4879 0000 8456          pea       @m68kde~1_340
00004B9C  78D6      
00004B9E  2F0C      8457          move.l    A4,-(A7)
00004BA0  4E95      8458          jsr       (A5)
00004BA2  DEFC 000C 8459          add.w     #12,A7
                    8460   ; DoneSlash = 1;
00004BA6  7C01      8461          moveq     #1,D6
00004BA8  6014      8462          bra.s     DisassembleInstruction_227
                    8463   DisassembleInstruction_226:
                    8464   ; }
                    8465   ; else
                    8466   ; sprintf(TempString, "/A%d", i-8) ;
00004BAA  2204      8467          move.l    D4,D1
00004BAC  5181      8468          subq.l    #8,D1
00004BAE  2F01      8469          move.l    D1,-(A7)
00004BB0  4879 0000 8470          pea       @m68kde~1_341
00004BB4  78DA      
00004BB6  2F0C      8471          move.l    A4,-(A7)
00004BB8  4E95      8472          jsr       (A5)
00004BBA  DEFC 000C 8473          add.w     #12,A7
                    8474   DisassembleInstruction_227:
                    8475   ; }
                    8476   ; strcatInstruction(TempString) ;
00004BBE  2F0C      8477          move.l    A4,-(A7)
00004BC0  6100 C150 8478          bsr       _strcatInstruction
00004BC4  584F      8479          addq.w    #4,A7
                    8480   DisassembleInstruction_220:
                    8481   ; }
                    8482   ; Mask = Mask >> 1 ;
00004BC6  302E FFFE 8483          move.w    -2(A6),D0
00004BCA  E280      8484          asr.l     #1,D0
00004BCC  3D40 FFFE 8485          move.w    D0,-2(A6)
00004BD0  5284      8486          addq.l    #1,D4
00004BD2  6000 FF58 8487          bra       DisassembleInstruction_217
                    8488   DisassembleInstruction_219:
                    8489   ; }
                    8490   ; strcatInstruction(",") ;
00004BD6  4879 0000 8491          pea       @m68kde~1_342
00004BDA  78E0      
00004BDC  6100 C134 8492          bsr       _strcatInstruction
00004BE0  584F      8493          addq.w    #4,A7
                    8494   ; Decode6BitEA(OpCode,0,0,0) ;
00004BE2  42A7      8495          clr.l     -(A7)
00004BE4  42A7      8496          clr.l     -(A7)
00004BE6  42A7      8497          clr.l     -(A7)
00004BE8  2F02      8498          move.l    D2,-(A7)
00004BEA  6100 E4F2 8499          bsr       _Decode6BitEA
00004BEE  DEFC 0010 8500          add.w     #16,A7
00004BF2  6000 00C6 8501          bra       DisassembleInstruction_230
                    8502   DisassembleInstruction_215:
                    8503   ; }
                    8504   ; //movem  (An)+,reg
                    8505   ; else    {
                    8506   ; Decode6BitEA(OpCode,0,0,0) ;
00004BF6  42A7      8507          clr.l     -(A7)
00004BF8  42A7      8508          clr.l     -(A7)
00004BFA  42A7      8509          clr.l     -(A7)
00004BFC  2F02      8510          move.l    D2,-(A7)
00004BFE  6100 E4DE 8511          bsr       _Decode6BitEA
00004C02  DEFC 0010 8512          add.w     #16,A7
                    8513   ; strcatInstruction(",") ;
00004C06  4879 0000 8514          pea       @m68kde~1_343
00004C0A  78E2      
00004C0C  6100 C104 8515          bsr       _strcatInstruction
00004C10  584F      8516          addq.w    #4,A7
                    8517   ; Mask = 0x0001 ;                     // bit 0 = 1
00004C12  3D7C 0001 8518          move.w    #1,-2(A6)
00004C16  FFFE      
                    8519   ; DoneSlash = 0 ;
00004C18  4246      8520          clr.w     D6
                    8521   ; for(i = 0; i < 16 ; i ++)    {
00004C1A  4284      8522          clr.l     D4
                    8523   DisassembleInstruction_228:
00004C1C  0C84 0000 8524          cmp.l     #16,D4
00004C20  0010      
00004C22  6C00 0096 8525          bge       DisassembleInstruction_230
                    8526   ; if((OpCode[1] & Mask) == Mask)    {
00004C26  2042      8527          move.l    D2,A0
00004C28  3028 0002 8528          move.w    2(A0),D0
00004C2C  C06E FFFE 8529          and.w     -2(A6),D0
00004C30  B06E FFFE 8530          cmp.w     -2(A6),D0
00004C34  6600 0074 8531          bne       DisassembleInstruction_231
                    8532   ; if(i < 8)   {       // data registers in bits 7-0
00004C38  0C84 0000 8533          cmp.l     #8,D4
00004C3C  0008      
00004C3E  6C00 0030 8534          bge       DisassembleInstruction_233
                    8535   ; if(DoneSlash == 0)  {
00004C42  48C6      8536          ext.l     D6
00004C44  4A86      8537          tst.l     D6
00004C46  6614      8538          bne.s     DisassembleInstruction_235
                    8539   ; sprintf(TempString, "D%d", i) ;
00004C48  2F04      8540          move.l    D4,-(A7)
00004C4A  4879 0000 8541          pea       @m68kde~1_344
00004C4E  78E4      
00004C50  2F0C      8542          move.l    A4,-(A7)
00004C52  4E95      8543          jsr       (A5)
00004C54  DEFC 000C 8544          add.w     #12,A7
                    8545   ; DoneSlash = 1;
00004C58  7C01      8546          moveq     #1,D6
00004C5A  6010      8547          bra.s     DisassembleInstruction_236
                    8548   DisassembleInstruction_235:
                    8549   ; }
                    8550   ; else
                    8551   ; sprintf(TempString, "/D%d", i) ;
00004C5C  2F04      8552          move.l    D4,-(A7)
00004C5E  4879 0000 8553          pea       @m68kde~1_345
00004C62  78E8      
00004C64  2F0C      8554          move.l    A4,-(A7)
00004C66  4E95      8555          jsr       (A5)
00004C68  DEFC 000C 8556          add.w     #12,A7
                    8557   DisassembleInstruction_236:
00004C6C  6000 0034 8558          bra       DisassembleInstruction_238
                    8559   DisassembleInstruction_233:
                    8560   ; }
                    8561   ; else    {
                    8562   ; if(DoneSlash == 0)  {
00004C70  48C6      8563          ext.l     D6
00004C72  4A86      8564          tst.l     D6
00004C74  6618      8565          bne.s     DisassembleInstruction_237
                    8566   ; sprintf(TempString, "A%d", i-8) ;
00004C76  2204      8567          move.l    D4,D1
00004C78  5181      8568          subq.l    #8,D1
00004C7A  2F01      8569          move.l    D1,-(A7)
00004C7C  4879 0000 8570          pea       @m68kde~1_346
00004C80  78EE      
00004C82  2F0C      8571          move.l    A4,-(A7)
00004C84  4E95      8572          jsr       (A5)
00004C86  DEFC 000C 8573          add.w     #12,A7
                    8574   ; DoneSlash = 1;
00004C8A  7C01      8575          moveq     #1,D6
00004C8C  6014      8576          bra.s     DisassembleInstruction_238
                    8577   DisassembleInstruction_237:
                    8578   ; }
                    8579   ; else
                    8580   ; sprintf(TempString, "/A%d", i-8) ;
00004C8E  2204      8581          move.l    D4,D1
00004C90  5181      8582          subq.l    #8,D1
00004C92  2F01      8583          move.l    D1,-(A7)
00004C94  4879 0000 8584          pea       @m68kde~1_347
00004C98  78F2      
00004C9A  2F0C      8585          move.l    A4,-(A7)
00004C9C  4E95      8586          jsr       (A5)
00004C9E  DEFC 000C 8587          add.w     #12,A7
                    8588   DisassembleInstruction_238:
                    8589   ; }
                    8590   ; strcatInstruction(TempString) ;
00004CA2  2F0C      8591          move.l    A4,-(A7)
00004CA4  6100 C06C 8592          bsr       _strcatInstruction
00004CA8  584F      8593          addq.w    #4,A7
                    8594   DisassembleInstruction_231:
                    8595   ; }
                    8596   ; Mask = Mask << 1 ;
00004CAA  302E FFFE 8597          move.w    -2(A6),D0
00004CAE  E380      8598          asl.l     #1,D0
00004CB0  3D40 FFFE 8599          move.w    D0,-2(A6)
00004CB4  5284      8600          addq.l    #1,D4
00004CB6  6000 FF64 8601          bra       DisassembleInstruction_228
                    8602   DisassembleInstruction_230:
                    8603   ; }
                    8604   ; }
                    8605   ; }
                    8606   ; }
                    8607   ; /////////////////////////////////////////////////////////////////////////////////
                    8608   ; // if instruction is MOVEP
                    8609   ; /////////////////////////////////////////////////////////////////////////////////
                    8610   ; if((*OpCode & (unsigned short int)(0xF038)) == (unsigned short int)(0x0008))
00004CBA  2042      8611          move.l    D2,A0
00004CBC  3010      8612          move.w    (A0),D0
00004CBE  C07C F038 8613          and.w     #61496,D0
00004CC2  0C40 0008 8614          cmp.w     #8,D0
00004CC6  6600 0116 8615          bne       DisassembleInstruction_247
                    8616   ; {
                    8617   ; InstructionSize = 1;
00004CCA  24BC 0000 8618          move.l    #1,(A2)
00004CCE  0001      
                    8619   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004CD0  2042      8620          move.l    D2,A0
00004CD2  3010      8621          move.w    (A0),D0
00004CD4  48C0      8622          ext.l     D0
00004CD6  E080      8623          asr.l     #8,D0
00004CD8  E280      8624          asr.l     #1,D0
00004CDA  C07C 0007 8625          and.w     #7,D0
00004CDE  3A00      8626          move.w    D0,D5
                    8627   ; AddressRegister = (*OpCode & (unsigned short int)(0x0007)) ;
00004CE0  2042      8628          move.l    D2,A0
00004CE2  3010      8629          move.w    (A0),D0
00004CE4  C07C 0007 8630          and.w     #7,D0
00004CE8  3D40 FFF8 8631          move.w    D0,-8(A6)
                    8632   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007)  ;
00004CEC  2042      8633          move.l    D2,A0
00004CEE  3010      8634          move.w    (A0),D0
00004CF0  48C0      8635          ext.l     D0
00004CF2  EC80      8636          asr.l     #6,D0
00004CF4  C07C 0007 8637          and.w     #7,D0
00004CF8  3600      8638          move.w    D0,D3
                    8639   ; InstructionSize++ ;
00004CFA  5292      8640          addq.l    #1,(A2)
                    8641   ; if(OpMode == (unsigned short int)(0x4)) // transfer word from memory to register
00004CFC  0C43 0004 8642          cmp.w     #4,D3
00004D00  6634      8643          bne.s     DisassembleInstruction_241
                    8644   ; sprintf(Instruction, "MOVEP.W $%X(A%d),D%d", OpCode[1], AddressRegister, DataRegister) ;
00004D02  CABC 0000 8645          and.l     #65535,D5
00004D06  FFFF      
00004D08  2F05      8646          move.l    D5,-(A7)
00004D0A  322E FFF8 8647          move.w    -8(A6),D1
00004D0E  C2BC 0000 8648          and.l     #65535,D1
00004D12  FFFF      
00004D14  2F01      8649          move.l    D1,-(A7)
00004D16  2042      8650          move.l    D2,A0
00004D18  3228 0002 8651          move.w    2(A0),D1
00004D1C  48C1      8652          ext.l     D1
00004D1E  2F01      8653          move.l    D1,-(A7)
00004D20  4879 0000 8654          pea       @m68kde~1_348
00004D24  78F8      
00004D26  4879 0084 8655          pea       _Instruction
00004D2A  04DC      
00004D2C  4E95      8656          jsr       (A5)
00004D2E  DEFC 0014 8657          add.w     #20,A7
00004D32  6000 00AA 8658          bra       DisassembleInstruction_247
                    8659   DisassembleInstruction_241:
                    8660   ; else if(OpMode == (unsigned short int)(0x5)) // transfer long from memory to register
00004D36  0C43 0005 8661          cmp.w     #5,D3
00004D3A  6634      8662          bne.s     DisassembleInstruction_243
                    8663   ; sprintf(Instruction, "MOVEP.L $%X(A%d),D%d", OpCode[1], AddressRegister, DataRegister) ;
00004D3C  CABC 0000 8664          and.l     #65535,D5
00004D40  FFFF      
00004D42  2F05      8665          move.l    D5,-(A7)
00004D44  322E FFF8 8666          move.w    -8(A6),D1
00004D48  C2BC 0000 8667          and.l     #65535,D1
00004D4C  FFFF      
00004D4E  2F01      8668          move.l    D1,-(A7)
00004D50  2042      8669          move.l    D2,A0
00004D52  3228 0002 8670          move.w    2(A0),D1
00004D56  48C1      8671          ext.l     D1
00004D58  2F01      8672          move.l    D1,-(A7)
00004D5A  4879 0000 8673          pea       @m68kde~1_349
00004D5E  790E      
00004D60  4879 0084 8674          pea       _Instruction
00004D64  04DC      
00004D66  4E95      8675          jsr       (A5)
00004D68  DEFC 0014 8676          add.w     #20,A7
00004D6C  6000 0070 8677          bra       DisassembleInstruction_247
                    8678   DisassembleInstruction_243:
                    8679   ; else if(OpMode == (unsigned short int)(0x6)) // transfer long from register to memory
00004D70  0C43 0006 8680          cmp.w     #6,D3
00004D74  6632      8681          bne.s     DisassembleInstruction_245
                    8682   ; sprintf(Instruction, "MOVEP.W D%d,$%X(A%d)", DataRegister, OpCode[1], AddressRegister ) ;
00004D76  322E FFF8 8683          move.w    -8(A6),D1
00004D7A  C2BC 0000 8684          and.l     #65535,D1
00004D7E  FFFF      
00004D80  2F01      8685          move.l    D1,-(A7)
00004D82  2042      8686          move.l    D2,A0
00004D84  3228 0002 8687          move.w    2(A0),D1
00004D88  48C1      8688          ext.l     D1
00004D8A  2F01      8689          move.l    D1,-(A7)
00004D8C  CABC 0000 8690          and.l     #65535,D5
00004D90  FFFF      
00004D92  2F05      8691          move.l    D5,-(A7)
00004D94  4879 0000 8692          pea       @m68kde~1_350
00004D98  7924      
00004D9A  4879 0084 8693          pea       _Instruction
00004D9E  04DC      
00004DA0  4E95      8694          jsr       (A5)
00004DA2  DEFC 0014 8695          add.w     #20,A7
00004DA6  6036      8696          bra.s     DisassembleInstruction_247
                    8697   DisassembleInstruction_245:
                    8698   ; else if(OpMode == (unsigned short int)(0x7)) // transfer long from register to memory
00004DA8  0C43 0007 8699          cmp.w     #7,D3
00004DAC  6630      8700          bne.s     DisassembleInstruction_247
                    8701   ; sprintf(Instruction, "MOVEP.L D%d,$%X(A%d)", DataRegister, OpCode[1], AddressRegister ) ;
00004DAE  322E FFF8 8702          move.w    -8(A6),D1
00004DB2  C2BC 0000 8703          and.l     #65535,D1
00004DB6  FFFF      
00004DB8  2F01      8704          move.l    D1,-(A7)
00004DBA  2042      8705          move.l    D2,A0
00004DBC  3228 0002 8706          move.w    2(A0),D1
00004DC0  48C1      8707          ext.l     D1
00004DC2  2F01      8708          move.l    D1,-(A7)
00004DC4  CABC 0000 8709          and.l     #65535,D5
00004DC8  FFFF      
00004DCA  2F05      8710          move.l    D5,-(A7)
00004DCC  4879 0000 8711          pea       @m68kde~1_351
00004DD0  793A      
00004DD2  4879 0084 8712          pea       _Instruction
00004DD6  04DC      
00004DD8  4E95      8713          jsr       (A5)
00004DDA  DEFC 0014 8714          add.w     #20,A7
                    8715   DisassembleInstruction_247:
                    8716   ; }
                    8717   ; /////////////////////////////////////////////////////////////////////////////////
                    8718   ; // if instruction is MOVEQ
                    8719   ; /////////////////////////////////////////////////////////////////////////////////
                    8720   ; if((*OpCode & (unsigned short int)(0xF100)) == (unsigned short int)(0x7000))
00004DDE  2042      8721          move.l    D2,A0
00004DE0  3010      8722          move.w    (A0),D0
00004DE2  C07C F100 8723          and.w     #61696,D0
00004DE6  0C40 7000 8724          cmp.w     #28672,D0
00004DEA  6600 0042 8725          bne       DisassembleInstruction_249
                    8726   ; {
                    8727   ; InstructionSize = 1;
00004DEE  24BC 0000 8728          move.l    #1,(A2)
00004DF2  0001      
                    8729   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007) ;
00004DF4  2042      8730          move.l    D2,A0
00004DF6  3010      8731          move.w    (A0),D0
00004DF8  48C0      8732          ext.l     D0
00004DFA  E080      8733          asr.l     #8,D0
00004DFC  E280      8734          asr.l     #1,D0
00004DFE  C07C 0007 8735          and.w     #7,D0
00004E02  3A00      8736          move.w    D0,D5
                    8737   ; sprintf(Instruction, "MOVEQ #$%X,D%d", (*OpCode & (unsigned short int)(0x00FF)), DataRegister) ;
00004E04  CABC 0000 8738          and.l     #65535,D5
00004E08  FFFF      
00004E0A  2F05      8739          move.l    D5,-(A7)
00004E0C  2042      8740          move.l    D2,A0
00004E0E  3210      8741          move.w    (A0),D1
00004E10  C27C 00FF 8742          and.w     #255,D1
00004E14  C2BC 0000 8743          and.l     #65535,D1
00004E18  FFFF      
00004E1A  2F01      8744          move.l    D1,-(A7)
00004E1C  4879 0000 8745          pea       @m68kde~1_352
00004E20  7950      
00004E22  4879 0084 8746          pea       _Instruction
00004E26  04DC      
00004E28  4E95      8747          jsr       (A5)
00004E2A  DEFC 0010 8748          add.w     #16,A7
                    8749   DisassembleInstruction_249:
                    8750   ; }
                    8751   ; /////////////////////////////////////////////////////////////////////////////////
                    8752   ; // if instruction is MULS.W
                    8753   ; /////////////////////////////////////////////////////////////////////////////////
                    8754   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0xC1C0))
00004E2E  2042      8755          move.l    D2,A0
00004E30  3010      8756          move.w    (A0),D0
00004E32  C07C F1C0 8757          and.w     #61888,D0
00004E36  0C40 C1C0 8758          cmp.w     #49600,D0
00004E3A  6600 0050 8759          bne       DisassembleInstruction_251
                    8760   ; {
                    8761   ; InstructionSize = 1;
00004E3E  24BC 0000 8762          move.l    #1,(A2)
00004E42  0001      
                    8763   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004E44  2042      8764          move.l    D2,A0
00004E46  3010      8765          move.w    (A0),D0
00004E48  48C0      8766          ext.l     D0
00004E4A  E080      8767          asr.l     #8,D0
00004E4C  E280      8768          asr.l     #1,D0
00004E4E  C07C 0007 8769          and.w     #7,D0
00004E52  3A00      8770          move.w    D0,D5
                    8771   ; strcpyInstruction("MULS ");
00004E54  4879 0000 8772          pea       @m68kde~1_353
00004E58  7960      
00004E5A  4E93      8773          jsr       (A3)
00004E5C  584F      8774          addq.w    #4,A7
                    8775   ; Decode6BitEA(OpCode,0,0,0) ;
00004E5E  42A7      8776          clr.l     -(A7)
00004E60  42A7      8777          clr.l     -(A7)
00004E62  42A7      8778          clr.l     -(A7)
00004E64  2F02      8779          move.l    D2,-(A7)
00004E66  6100 E276 8780          bsr       _Decode6BitEA
00004E6A  DEFC 0010 8781          add.w     #16,A7
                    8782   ; sprintf(TempString, ",D%d", DataRegister) ;
00004E6E  CABC 0000 8783          and.l     #65535,D5
00004E72  FFFF      
00004E74  2F05      8784          move.l    D5,-(A7)
00004E76  4879 0000 8785          pea       @m68kde~1_354
00004E7A  7966      
00004E7C  2F0C      8786          move.l    A4,-(A7)
00004E7E  4E95      8787          jsr       (A5)
00004E80  DEFC 000C 8788          add.w     #12,A7
                    8789   ; strcatInstruction(TempString);
00004E84  2F0C      8790          move.l    A4,-(A7)
00004E86  6100 BE8A 8791          bsr       _strcatInstruction
00004E8A  584F      8792          addq.w    #4,A7
                    8793   DisassembleInstruction_251:
                    8794   ; }
                    8795   ; /////////////////////////////////////////////////////////////////////////////////
                    8796   ; // if instruction is MULU.W
                    8797   ; /////////////////////////////////////////////////////////////////////////////////
                    8798   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0xC0C0))
00004E8C  2042      8799          move.l    D2,A0
00004E8E  3010      8800          move.w    (A0),D0
00004E90  C07C F1C0 8801          and.w     #61888,D0
00004E94  0C40 C0C0 8802          cmp.w     #49344,D0
00004E98  6600 0050 8803          bne       DisassembleInstruction_253
                    8804   ; {
                    8805   ; InstructionSize = 1;
00004E9C  24BC 0000 8806          move.l    #1,(A2)
00004EA0  0001      
                    8807   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004EA2  2042      8808          move.l    D2,A0
00004EA4  3010      8809          move.w    (A0),D0
00004EA6  48C0      8810          ext.l     D0
00004EA8  E080      8811          asr.l     #8,D0
00004EAA  E280      8812          asr.l     #1,D0
00004EAC  C07C 0007 8813          and.w     #7,D0
00004EB0  3A00      8814          move.w    D0,D5
                    8815   ; strcpyInstruction("MULU ");
00004EB2  4879 0000 8816          pea       @m68kde~1_355
00004EB6  796C      
00004EB8  4E93      8817          jsr       (A3)
00004EBA  584F      8818          addq.w    #4,A7
                    8819   ; Decode6BitEA(OpCode,0,0,0) ;
00004EBC  42A7      8820          clr.l     -(A7)
00004EBE  42A7      8821          clr.l     -(A7)
00004EC0  42A7      8822          clr.l     -(A7)
00004EC2  2F02      8823          move.l    D2,-(A7)
00004EC4  6100 E218 8824          bsr       _Decode6BitEA
00004EC8  DEFC 0010 8825          add.w     #16,A7
                    8826   ; sprintf(TempString, ",D%d", DataRegister) ;
00004ECC  CABC 0000 8827          and.l     #65535,D5
00004ED0  FFFF      
00004ED2  2F05      8828          move.l    D5,-(A7)
00004ED4  4879 0000 8829          pea       @m68kde~1_356
00004ED8  7972      
00004EDA  2F0C      8830          move.l    A4,-(A7)
00004EDC  4E95      8831          jsr       (A5)
00004EDE  DEFC 000C 8832          add.w     #12,A7
                    8833   ; strcatInstruction(TempString);
00004EE2  2F0C      8834          move.l    A4,-(A7)
00004EE4  6100 BE2C 8835          bsr       _strcatInstruction
00004EE8  584F      8836          addq.w    #4,A7
                    8837   DisassembleInstruction_253:
                    8838   ; }
                    8839   ; /////////////////////////////////////////////////////////////////////////////////
                    8840   ; // if instruction is NBCD <EA>
                    8841   ; /////////////////////////////////////////////////////////////////////////////////
                    8842   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4800))
00004EEA  2042      8843          move.l    D2,A0
00004EEC  3010      8844          move.w    (A0),D0
00004EEE  C07C FFC0 8845          and.w     #65472,D0
00004EF2  0C40 4800 8846          cmp.w     #18432,D0
00004EF6  6620      8847          bne.s     DisassembleInstruction_255
                    8848   ; {
                    8849   ; InstructionSize = 1;
00004EF8  24BC 0000 8850          move.l    #1,(A2)
00004EFC  0001      
                    8851   ; strcpyInstruction("NBCD ");
00004EFE  4879 0000 8852          pea       @m68kde~1_357
00004F02  7978      
00004F04  4E93      8853          jsr       (A3)
00004F06  584F      8854          addq.w    #4,A7
                    8855   ; Decode6BitEA(OpCode,0,0,0);
00004F08  42A7      8856          clr.l     -(A7)
00004F0A  42A7      8857          clr.l     -(A7)
00004F0C  42A7      8858          clr.l     -(A7)
00004F0E  2F02      8859          move.l    D2,-(A7)
00004F10  6100 E1CC 8860          bsr       _Decode6BitEA
00004F14  DEFC 0010 8861          add.w     #16,A7
                    8862   DisassembleInstruction_255:
                    8863   ; }
                    8864   ; /////////////////////////////////////////////////////////////////////////////////
                    8865   ; // if instruction is NEG <EA>
                    8866   ; /////////////////////////////////////////////////////////////////////////////////
                    8867   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4400))
00004F18  2042      8868          move.l    D2,A0
00004F1A  3010      8869          move.w    (A0),D0
00004F1C  C07C FF00 8870          and.w     #65280,D0
00004F20  0C40 4400 8871          cmp.w     #17408,D0
00004F24  6600 0048 8872          bne       DisassembleInstruction_259
                    8873   ; {
                    8874   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
00004F28  2042      8875          move.l    D2,A0
00004F2A  3010      8876          move.w    (A0),D0
00004F2C  48C0      8877          ext.l     D0
00004F2E  EC80      8878          asr.l     #6,D0
00004F30  C07C 0003 8879          and.w     #3,D0
00004F34  0C40 0003 8880          cmp.w     #3,D0
00004F38  6700 0034 8881          beq       DisassembleInstruction_259
                    8882   ; {
                    8883   ; InstructionSize = 1;
00004F3C  24BC 0000 8884          move.l    #1,(A2)
00004F40  0001      
                    8885   ; strcpyInstruction("NEG");
00004F42  4879 0000 8886          pea       @m68kde~1_358
00004F46  797E      
00004F48  4E93      8887          jsr       (A3)
00004F4A  584F      8888          addq.w    #4,A7
                    8889   ; Decode2BitOperandSize(*OpCode) ;
00004F4C  2042      8890          move.l    D2,A0
00004F4E  3210      8891          move.w    (A0),D1
00004F50  C2BC 0000 8892          and.l     #65535,D1
00004F54  FFFF      
00004F56  2F01      8893          move.l    D1,-(A7)
00004F58  6100 DEE8 8894          bsr       _Decode2BitOperandSize
00004F5C  584F      8895          addq.w    #4,A7
                    8896   ; Decode6BitEA(OpCode,0,0,0);
00004F5E  42A7      8897          clr.l     -(A7)
00004F60  42A7      8898          clr.l     -(A7)
00004F62  42A7      8899          clr.l     -(A7)
00004F64  2F02      8900          move.l    D2,-(A7)
00004F66  6100 E176 8901          bsr       _Decode6BitEA
00004F6A  DEFC 0010 8902          add.w     #16,A7
                    8903   DisassembleInstruction_259:
                    8904   ; }
                    8905   ; }
                    8906   ; /////////////////////////////////////////////////////////////////////////////////
                    8907   ; // if instruction is NEGX <EA>
                    8908   ; /////////////////////////////////////////////////////////////////////////////////
                    8909   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4000))
00004F6E  2042      8910          move.l    D2,A0
00004F70  3010      8911          move.w    (A0),D0
00004F72  C07C FF00 8912          and.w     #65280,D0
00004F76  0C40 4000 8913          cmp.w     #16384,D0
00004F7A  6600 0048 8914          bne       DisassembleInstruction_263
                    8915   ; {
                    8916   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
00004F7E  2042      8917          move.l    D2,A0
00004F80  3010      8918          move.w    (A0),D0
00004F82  48C0      8919          ext.l     D0
00004F84  EC80      8920          asr.l     #6,D0
00004F86  C07C 0003 8921          and.w     #3,D0
00004F8A  0C40 0003 8922          cmp.w     #3,D0
00004F8E  6700 0034 8923          beq       DisassembleInstruction_263
                    8924   ; {
                    8925   ; InstructionSize = 1;
00004F92  24BC 0000 8926          move.l    #1,(A2)
00004F96  0001      
                    8927   ; strcpyInstruction("NEGX");
00004F98  4879 0000 8928          pea       @m68kde~1_359
00004F9C  7982      
00004F9E  4E93      8929          jsr       (A3)
00004FA0  584F      8930          addq.w    #4,A7
                    8931   ; Decode2BitOperandSize(*OpCode) ;
00004FA2  2042      8932          move.l    D2,A0
00004FA4  3210      8933          move.w    (A0),D1
00004FA6  C2BC 0000 8934          and.l     #65535,D1
00004FAA  FFFF      
00004FAC  2F01      8935          move.l    D1,-(A7)
00004FAE  6100 DE92 8936          bsr       _Decode2BitOperandSize
00004FB2  584F      8937          addq.w    #4,A7
                    8938   ; Decode6BitEA(OpCode,0,0,0);
00004FB4  42A7      8939          clr.l     -(A7)
00004FB6  42A7      8940          clr.l     -(A7)
00004FB8  42A7      8941          clr.l     -(A7)
00004FBA  2F02      8942          move.l    D2,-(A7)
00004FBC  6100 E120 8943          bsr       _Decode6BitEA
00004FC0  DEFC 0010 8944          add.w     #16,A7
                    8945   DisassembleInstruction_263:
                    8946   ; }
                    8947   ; }
                    8948   ; /////////////////////////////////////////////////////////////////////////////////
                    8949   ; // if instruction is NOP
                    8950   ; /////////////////////////////////////////////////////////////////////////////////
                    8951   ; if(*OpCode == (unsigned short int)(0x4E71))
00004FC4  2042      8952          move.l    D2,A0
00004FC6  3010      8953          move.w    (A0),D0
00004FC8  0C40 4E71 8954          cmp.w     #20081,D0
00004FCC  6610      8955          bne.s     DisassembleInstruction_265
                    8956   ; {
                    8957   ; InstructionSize = 1;
00004FCE  24BC 0000 8958          move.l    #1,(A2)
00004FD2  0001      
                    8959   ; strcpyInstruction("NOP");
00004FD4  4879 0000 8960          pea       @m68kde~1_360
00004FD8  7988      
00004FDA  4E93      8961          jsr       (A3)
00004FDC  584F      8962          addq.w    #4,A7
                    8963   DisassembleInstruction_265:
                    8964   ; }
                    8965   ; /////////////////////////////////////////////////////////////////////////////////
                    8966   ; // if instruction is NOT <EA>
                    8967   ; /////////////////////////////////////////////////////////////////////////////////
                    8968   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4600))
00004FDE  2042      8969          move.l    D2,A0
00004FE0  3010      8970          move.w    (A0),D0
00004FE2  C07C FF00 8971          and.w     #65280,D0
00004FE6  0C40 4600 8972          cmp.w     #17920,D0
00004FEA  6600 0048 8973          bne       DisassembleInstruction_269
                    8974   ; {
                    8975   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
00004FEE  2042      8976          move.l    D2,A0
00004FF0  3010      8977          move.w    (A0),D0
00004FF2  48C0      8978          ext.l     D0
00004FF4  EC80      8979          asr.l     #6,D0
00004FF6  C07C 0003 8980          and.w     #3,D0
00004FFA  0C40 0003 8981          cmp.w     #3,D0
00004FFE  6700 0034 8982          beq       DisassembleInstruction_269
                    8983   ; {
                    8984   ; InstructionSize = 1;
00005002  24BC 0000 8985          move.l    #1,(A2)
00005006  0001      
                    8986   ; strcpyInstruction("NOT");
00005008  4879 0000 8987          pea       @m68kde~1_361
0000500C  798C      
0000500E  4E93      8988          jsr       (A3)
00005010  584F      8989          addq.w    #4,A7
                    8990   ; Decode2BitOperandSize(*OpCode) ;
00005012  2042      8991          move.l    D2,A0
00005014  3210      8992          move.w    (A0),D1
00005016  C2BC 0000 8993          and.l     #65535,D1
0000501A  FFFF      
0000501C  2F01      8994          move.l    D1,-(A7)
0000501E  6100 DE22 8995          bsr       _Decode2BitOperandSize
00005022  584F      8996          addq.w    #4,A7
                    8997   ; Decode6BitEA(OpCode,0,0,0);
00005024  42A7      8998          clr.l     -(A7)
00005026  42A7      8999          clr.l     -(A7)
00005028  42A7      9000          clr.l     -(A7)
0000502A  2F02      9001          move.l    D2,-(A7)
0000502C  6100 E0B0 9002          bsr       _Decode6BitEA
00005030  DEFC 0010 9003          add.w     #16,A7
                    9004   DisassembleInstruction_269:
                    9005   ; }
                    9006   ; }
                    9007   ; /////////////////////////////////////////////////////////////////////////////////
                    9008   ; // if instruction is OR <EA>,Dn or OR Dn,<EA>
                    9009   ; /////////////////////////////////////////////////////////////////////////////////
                    9010   ; if((*OpCode & (unsigned short int)(0xF000)) == (unsigned short int)(0x8000))
00005034  2042      9011          move.l    D2,A0
00005036  3010      9012          move.w    (A0),D0
00005038  C07C F000 9013          and.w     #61440,D0
0000503C  0C40 8000 9014          cmp.w     #32768,D0
00005040  6600 003A 9015          bne       DisassembleInstruction_273
                    9016   ; {
                    9017   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
00005044  2042      9018          move.l    D2,A0
00005046  3010      9019          move.w    (A0),D0
00005048  48C0      9020          ext.l     D0
0000504A  EC80      9021          asr.l     #6,D0
0000504C  C07C 0007 9022          and.w     #7,D0
00005050  3600      9023          move.w    D0,D3
                    9024   ; if( (OpMode <= (unsigned short int)(0x0002)) ||
00005052  0C43 0002 9025          cmp.w     #2,D3
00005056  630C      9026          bls.s     DisassembleInstruction_275
00005058  0C43 0004 9027          cmp.w     #4,D3
0000505C  651E      9028          blo.s     DisassembleInstruction_273
0000505E  0C43 0006 9029          cmp.w     #6,D3
00005062  6218      9030          bhi.s     DisassembleInstruction_273
                    9031   DisassembleInstruction_275:
                    9032   ; ((OpMode >= (unsigned short int)(0x0004)) && (OpMode <= (unsigned short int)(0x0006))))
                    9033   ; {
                    9034   ; InstructionSize = 1;
00005064  24BC 0000 9035          move.l    #1,(A2)
00005068  0001      
                    9036   ; strcpyInstruction("OR") ;
0000506A  4879 0000 9037          pea       @m68kde~1_362
0000506E  7990      
00005070  4E93      9038          jsr       (A3)
00005072  584F      9039          addq.w    #4,A7
                    9040   ; Decode3BitOperandMode(OpCode) ;
00005074  2F02      9041          move.l    D2,-(A7)
00005076  6100 E498 9042          bsr       _Decode3BitOperandMode
0000507A  584F      9043          addq.w    #4,A7
                    9044   DisassembleInstruction_273:
                    9045   ; }
                    9046   ; }
                    9047   ; /////////////////////////////////////////////////////////////////////////////////
                    9048   ; // if instruction is ORI to CCR
                    9049   ; /////////////////////////////////////////////////////////////////////////////////
                    9050   ; if(*OpCode == (unsigned short int)(0x003C))   {
0000507C  2042      9051          move.l    D2,A0
0000507E  3010      9052          move.w    (A0),D0
00005080  0C40 003C 9053          cmp.w     #60,D0
00005084  662A      9054          bne.s     DisassembleInstruction_276
                    9055   ; sprintf(Instruction, "ORI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
00005086  2042      9056          move.l    D2,A0
00005088  3228 0002 9057          move.w    2(A0),D1
0000508C  C27C 00FF 9058          and.w     #255,D1
00005090  C2BC 0000 9059          and.l     #65535,D1
00005094  FFFF      
00005096  2F01      9060          move.l    D1,-(A7)
00005098  4879 0000 9061          pea       @m68kde~1_363
0000509C  7994      
0000509E  4879 0084 9062          pea       _Instruction
000050A2  04DC      
000050A4  4E95      9063          jsr       (A5)
000050A6  DEFC 000C 9064          add.w     #12,A7
                    9065   ; InstructionSize = 2;
000050AA  24BC 0000 9066          move.l    #2,(A2)
000050AE  0002      
                    9067   DisassembleInstruction_276:
                    9068   ; }
                    9069   ; /////////////////////////////////////////////////////////////////////////////////
                    9070   ; // if instruction is ORI #data,SR
                    9071   ; /////////////////////////////////////////////////////////////////////////////////
                    9072   ; if(*OpCode  == (unsigned short int)(0x007c))
000050B0  2042      9073          move.l    D2,A0
000050B2  3010      9074          move.w    (A0),D0
000050B4  0C40 007C 9075          cmp.w     #124,D0
000050B8  6622      9076          bne.s     DisassembleInstruction_278
                    9077   ; {
                    9078   ; InstructionSize = 2;
000050BA  24BC 0000 9079          move.l    #2,(A2)
000050BE  0002      
                    9080   ; sprintf(Instruction, "ORI  #$%X,SR", OpCode[1]);
000050C0  2042      9081          move.l    D2,A0
000050C2  3228 0002 9082          move.w    2(A0),D1
000050C6  48C1      9083          ext.l     D1
000050C8  2F01      9084          move.l    D1,-(A7)
000050CA  4879 0000 9085          pea       @m68kde~1_364
000050CE  79A2      
000050D0  4879 0084 9086          pea       _Instruction
000050D4  04DC      
000050D6  4E95      9087          jsr       (A5)
000050D8  DEFC 000C 9088          add.w     #12,A7
                    9089   DisassembleInstruction_278:
                    9090   ; }
                    9091   ; /////////////////////////////////////////////////////////////////////////////////
                    9092   ; // if instruction is PEA
                    9093   ; /////////////////////////////////////////////////////////////////////////////////
                    9094   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4840))
000050DC  2042      9095          move.l    D2,A0
000050DE  3010      9096          move.w    (A0),D0
000050E0  C07C FFC0 9097          and.w     #65472,D0
000050E4  0C40 4840 9098          cmp.w     #18496,D0
000050E8  6620      9099          bne.s     DisassembleInstruction_280
                    9100   ; {
                    9101   ; InstructionSize = 1;
000050EA  24BC 0000 9102          move.l    #1,(A2)
000050EE  0001      
                    9103   ; strcpyInstruction("PEA ");
000050F0  4879 0000 9104          pea       @m68kde~1_365
000050F4  79B0      
000050F6  4E93      9105          jsr       (A3)
000050F8  584F      9106          addq.w    #4,A7
                    9107   ; Decode6BitEA(OpCode,0,0,0);
000050FA  42A7      9108          clr.l     -(A7)
000050FC  42A7      9109          clr.l     -(A7)
000050FE  42A7      9110          clr.l     -(A7)
00005100  2F02      9111          move.l    D2,-(A7)
00005102  6100 DFDA 9112          bsr       _Decode6BitEA
00005106  DEFC 0010 9113          add.w     #16,A7
                    9114   DisassembleInstruction_280:
                    9115   ; }
                    9116   ; /////////////////////////////////////////////////////////////////////////////////
                    9117   ; // if instruction is reset
                    9118   ; /////////////////////////////////////////////////////////////////////////////////
                    9119   ; if(*OpCode  == (unsigned short int)(0x4E70))
0000510A  2042      9120          move.l    D2,A0
0000510C  3010      9121          move.w    (A0),D0
0000510E  0C40 4E70 9122          cmp.w     #20080,D0
00005112  6616      9123          bne.s     DisassembleInstruction_282
                    9124   ; {
                    9125   ; InstructionSize = 1;
00005114  24BC 0000 9126          move.l    #1,(A2)
00005118  0001      
                    9127   ; sprintf(Instruction, "RESET");
0000511A  4879 0000 9128          pea       @m68kde~1_366
0000511E  79B6      
00005120  4879 0084 9129          pea       _Instruction
00005124  04DC      
00005126  4E95      9130          jsr       (A5)
00005128  504F      9131          addq.w    #8,A7
                    9132   DisassembleInstruction_282:
                    9133   ; }
                    9134   ; /////////////////////////////////////////////////////////////////////////////////
                    9135   ; // if instruction is RTE
                    9136   ; /////////////////////////////////////////////////////////////////////////////////
                    9137   ; if(*OpCode  == (unsigned short int)(0x4E73))
0000512A  2042      9138          move.l    D2,A0
0000512C  3010      9139          move.w    (A0),D0
0000512E  0C40 4E73 9140          cmp.w     #20083,D0
00005132  6616      9141          bne.s     DisassembleInstruction_284
                    9142   ; {
                    9143   ; InstructionSize = 1;
00005134  24BC 0000 9144          move.l    #1,(A2)
00005138  0001      
                    9145   ; sprintf(Instruction, "RTE");
0000513A  4879 0000 9146          pea       @m68kde~1_367
0000513E  79BC      
00005140  4879 0084 9147          pea       _Instruction
00005144  04DC      
00005146  4E95      9148          jsr       (A5)
00005148  504F      9149          addq.w    #8,A7
                    9150   DisassembleInstruction_284:
                    9151   ; }
                    9152   ; /////////////////////////////////////////////////////////////////////////////////
                    9153   ; // if instruction is RTR
                    9154   ; /////////////////////////////////////////////////////////////////////////////////
                    9155   ; if(*OpCode == (unsigned short int)(0x4E77))
0000514A  2042      9156          move.l    D2,A0
0000514C  3010      9157          move.w    (A0),D0
0000514E  0C40 4E77 9158          cmp.w     #20087,D0
00005152  6610      9159          bne.s     DisassembleInstruction_286
                    9160   ; {
                    9161   ; InstructionSize = 1;
00005154  24BC 0000 9162          move.l    #1,(A2)
00005158  0001      
                    9163   ; strcpyInstruction("RTR");
0000515A  4879 0000 9164          pea       @m68kde~1_368
0000515E  79C0      
00005160  4E93      9165          jsr       (A3)
00005162  584F      9166          addq.w    #4,A7
                    9167   DisassembleInstruction_286:
                    9168   ; }
                    9169   ; /////////////////////////////////////////////////////////////////////////////////
                    9170   ; // if instruction is RTS
                    9171   ; /////////////////////////////////////////////////////////////////////////////////
                    9172   ; if(*OpCode == (unsigned short int)(0x4E75))
00005164  2042      9173          move.l    D2,A0
00005166  3010      9174          move.w    (A0),D0
00005168  0C40 4E75 9175          cmp.w     #20085,D0
0000516C  6610      9176          bne.s     DisassembleInstruction_288
                    9177   ; {
                    9178   ; InstructionSize = 1;
0000516E  24BC 0000 9179          move.l    #1,(A2)
00005172  0001      
                    9180   ; strcpyInstruction("RTS");
00005174  4879 0000 9181          pea       @m68kde~1_369
00005178  79C4      
0000517A  4E93      9182          jsr       (A3)
0000517C  584F      9183          addq.w    #4,A7
                    9184   DisassembleInstruction_288:
                    9185   ; }
                    9186   ; /////////////////////////////////////////////////////////////////////////////////
                    9187   ; // if instruction is STOP
                    9188   ; /////////////////////////////////////////////////////////////////////////////////
                    9189   ; if(*OpCode  == (unsigned short int)(0x4E72))
0000517E  2042      9190          move.l    D2,A0
00005180  3010      9191          move.w    (A0),D0
00005182  0C40 4E72 9192          cmp.w     #20082,D0
00005186  6622      9193          bne.s     DisassembleInstruction_290
                    9194   ; {
                    9195   ; InstructionSize = 2;
00005188  24BC 0000 9196          move.l    #2,(A2)
0000518C  0002      
                    9197   ; sprintf(Instruction, "STOP #$%X", OpCode[1]);
0000518E  2042      9198          move.l    D2,A0
00005190  3228 0002 9199          move.w    2(A0),D1
00005194  48C1      9200          ext.l     D1
00005196  2F01      9201          move.l    D1,-(A7)
00005198  4879 0000 9202          pea       @m68kde~1_370
0000519C  79C8      
0000519E  4879 0084 9203          pea       _Instruction
000051A2  04DC      
000051A4  4E95      9204          jsr       (A5)
000051A6  DEFC 000C 9205          add.w     #12,A7
                    9206   DisassembleInstruction_290:
                    9207   ; }
                    9208   ; /////////////////////////////////////////////////////////////////////////////////
                    9209   ; // if instruction is SBCD
                    9210   ; /////////////////////////////////////////////////////////////////////////////////
                    9211   ; if((*OpCode & (unsigned short int)(0xF1F0 )) == (unsigned short int)(0x8100))
000051AA  2042      9212          move.l    D2,A0
000051AC  3010      9213          move.w    (A0),D0
000051AE  C07C F1F0 9214          and.w     #61936,D0
000051B2  0C40 8100 9215          cmp.w     #33024,D0
000051B6  6600 0094 9216          bne       DisassembleInstruction_295
                    9217   ; {
                    9218   ; InstructionSize = 1;
000051BA  24BC 0000 9219          move.l    #1,(A2)
000051BE  0001      
                    9220   ; DestBits = (*OpCode >> 9) & (unsigned short int )(0x0007) ;
000051C0  2042      9221          move.l    D2,A0
000051C2  3010      9222          move.w    (A0),D0
000051C4  48C0      9223          ext.l     D0
000051C6  E080      9224          asr.l     #8,D0
000051C8  E280      9225          asr.l     #1,D0
000051CA  C07C 0007 9226          and.w     #7,D0
000051CE  3D40 FFE0 9227          move.w    D0,-32(A6)
                    9228   ; SourceBits = (*OpCode & (unsigned short int )(0x0007));
000051D2  2042      9229          move.l    D2,A0
000051D4  3010      9230          move.w    (A0),D0
000051D6  C07C 0007 9231          and.w     #7,D0
000051DA  3D40 FFDE 9232          move.w    D0,-34(A6)
                    9233   ; Mode = (*OpCode >> 3) & (unsigned short int )(0x0001) ;
000051DE  2042      9234          move.l    D2,A0
000051E0  3010      9235          move.w    (A0),D0
000051E2  48C0      9236          ext.l     D0
000051E4  E680      9237          asr.l     #3,D0
000051E6  C0BC 0000 9238          and.l     #1,D0
000051EA  0001      
000051EC  2D40 FFE4 9239          move.l    D0,-28(A6)
                    9240   ; if(Mode == 0)
000051F0  202E FFE4 9241          move.l    -28(A6),D0
000051F4  662C      9242          bne.s     DisassembleInstruction_294
                    9243   ; sprintf(Instruction, "SBCD D%d,D%d", SourceBits, DestBits) ;
000051F6  322E FFE0 9244          move.w    -32(A6),D1
000051FA  C2BC 0000 9245          and.l     #65535,D1
000051FE  FFFF      
00005200  2F01      9246          move.l    D1,-(A7)
00005202  322E FFDE 9247          move.w    -34(A6),D1
00005206  C2BC 0000 9248          and.l     #65535,D1
0000520A  FFFF      
0000520C  2F01      9249          move.l    D1,-(A7)
0000520E  4879 0000 9250          pea       @m68kde~1_371
00005212  79D2      
00005214  4879 0084 9251          pea       _Instruction
00005218  04DC      
0000521A  4E95      9252          jsr       (A5)
0000521C  DEFC 0010 9253          add.w     #16,A7
00005220  602A      9254          bra.s     DisassembleInstruction_295
                    9255   DisassembleInstruction_294:
                    9256   ; else
                    9257   ; sprintf(Instruction, "SBCD -(A%d),-(A%d)", SourceBits, DestBits) ;
00005222  322E FFE0 9258          move.w    -32(A6),D1
00005226  C2BC 0000 9259          and.l     #65535,D1
0000522A  FFFF      
0000522C  2F01      9260          move.l    D1,-(A7)
0000522E  322E FFDE 9261          move.w    -34(A6),D1
00005232  C2BC 0000 9262          and.l     #65535,D1
00005236  FFFF      
00005238  2F01      9263          move.l    D1,-(A7)
0000523A  4879 0000 9264          pea       @m68kde~1_372
0000523E  79E0      
00005240  4879 0084 9265          pea       _Instruction
00005244  04DC      
00005246  4E95      9266          jsr       (A5)
00005248  DEFC 0010 9267          add.w     #16,A7
                    9268   DisassembleInstruction_295:
                    9269   ; }
                    9270   ; /////////////////////////////////////////////////////////////////////////////////
                    9271   ; // if instruction is Scc
                    9272   ; /////////////////////////////////////////////////////////////////////////////////
                    9273   ; if((*OpCode & (unsigned short int)(0xF0C0 )) == (unsigned short int)(0x50C0))
0000524C  2042      9274          move.l    D2,A0
0000524E  3010      9275          move.w    (A0),D0
00005250  C07C F0C0 9276          and.w     #61632,D0
00005254  0C40 50C0 9277          cmp.w     #20672,D0
00005258  6600 0064 9278          bne       DisassembleInstruction_298
                    9279   ; {
                    9280   ; EAMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;    // mode cannot be 1 for Scc as it it used by DBcc instruction as a differentiator
0000525C  2042      9281          move.l    D2,A0
0000525E  3010      9282          move.w    (A0),D0
00005260  48C0      9283          ext.l     D0
00005262  E680      9284          asr.l     #3,D0
00005264  C07C 0007 9285          and.w     #7,D0
00005268  3D40 FFEC 9286          move.w    D0,-20(A6)
                    9287   ; if(EAMode != (unsigned short int)(0x0001))
0000526C  302E FFEC 9288          move.w    -20(A6),D0
00005270  0C40 0001 9289          cmp.w     #1,D0
00005274  6700 0048 9290          beq       DisassembleInstruction_298
                    9291   ; {
                    9292   ; InstructionSize = 1;
00005278  24BC 0000 9293          move.l    #1,(A2)
0000527C  0001      
                    9294   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0xF)) ;
0000527E  2042      9295          move.l    D2,A0
00005280  3010      9296          move.w    (A0),D0
00005282  48C0      9297          ext.l     D0
00005284  E080      9298          asr.l     #8,D0
00005286  C07C 000F 9299          and.w     #15,D0
0000528A  1D40 FFE9 9300          move.b    D0,-23(A6)
                    9301   ; strcpyInstruction("S") ;
0000528E  4879 0000 9302          pea       @m68kde~1_373
00005292  79F4      
00005294  4E93      9303          jsr       (A3)
00005296  584F      9304          addq.w    #4,A7
                    9305   ; DecodeBranchCondition(Condition) ;
00005298  122E FFE9 9306          move.b    -23(A6),D1
0000529C  C27C 00FF 9307          and.w     #255,D1
000052A0  C2BC 0000 9308          and.l     #65535,D1
000052A4  FFFF      
000052A6  2F01      9309          move.l    D1,-(A7)
000052A8  6100 E300 9310          bsr       _DecodeBranchCondition
000052AC  584F      9311          addq.w    #4,A7
                    9312   ; Decode6BitEA(OpCode,0,0,0);
000052AE  42A7      9313          clr.l     -(A7)
000052B0  42A7      9314          clr.l     -(A7)
000052B2  42A7      9315          clr.l     -(A7)
000052B4  2F02      9316          move.l    D2,-(A7)
000052B6  6100 DE26 9317          bsr       _Decode6BitEA
000052BA  DEFC 0010 9318          add.w     #16,A7
                    9319   DisassembleInstruction_298:
                    9320   ; }
                    9321   ; }
                    9322   ; /////////////////////////////////////////////////////////////////////////////////
                    9323   ; // if instruction is SUB or SUBA
                    9324   ; /////////////////////////////////////////////////////////////////////////////////
                    9325   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0x9000))   {
000052BE  2042      9326          move.l    D2,A0
000052C0  3010      9327          move.w    (A0),D0
000052C2  C07C F000 9328          and.w     #61440,D0
000052C6  0C40 9000 9329          cmp.w     #36864,D0
000052CA  6600 0090 9330          bne       DisassembleInstruction_303
                    9331   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0007)) ;
000052CE  2042      9332          move.l    D2,A0
000052D0  3010      9333          move.w    (A0),D0
000052D2  48C0      9334          ext.l     D0
000052D4  EC80      9335          asr.l     #6,D0
000052D6  C07C 0007 9336          and.w     #7,D0
000052DA  3600      9337          move.w    D0,D3
                    9338   ; InstructionSize = 1;
000052DC  24BC 0000 9339          move.l    #1,(A2)
000052E0  0001      
                    9340   ; if((OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))      // if destination is an address register then use ADDA otherwise use ADD
000052E2  0C43 0003 9341          cmp.w     #3,D3
000052E6  6708      9342          beq.s     DisassembleInstruction_304
000052E8  0C43 0007 9343          cmp.w     #7,D3
000052EC  6600 005C 9344          bne       DisassembleInstruction_302
                    9345   DisassembleInstruction_304:
                    9346   ; {
                    9347   ; if(OpMode == (unsigned short int)(0x0003))
000052F0  0C43 0003 9348          cmp.w     #3,D3
000052F4  660C      9349          bne.s     DisassembleInstruction_305
                    9350   ; strcpyInstruction("SUBA.W ") ;
000052F6  4879 0000 9351          pea       @m68kde~1_374
000052FA  79F6      
000052FC  4E93      9352          jsr       (A3)
000052FE  584F      9353          addq.w    #4,A7
00005300  600A      9354          bra.s     DisassembleInstruction_306
                    9355   DisassembleInstruction_305:
                    9356   ; else
                    9357   ; strcpyInstruction("SUBA.L ") ;
00005302  4879 0000 9358          pea       @m68kde~1_375
00005306  79FE      
00005308  4E93      9359          jsr       (A3)
0000530A  584F      9360          addq.w    #4,A7
                    9361   DisassembleInstruction_306:
                    9362   ; Decode6BitEA(OpCode,0,0,0)  ;
0000530C  42A7      9363          clr.l     -(A7)
0000530E  42A7      9364          clr.l     -(A7)
00005310  42A7      9365          clr.l     -(A7)
00005312  2F02      9366          move.l    D2,-(A7)
00005314  6100 DDC8 9367          bsr       _Decode6BitEA
00005318  DEFC 0010 9368          add.w     #16,A7
                    9369   ; sprintf(TempString, ",A%X", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
0000531C  2042      9370          move.l    D2,A0
0000531E  3210      9371          move.w    (A0),D1
00005320  48C1      9372          ext.l     D1
00005322  E081      9373          asr.l     #8,D1
00005324  E281      9374          asr.l     #1,D1
00005326  C27C 0007 9375          and.w     #7,D1
0000532A  C2BC 0000 9376          and.l     #65535,D1
0000532E  FFFF      
00005330  2F01      9377          move.l    D1,-(A7)
00005332  4879 0000 9378          pea       @m68kde~1_376
00005336  7A06      
00005338  2F0C      9379          move.l    A4,-(A7)
0000533A  4E95      9380          jsr       (A5)
0000533C  DEFC 000C 9381          add.w     #12,A7
                    9382   ; strcatInstruction(TempString) ;
00005340  2F0C      9383          move.l    A4,-(A7)
00005342  6100 B9CE 9384          bsr       _strcatInstruction
00005346  584F      9385          addq.w    #4,A7
00005348  6012      9386          bra.s     DisassembleInstruction_303
                    9387   DisassembleInstruction_302:
                    9388   ; }
                    9389   ; else {
                    9390   ; strcpyInstruction("SUB") ;
0000534A  4879 0000 9391          pea       @m68kde~1_377
0000534E  7A0C      
00005350  4E93      9392          jsr       (A3)
00005352  584F      9393          addq.w    #4,A7
                    9394   ; Decode3BitOperandMode(OpCode) ;
00005354  2F02      9395          move.l    D2,-(A7)
00005356  6100 E1B8 9396          bsr       _Decode3BitOperandMode
0000535A  584F      9397          addq.w    #4,A7
                    9398   DisassembleInstruction_303:
                    9399   ; }
                    9400   ; }
                    9401   ; /////////////////////////////////////////////////////////////////////////////////
                    9402   ; // if instruction is SUBQ
                    9403   ; /////////////////////////////////////////////////////////////////////////////////
                    9404   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0x5100))
0000535C  2042      9405          move.l    D2,A0
0000535E  3010      9406          move.w    (A0),D0
00005360  C07C F100 9407          and.w     #61696,D0
00005364  0C40 5100 9408          cmp.w     #20736,D0
00005368  6600 0076 9409          bne       DisassembleInstruction_309
                    9410   ; {
                    9411   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
0000536C  2042      9412          move.l    D2,A0
0000536E  3010      9413          move.w    (A0),D0
00005370  48C0      9414          ext.l     D0
00005372  EC80      9415          asr.l     #6,D0
00005374  C07C 0003 9416          and.w     #3,D0
00005378  3600      9417          move.w    D0,D3
                    9418   ; if(OpMode <= (unsigned short int)(0x0002))
0000537A  0C43 0002 9419          cmp.w     #2,D3
0000537E  6200 0060 9420          bhi       DisassembleInstruction_309
                    9421   ; {
                    9422   ; InstructionSize = 1;
00005382  24BC 0000 9423          move.l    #1,(A2)
00005386  0001      
                    9424   ; strcpyInstruction("SUBQ") ;
00005388  4879 0000 9425          pea       @m68kde~1_378
0000538C  7A10      
0000538E  4E93      9426          jsr       (A3)
00005390  584F      9427          addq.w    #4,A7
                    9428   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00005392  2042      9429          move.l    D2,A0
00005394  3210      9430          move.w    (A0),D1
00005396  C2BC 0000 9431          and.l     #65535,D1
0000539A  FFFF      
0000539C  2F01      9432          move.l    D1,-(A7)
0000539E  6100 DAA2 9433          bsr       _Decode2BitOperandSize
000053A2  584F      9434          addq.w    #4,A7
                    9435   ; sprintf(TempString, "#%1X,", ((*OpCode >> 9) & (unsigned short int)(0x0007)));    // print 3 bit #data in positions 11,10,9 in opcode
000053A4  2042      9436          move.l    D2,A0
000053A6  3210      9437          move.w    (A0),D1
000053A8  48C1      9438          ext.l     D1
000053AA  E081      9439          asr.l     #8,D1
000053AC  E281      9440          asr.l     #1,D1
000053AE  C27C 0007 9441          and.w     #7,D1
000053B2  C2BC 0000 9442          and.l     #65535,D1
000053B6  FFFF      
000053B8  2F01      9443          move.l    D1,-(A7)
000053BA  4879 0000 9444          pea       @m68kde~1_379
000053BE  7A16      
000053C0  2F0C      9445          move.l    A4,-(A7)
000053C2  4E95      9446          jsr       (A5)
000053C4  DEFC 000C 9447          add.w     #12,A7
                    9448   ; strcatInstruction(TempString) ;
000053C8  2F0C      9449          move.l    A4,-(A7)
000053CA  6100 B946 9450          bsr       _strcatInstruction
000053CE  584F      9451          addq.w    #4,A7
                    9452   ; Decode6BitEA(OpCode,0,0,0) ;                                           // decode EA
000053D0  42A7      9453          clr.l     -(A7)
000053D2  42A7      9454          clr.l     -(A7)
000053D4  42A7      9455          clr.l     -(A7)
000053D6  2F02      9456          move.l    D2,-(A7)
000053D8  6100 DD04 9457          bsr       _Decode6BitEA
000053DC  DEFC 0010 9458          add.w     #16,A7
                    9459   DisassembleInstruction_309:
                    9460   ; }
                    9461   ; }
                    9462   ; /////////////////////////////////////////////////////////////////////////////////
                    9463   ; // if instruction is SUBX
                    9464   ; /////////////////////////////////////////////////////////////////////////////////
                    9465   ; if((*OpCode & (unsigned short int)(0xF130 )) == (unsigned short int)(0x9100))
000053E0  2042      9466          move.l    D2,A0
000053E2  3010      9467          move.w    (A0),D0
000053E4  C07C F130 9468          and.w     #61744,D0
000053E8  0C40 9100 9469          cmp.w     #37120,D0
000053EC  6600 00AE 9470          bne       DisassembleInstruction_313
                    9471   ; {
                    9472   ; InstructionSize = 1;
000053F0  24BC 0000 9473          move.l    #1,(A2)
000053F4  0001      
                    9474   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0003)) ;
000053F6  2042      9475          move.l    D2,A0
000053F8  3010      9476          move.w    (A0),D0
000053FA  48C0      9477          ext.l     D0
000053FC  EC80      9478          asr.l     #6,D0
000053FE  C07C 0003 9479          and.w     #3,D0
00005402  3600      9480          move.w    D0,D3
                    9481   ; if(OpMode != (unsigned short int)(0x0003)) // if size = 11 then it's SUBA not SUBX
00005404  0C43 0003 9482          cmp.w     #3,D3
00005408  6700 0092 9483          beq       DisassembleInstruction_313
                    9484   ; {
                    9485   ; strcpyInstruction("SUBX") ;
0000540C  4879 0000 9486          pea       @m68kde~1_380
00005410  7A1C      
00005412  4E93      9487          jsr       (A3)
00005414  584F      9488          addq.w    #4,A7
                    9489   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00005416  2042      9490          move.l    D2,A0
00005418  3210      9491          move.w    (A0),D1
0000541A  C2BC 0000 9492          and.l     #65535,D1
0000541E  FFFF      
00005420  2F01      9493          move.l    D1,-(A7)
00005422  6100 DA1E 9494          bsr       _Decode2BitOperandSize
00005426  584F      9495          addq.w    #4,A7
                    9496   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0))    // if bit 3 of opcode is 0 indicates data registers are used as source and destination
00005428  2042      9497          move.l    D2,A0
0000542A  3010      9498          move.w    (A0),D0
0000542C  C07C 0008 9499          and.w     #8,D0
00005430  6600 0034 9500          bne       DisassembleInstruction_315
                    9501   ; sprintf(TempString, "D%1X,D%1X", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00005434  2042      9502          move.l    D2,A0
00005436  3210      9503          move.w    (A0),D1
00005438  48C1      9504          ext.l     D1
0000543A  E081      9505          asr.l     #8,D1
0000543C  E281      9506          asr.l     #1,D1
0000543E  C2BC 0000 9507          and.l     #7,D1
00005442  0007      
00005444  2F01      9508          move.l    D1,-(A7)
00005446  2042      9509          move.l    D2,A0
00005448  3210      9510          move.w    (A0),D1
0000544A  48C1      9511          ext.l     D1
0000544C  C2BC 0000 9512          and.l     #7,D1
00005450  0007      
00005452  2F01      9513          move.l    D1,-(A7)
00005454  4879 0000 9514          pea       @m68kde~1_381
00005458  7A22      
0000545A  2F0C      9515          move.l    A4,-(A7)
0000545C  4E95      9516          jsr       (A5)
0000545E  DEFC 0010 9517          add.w     #16,A7
00005462  6000 0030 9518          bra       DisassembleInstruction_316
                    9519   DisassembleInstruction_315:
                    9520   ; else        // -(ax),-(ay) mode used
                    9521   ; sprintf(TempString, "-(A%1X),-(A%1X)", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00005466  2042      9522          move.l    D2,A0
00005468  3210      9523          move.w    (A0),D1
0000546A  48C1      9524          ext.l     D1
0000546C  E081      9525          asr.l     #8,D1
0000546E  E281      9526          asr.l     #1,D1
00005470  C2BC 0000 9527          and.l     #7,D1
00005474  0007      
00005476  2F01      9528          move.l    D1,-(A7)
00005478  2042      9529          move.l    D2,A0
0000547A  3210      9530          move.w    (A0),D1
0000547C  48C1      9531          ext.l     D1
0000547E  C2BC 0000 9532          and.l     #7,D1
00005482  0007      
00005484  2F01      9533          move.l    D1,-(A7)
00005486  4879 0000 9534          pea       @m68kde~1_382
0000548A  7A2C      
0000548C  2F0C      9535          move.l    A4,-(A7)
0000548E  4E95      9536          jsr       (A5)
00005490  DEFC 0010 9537          add.w     #16,A7
                    9538   DisassembleInstruction_316:
                    9539   ; strcatInstruction(TempString) ;
00005494  2F0C      9540          move.l    A4,-(A7)
00005496  6100 B87A 9541          bsr       _strcatInstruction
0000549A  584F      9542          addq.w    #4,A7
                    9543   DisassembleInstruction_313:
                    9544   ; }
                    9545   ; }
                    9546   ; /////////////////////////////////////////////////////////////////////////////////
                    9547   ; // if instruction is SWAP
                    9548   ; /////////////////////////////////////////////////////////////////////////////////
                    9549   ; if((*OpCode & (unsigned short int)(0xFFF8 )) == (unsigned short int)(0x4840))
0000549C  2042      9550          move.l    D2,A0
0000549E  3010      9551          move.w    (A0),D0
000054A0  C07C FFF8 9552          and.w     #65528,D0
000054A4  0C40 4840 9553          cmp.w     #18496,D0
000054A8  662A      9554          bne.s     DisassembleInstruction_317
                    9555   ; {
                    9556   ; InstructionSize = 1;
000054AA  24BC 0000 9557          move.l    #1,(A2)
000054AE  0001      
                    9558   ; DataRegister = *OpCode & (unsigned short int)(0x0007) ;
000054B0  2042      9559          move.l    D2,A0
000054B2  3010      9560          move.w    (A0),D0
000054B4  C07C 0007 9561          and.w     #7,D0
000054B8  3A00      9562          move.w    D0,D5
                    9563   ; sprintf(Instruction, "SWAP D%d", DataRegister) ;
000054BA  CABC 0000 9564          and.l     #65535,D5
000054BE  FFFF      
000054C0  2F05      9565          move.l    D5,-(A7)
000054C2  4879 0000 9566          pea       @m68kde~1_383
000054C6  7A3C      
000054C8  4879 0084 9567          pea       _Instruction
000054CC  04DC      
000054CE  4E95      9568          jsr       (A5)
000054D0  DEFC 000C 9569          add.w     #12,A7
                    9570   DisassembleInstruction_317:
                    9571   ; }
                    9572   ; /////////////////////////////////////////////////////////////////////////////////
                    9573   ; // if instruction is TAS
                    9574   ; /////////////////////////////////////////////////////////////////////////////////
                    9575   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x4AC0))
000054D4  2042      9576          move.l    D2,A0
000054D6  3010      9577          move.w    (A0),D0
000054D8  C07C FFC0 9578          and.w     #65472,D0
000054DC  0C40 4AC0 9579          cmp.w     #19136,D0
000054E0  662A      9580          bne.s     DisassembleInstruction_321
                    9581   ; {
                    9582   ; if(*OpCode != (unsigned short int)(0x4AFC))
000054E2  2042      9583          move.l    D2,A0
000054E4  3010      9584          move.w    (A0),D0
000054E6  0C40 4AFC 9585          cmp.w     #19196,D0
000054EA  6720      9586          beq.s     DisassembleInstruction_321
                    9587   ; {
                    9588   ; InstructionSize = 1;
000054EC  24BC 0000 9589          move.l    #1,(A2)
000054F0  0001      
                    9590   ; strcpyInstruction("TAS ") ;
000054F2  4879 0000 9591          pea       @m68kde~1_384
000054F6  7A46      
000054F8  4E93      9592          jsr       (A3)
000054FA  584F      9593          addq.w    #4,A7
                    9594   ; Decode6BitEA(OpCode,0,0,0) ;
000054FC  42A7      9595          clr.l     -(A7)
000054FE  42A7      9596          clr.l     -(A7)
00005500  42A7      9597          clr.l     -(A7)
00005502  2F02      9598          move.l    D2,-(A7)
00005504  6100 DBD8 9599          bsr       _Decode6BitEA
00005508  DEFC 0010 9600          add.w     #16,A7
                    9601   DisassembleInstruction_321:
                    9602   ; }
                    9603   ; }
                    9604   ; /////////////////////////////////////////////////////////////////////////////////
                    9605   ; // if instruction is TRAP
                    9606   ; /////////////////////////////////////////////////////////////////////////////////
                    9607   ; if((*OpCode & (unsigned short int)(0xFFF0 )) == (unsigned short int)(0x4E40))   {
0000550C  2042      9608          move.l    D2,A0
0000550E  3010      9609          move.w    (A0),D0
00005510  C07C FFF0 9610          and.w     #65520,D0
00005514  0C40 4E40 9611          cmp.w     #20032,D0
00005518  6622      9612          bne.s     DisassembleInstruction_323
                    9613   ; sprintf(Instruction, "TRAP #%d", *OpCode & (unsigned short int)(0x000F)) ;
0000551A  2042      9614          move.l    D2,A0
0000551C  3210      9615          move.w    (A0),D1
0000551E  C27C 000F 9616          and.w     #15,D1
00005522  C2BC 0000 9617          and.l     #65535,D1
00005526  FFFF      
00005528  2F01      9618          move.l    D1,-(A7)
0000552A  4879 0000 9619          pea       @m68kde~1_385
0000552E  7A4C      
00005530  4879 0084 9620          pea       _Instruction
00005534  04DC      
00005536  4E95      9621          jsr       (A5)
00005538  DEFC 000C 9622          add.w     #12,A7
                    9623   DisassembleInstruction_323:
                    9624   ; }
                    9625   ; /////////////////////////////////////////////////////////////////////////////////
                    9626   ; // if instruction is TRAPV
                    9627   ; /////////////////////////////////////////////////////////////////////////////////
                    9628   ; if(*OpCode == (unsigned short int)(0x4E76))
0000553C  2042      9629          move.l    D2,A0
0000553E  3010      9630          move.w    (A0),D0
00005540  0C40 4E76 9631          cmp.w     #20086,D0
00005544  6610      9632          bne.s     DisassembleInstruction_325
                    9633   ; {
                    9634   ; InstructionSize = 1;
00005546  24BC 0000 9635          move.l    #1,(A2)
0000554A  0001      
                    9636   ; strcpyInstruction("TRAPV") ;
0000554C  4879 0000 9637          pea       @m68kde~1_386
00005550  7A56      
00005552  4E93      9638          jsr       (A3)
00005554  584F      9639          addq.w    #4,A7
                    9640   DisassembleInstruction_325:
                    9641   ; }
                    9642   ; /////////////////////////////////////////////////////////////////////////////////
                    9643   ; // if instruction is TST
                    9644   ; /////////////////////////////////////////////////////////////////////////////////
                    9645   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x4A00))
00005556  2042      9646          move.l    D2,A0
00005558  3010      9647          move.w    (A0),D0
0000555A  C07C FF00 9648          and.w     #65280,D0
0000555E  0C40 4A00 9649          cmp.w     #18944,D0
00005562  6600 005C 9650          bne       DisassembleInstruction_329
                    9651   ; {
                    9652   ; Size = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
00005566  2042      9653          move.l    D2,A0
00005568  3010      9654          move.w    (A0),D0
0000556A  48C0      9655          ext.l     D0
0000556C  EC80      9656          asr.l     #6,D0
0000556E  C07C 0003 9657          and.w     #3,D0
00005572  3D40 FFE2 9658          move.w    D0,-30(A6)
                    9659   ; if((*OpCode != (unsigned short int)(0x4AFC)) && (Size != (unsigned short int)(0x0003)))       { // test for size to eliminate TAS instruction which shares similar opcode
00005576  2042      9660          move.l    D2,A0
00005578  3010      9661          move.w    (A0),D0
0000557A  0C40 4AFC 9662          cmp.w     #19196,D0
0000557E  6700 0040 9663          beq       DisassembleInstruction_329
00005582  302E FFE2 9664          move.w    -30(A6),D0
00005586  0C40 0003 9665          cmp.w     #3,D0
0000558A  6700 0034 9666          beq       DisassembleInstruction_329
                    9667   ; InstructionSize = 1;
0000558E  24BC 0000 9668          move.l    #1,(A2)
00005592  0001      
                    9669   ; strcpyInstruction("TST") ;
00005594  4879 0000 9670          pea       @m68kde~1_387
00005598  7A5C      
0000559A  4E93      9671          jsr       (A3)
0000559C  584F      9672          addq.w    #4,A7
                    9673   ; Decode2BitOperandSize(*OpCode) ;
0000559E  2042      9674          move.l    D2,A0
000055A0  3210      9675          move.w    (A0),D1
000055A2  C2BC 0000 9676          and.l     #65535,D1
000055A6  FFFF      
000055A8  2F01      9677          move.l    D1,-(A7)
000055AA  6100 D896 9678          bsr       _Decode2BitOperandSize
000055AE  584F      9679          addq.w    #4,A7
                    9680   ; Decode6BitEA(OpCode,0,0,0) ;
000055B0  42A7      9681          clr.l     -(A7)
000055B2  42A7      9682          clr.l     -(A7)
000055B4  42A7      9683          clr.l     -(A7)
000055B6  2F02      9684          move.l    D2,-(A7)
000055B8  6100 DB24 9685          bsr       _Decode6BitEA
000055BC  DEFC 0010 9686          add.w     #16,A7
                    9687   DisassembleInstruction_329:
                    9688   ; }
                    9689   ; }
                    9690   ; /////////////////////////////////////////////////////////////////////////////////
                    9691   ; // if instruction is UNLK
                    9692   ; //////////////////////////////////////////////////////////
                    9693   ; if((*OpCode & (unsigned short int)(0xFFF8 )) == (unsigned short int)(0x4E58))
000055C0  2042      9694          move.l    D2,A0
000055C2  3010      9695          move.w    (A0),D0
000055C4  C07C FFF8 9696          and.w     #65528,D0
000055C8  0C40 4E58 9697          cmp.w     #20056,D0
000055CC  6628      9698          bne.s     DisassembleInstruction_331
                    9699   ; {
                    9700   ; InstructionSize = 1;
000055CE  24BC 0000 9701          move.l    #1,(A2)
000055D2  0001      
                    9702   ; sprintf(Instruction, "UNLK A%d", *OpCode & (unsigned short int)(0x0007)) ;
000055D4  2042      9703          move.l    D2,A0
000055D6  3210      9704          move.w    (A0),D1
000055D8  C27C 0007 9705          and.w     #7,D1
000055DC  C2BC 0000 9706          and.l     #65535,D1
000055E0  FFFF      
000055E2  2F01      9707          move.l    D1,-(A7)
000055E4  4879 0000 9708          pea       @m68kde~1_388
000055E8  7A60      
000055EA  4879 0084 9709          pea       _Instruction
000055EE  04DC      
000055F0  4E95      9710          jsr       (A5)
000055F2  DEFC 000C 9711          add.w     #12,A7
                    9712   DisassembleInstruction_331:
                    9713   ; }
                    9714   ; FormatInstruction() ;
000055F6  6100 D7AA 9715          bsr       _FormatInstruction
000055FA  4CDF 3CFC 9716          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000055FE  4E5E      9717          unlk      A6
00005600  4E75      9718          rts
                    9719   ; }
                    9720   ; C:\M68KV6.0 - DE2 - 640BY480 - FOR 465 STUDENTS\PROGRAMS\DEBUGMONITORCODE\FLASHROUTINES.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J.Fondse
                    9721   ; #include "DebugMonitor.h"
                    9722   ; /* erase chip by writing to address with data*/
                    9723   ; void EraseFlashChip(void)
                    9724   ; {
                    9725   _EraseFlashChip:
00005602  4E75      9726          rts
                    9727   ; }
                    9728   ; void FlashReset(void)
                    9729   ; {
                    9730   _FlashReset:
00005604  4E75      9731          rts
                    9732   ; }
                    9733   ; /* erase sector by writing to address with data*/
                    9734   ; void FlashSectorErase(int SectorAddress)
                    9735   ; {
                    9736   _FlashSectorErase:
00005606  4E56 0000 9737          link      A6,#0
0000560A  4E5E      9738          unlk      A6
0000560C  4E75      9739          rts
                    9740   ; }
                    9741   ; /* program chip by writing to address with data*/
                    9742   ; void FlashProgram(unsigned int AddressOffset, int ByteData)		// write a byte to the specified address (assumed it has been erased first)
                    9743   ; {
                    9744   _FlashProgram:
0000560E  4E56 0000 9745          link      A6,#0
00005612  4E5E      9746          unlk      A6
00005614  4E75      9747          rts
                    9748   ; }
                    9749   ; /* program chip to read a byte */
                    9750   ; unsigned char FlashRead(unsigned int AddressOffset)		// read a byte from the specified address (assumed it has been erased first)
                    9751   ; {
                    9752   _FlashRead:
00005616  4E56 0000 9753          link      A6,#0
                    9754   ; return 0 ; 	// dummy return to it will compile before you have written your code
0000561A  4200      9755          clr.b     D0
0000561C  4E5E      9756          unlk      A6
0000561E  4E75      9757          rts
                    9758   ; }
                    9759   _strcpy:
00005620  206F 0004 9760          move.l    (4,A7),A0
00005624  226F 0008 9761          move.l    (8,A7),A1
00005628  2008      9762          move.l    A0,D0
                    9763   strcpy_1:
0000562A  10D9      9764          move.b    (A1)+,(A0)+
0000562C  66FC      9765          bne       strcpy_1
0000562E  4E75      9766          rts
                    9767   _puts:
00005630  4E56 0000 9768          link      A6,#0
00005634  48E7 2000 9769          movem.l   D2,-(A7)
                    9770   puts_1:
00005638  206E 0008 9771          move.l    8(A6),A0
0000563C  52AE 0008 9772          addq.l    #1,8(A6)
00005640  1010      9773          move.b    (A0),D0
00005642  4880      9774          ext.w     D0
00005644  48C0      9775          ext.l     D0
00005646  2400      9776          move.l    D0,D2
00005648  670A      9777          beq.s     puts_3
0000564A  2F02      9778          move.l    D2,-(A7)
0000564C  6100 001A 9779          bsr       _putch
00005650  584F      9780          addq.w    #4,A7
00005652  60E4      9781          bra       puts_1
                    9782   puts_3:
00005654  4878 000A 9783          pea       10
00005658  6100 000E 9784          bsr       _putch
0000565C  584F      9785          addq.w    #4,A7
0000565E  2002      9786          move.l    D2,D0
00005660  4CDF 0004 9787          movem.l   (A7)+,D2
00005664  4E5E      9788          unlk      A6
00005666  4E75      9789          rts
                    9790   _putch:
00005668  4E56 0000 9791          link      A6,#0
0000566C  48E7 2000 9792          movem.l   D2,-(A7)
00005670  242E 0008 9793          move.l    8(A6),D2
00005674  0C82 0000 9794          cmp.l     #10,D2
00005678  000A      
0000567A  660A      9795          bne.s     putch_1
0000567C  4878 000D 9796          pea       13
00005680  6100 B50E 9797          bsr       __putch
00005684  584F      9798          addq.w    #4,A7
                    9799   putch_1:
00005686  2F02      9800          move.l    D2,-(A7)
00005688  6100 B506 9801          bsr       __putch
0000568C  584F      9802          addq.w    #4,A7
0000568E  2002      9803          move.l    D2,D0
00005690  4CDF 0004 9804          movem.l   (A7)+,D2
00005694  4E5E      9805          unlk      A6
00005696  4E75      9806          rts
                    9807   _getch:
00005698  48E7 2000 9808          movem.l   D2,-(A7)
0000569C  2439 0084 9809          move.l    __ungetbuf,D2
000056A0  00C0      
000056A2  2039 0084 9810          move.l    __ungetbuf,D0
000056A6  00C0      
000056A8  0C80 FFFF 9811          cmp.l     #-1,D0
000056AC  FFFF      
000056AE  670C      9812          beq.s     getch_1
000056B0  23FC FFFF 9813          move.l    #-1,__ungetbuf
000056B4  FFFF 0084 
000056B8  00C0      
000056BA  6010      9814          bra.s     getch_3
                    9815   getch_1:
000056BC  6100 B4FE 9816          bsr       __getch
000056C0  2400      9817          move.l    D0,D2
000056C2  0C80 0000 9818          cmp.l     #13,D0
000056C6  000D      
000056C8  6602      9819          bne.s     getch_3
000056CA  740A      9820          moveq     #10,D2
                    9821   getch_3:
000056CC  2002      9822          move.l    D2,D0
000056CE  4CDF 0004 9823          movem.l   (A7)+,D2
000056D2  4E75      9824          rts
                    9825   _tolower:
000056D4  4E56 0000 9826          link      A6,#0
000056D8  48E7 2000 9827          movem.l   D2,-(A7)
000056DC  242E 0008 9828          move.l    8(A6),D2
000056E0  0C82 0000 9829          cmp.l     #65,D2
000056E4  0041      
000056E6  6D0E      9830          blt.s     tolower_1
000056E8  0C82 0000 9831          cmp.l     #90,D2
000056EC  005A      
000056EE  6E06      9832          bgt.s     tolower_1
000056F0  84BC 0000 9833          or.l      #32,D2
000056F4  0020      
                    9834   tolower_1:
000056F6  2002      9835          move.l    D2,D0
000056F8  4CDF 0004 9836          movem.l   (A7)+,D2
000056FC  4E5E      9837          unlk      A6
000056FE  4E75      9838          rts
                    9839   _sprintf:
00005700  4E56 FFFC 9840          link      A6,#-4
00005704  48E7 2000 9841          movem.l   D2,-(A7)
00005708  41EE 000C 9842          lea       12(A6),A0
0000570C  5848      9843          addq.w    #4,A0
0000570E  2408      9844          move.l    A0,D2
00005710  2F02      9845          move.l    D2,-(A7)
00005712  2F2E 000C 9846          move.l    12(A6),-(A7)
00005716  2F2E 0008 9847          move.l    8(A6),-(A7)
0000571A  6100 013E 9848          bsr       _vsprintf
0000571E  DEFC 000C 9849          add.w     #12,A7
00005722  2D40 FFFC 9850          move.l    D0,-4(A6)
00005726  4282      9851          clr.l     D2
00005728  202E FFFC 9852          move.l    -4(A6),D0
0000572C  4CDF 0004 9853          movem.l   (A7)+,D2
00005730  4E5E      9854          unlk      A6
00005732  4E75      9855          rts
                    9856   _strcat:
00005734  206F 0004 9857          move.l    (4,A7),A0	
00005738  226F 0008 9858          move.l    (8,A7),A1	
0000573C  2008      9859          move.l    A0,D0		
                    9860   strcat_0:
0000573E  4A18      9861          tst.b     (A0)+
00005740  66FC      9862          bne       strcat_0
00005742  5348      9863          subq      #1,A0
                    9864   strcat_1:
00005744  10D9      9865          move.b    (A1)+,(A0)+
00005746  66FC      9866          bne       strcat_1
00005748  4E75      9867          rts
                    9868   _toupper:
0000574A  4E56 0000 9869          link      A6,#0
0000574E  48E7 2000 9870          movem.l   D2,-(A7)
00005752  242E 0008 9871          move.l    8(A6),D2
00005756  0C82 0000 9872          cmp.l     #97,D2
0000575A  0061      
0000575C  6D0E      9873          blt.s     toupper_1
0000575E  0C82 0000 9874          cmp.l     #122,D2
00005762  007A      
00005764  6E06      9875          bgt.s     toupper_1
00005766  C4BC 0000 9876          and.l     #95,D2
0000576A  005F      
                    9877   toupper_1:
0000576C  2002      9878          move.l    D2,D0
0000576E  4CDF 0004 9879          movem.l   (A7)+,D2
00005772  4E5E      9880          unlk      A6
00005774  4E75      9881          rts
                    9882   _printf:
00005776  4E56 FFFC 9883          link      A6,#-4
0000577A  48E7 2000 9884          movem.l   D2,-(A7)
0000577E  41EE 0008 9885          lea       8(A6),A0
00005782  5848      9886          addq.w    #4,A0
00005784  2408      9887          move.l    A0,D2
00005786  2F02      9888          move.l    D2,-(A7)
00005788  2F2E 0008 9889          move.l    8(A6),-(A7)
0000578C  42A7      9890          clr.l     -(A7)
0000578E  6100 00CA 9891          bsr       _vsprintf
00005792  DEFC 000C 9892          add.w     #12,A7
00005796  2D40 FFFC 9893          move.l    D0,-4(A6)
0000579A  4282      9894          clr.l     D2
0000579C  202E FFFC 9895          move.l    -4(A6),D0
000057A0  4CDF 0004 9896          movem.l   (A7)+,D2
000057A4  4E5E      9897          unlk      A6
000057A6  4E75      9898          rts
                    9899   @vsprintf_copy:
000057A8  4E56 0000 9900          link      A6,#0
000057AC  206E 0008 9901          move.l    8(A6),A0
000057B0  4A90      9902          tst.l     (A0)
000057B2  6710      9903          beq.s     @vsprintf_copy_1
000057B4  202E 000C 9904          move.l    12(A6),D0
000057B8  206E 0008 9905          move.l    8(A6),A0
000057BC  2250      9906          move.l    (A0),A1
000057BE  5290      9907          addq.l    #1,(A0)
000057C0  1280      9908          move.b    D0,(A1)
000057C2  600A      9909          bra.s     @vsprintf_copy_2
                    9910   @vsprintf_copy_1:
000057C4  2F2E 000C 9911          move.l    12(A6),-(A7)
000057C8  6100 FE9E 9912          bsr       _putch
000057CC  584F      9913          addq.w    #4,A7
                    9914   @vsprintf_copy_2:
000057CE  4E5E      9915          unlk      A6
000057D0  4E75      9916          rts
                    9917   @vsprintf_getval:
000057D2  4E56 0000 9918          link      A6,#0
000057D6  48E7 3000 9919          movem.l   D2/D3,-(A7)
000057DA  242E 0008 9920          move.l    8(A6),D2
000057DE  4283      9921          clr.l     D3
000057E0  2042      9922          move.l    D2,A0
000057E2  2050      9923          move.l    (A0),A0
000057E4  1010      9924          move.b    (A0),D0
000057E6  4880      9925          ext.w     D0
000057E8  48C0      9926          ext.l     D0
000057EA  0C80 0000 9927          cmp.l     #42,D0
000057EE  002A      
000057F0  6612      9928          bne.s     @vsprintf_getval_1
000057F2  206E 000C 9929          move.l    12(A6),A0
000057F6  2250      9930          move.l    (A0),A1
000057F8  5890      9931          addq.l    #4,(A0)
000057FA  2611      9932          move.l    (A1),D3
000057FC  2042      9933          move.l    D2,A0
000057FE  5290      9934          addq.l    #1,(A0)
00005800  6000 004E 9935          bra       @vsprintf_getval_5
                    9936   @vsprintf_getval_1:
00005804  2042      9937          move.l    D2,A0
00005806  2050      9938          move.l    (A0),A0
00005808  1010      9939          move.b    (A0),D0
0000580A  4880      9940          ext.w     D0
0000580C  48C0      9941          ext.l     D0
0000580E  0C80 0000 9942          cmp.l     #48,D0
00005812  0030      
00005814  6D00 003A 9943          blt       @vsprintf_getval_5
00005818  2042      9944          move.l    D2,A0
0000581A  2050      9945          move.l    (A0),A0
0000581C  1010      9946          move.b    (A0),D0
0000581E  4880      9947          ext.w     D0
00005820  48C0      9948          ext.l     D0
00005822  0C80 0000 9949          cmp.l     #57,D0
00005826  0039      
00005828  6E26      9950          bgt.s     @vsprintf_getval_5
0000582A  2F03      9951          move.l    D3,-(A7)
0000582C  4878 000A 9952          pea       10
00005830  6100 07F4 9953          bsr       LMUL
00005834  2017      9954          move.l    (A7),D0
00005836  504F      9955          addq.w    #8,A7
00005838  2042      9956          move.l    D2,A0
0000583A  2250      9957          move.l    (A0),A1
0000583C  5290      9958          addq.l    #1,(A0)
0000583E  1211      9959          move.b    (A1),D1
00005840  4881      9960          ext.w     D1
00005842  48C1      9961          ext.l     D1
00005844  D081      9962          add.l     D1,D0
00005846  0480 0000 9963          sub.l     #48,D0
0000584A  0030      
0000584C  2600      9964          move.l    D0,D3
0000584E  60B4      9965          bra       @vsprintf_getval_1
                    9966   @vsprintf_getval_5:
00005850  2003      9967          move.l    D3,D0
00005852  4CDF 000C 9968          movem.l   (A7)+,D2/D3
00005856  4E5E      9969          unlk      A6
00005858  4E75      9970          rts
                    9971   _vsprintf:
0000585A  4E56 FFCC 9972          link      A6,#-52
0000585E  48E7 3F3C 9973          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00005862  45EE 0008 9974          lea       8(A6),A2
00005866  47F8 57A8 9975          lea       @vsprintf_copy,A3
0000586A  49F9 0000 9976          lea       _ultoa,A4
0000586E  5FB2      
00005870  4286      9977          clr.l     D6
                    9978   vsprintf_1:
00005872  206E 000C 9979          move.l    12(A6),A0
00005876  4A10      9980          tst.b     (A0)
00005878  6700 0624 9981          beq       vsprintf_3
0000587C  206E 000C 9982          move.l    12(A6),A0
00005880  1010      9983          move.b    (A0),D0
00005882  4880      9984          ext.w     D0
00005884  48C0      9985          ext.l     D0
00005886  0C80 0000 9986          cmp.l     #37,D0
0000588A  0025      
0000588C  671C      9987          beq.s     vsprintf_4
0000588E  206E 000C 9988          move.l    12(A6),A0
00005892  52AE 000C 9989          addq.l    #1,12(A6)
00005896  1210      9990          move.b    (A0),D1
00005898  4881      9991          ext.w     D1
0000589A  48C1      9992          ext.l     D1
0000589C  2F01      9993          move.l    D1,-(A7)
0000589E  2F0A      9994          move.l    A2,-(A7)
000058A0  4E93      9995          jsr       (A3)
000058A2  504F      9996          addq.w    #8,A7
000058A4  5286      9997          addq.l    #1,D6
000058A6  6000 05F2 9998          bra       vsprintf_2
                    9999   vsprintf_4:
000058AA  52AE 000C 10000          addq.l    #1,12(A6)
000058AE  422E FFD3 10001          clr.b     -45(A6)
000058B2  422E FFD2 10002          clr.b     -46(A6)
000058B6  422E FFD0 10003          clr.b     -48(A6)
000058BA  422E FFCF 10004          clr.b     -49(A6)
000058BE  422E FFCE 10005          clr.b     -50(A6)
000058C2  422E FFCD 10006          clr.b     -51(A6)
000058C6  42AE FFFC 10007          clr.l     -4(A6)
000058CA  7AFF      10008          moveq     #-1,D5
000058CC  41EE FFDC 10009          lea       -36(A6),A0
000058D0  2608      10010          move.l    A0,D3
000058D2  2408      10011          move.l    A0,D2
                    10012   vsprintf_6:
000058D4  206E 000C 10013          move.l    12(A6),A0
000058D8  1010      10014          move.b    (A0),D0
000058DA  4880      10015          ext.w     D0
000058DC  48C0      10016          ext.l     D0
000058DE  0C80 0000 10017          cmp.l     #43,D0
000058E2  002B      
000058E4  6730      10018          beq.s     vsprintf_12
000058E6  6E18      10019          bgt.s     vsprintf_15
000058E8  0C80 0000 10020          cmp.l     #35,D0
000058EC  0023      
000058EE  6700 003E 10021          beq       vsprintf_14
000058F2  6E00 0046 10022          bgt       vsprintf_9
000058F6  0C80 0000 10023          cmp.l     #32,D0
000058FA  0020      
000058FC  6724      10024          beq.s     vsprintf_13
000058FE  603A      10025          bra.s     vsprintf_9
                    10026   vsprintf_15:
00005900  0C80 0000 10027          cmp.l     #45,D0
00005904  002D      
00005906  6702      10028          beq.s     vsprintf_11
00005908  6030      10029          bra.s     vsprintf_9
                    10030   vsprintf_11:
0000590A  1D7C 0001 10031          move.b    #1,-51(A6)
0000590E  FFCD      
00005910  52AE 000C 10032          addq.l    #1,12(A6)
00005914  6026      10033          bra.s     vsprintf_7
                    10034   vsprintf_12:
00005916  1D7C 0001 10035          move.b    #1,-50(A6)
0000591A  FFCE      
0000591C  52AE 000C 10036          addq.l    #1,12(A6)
00005920  601A      10037          bra.s     vsprintf_7
                    10038   vsprintf_13:
00005922  1D7C 0001 10039          move.b    #1,-49(A6)
00005926  FFCF      
00005928  52AE 000C 10040          addq.l    #1,12(A6)
0000592C  600E      10041          bra.s     vsprintf_7
                    10042   vsprintf_14:
0000592E  1D7C 0001 10043          move.b    #1,-48(A6)
00005932  FFD0      
00005934  52AE 000C 10044          addq.l    #1,12(A6)
00005938  6002      10045          bra.s     vsprintf_7
                    10046   vsprintf_9:
0000593A  6002      10047          bra.s     vsprintf_8
                    10048   vsprintf_7:
0000593C  6096      10049          bra       vsprintf_6
                    10050   vsprintf_8:
0000593E  206E 000C 10051          move.l    12(A6),A0
00005942  1010      10052          move.b    (A0),D0
00005944  4880      10053          ext.w     D0
00005946  48C0      10054          ext.l     D0
00005948  0C80 0000 10055          cmp.l     #48,D0
0000594C  0030      
0000594E  660A      10056          bne.s     vsprintf_16
00005950  52AE 000C 10057          addq.l    #1,12(A6)
00005954  1D7C 0001 10058          move.b    #1,-46(A6)
00005958  FFD2      
                    10059   vsprintf_16:
0000595A  486E 0010 10060          pea       16(A6)
0000595E  486E 000C 10061          pea       12(A6)
00005962  6100 FE6E 10062          bsr       @vsprintf_getval
00005966  504F      10063          addq.w    #8,A7
00005968  2A40      10064          move.l    D0,A5
0000596A  206E 000C 10065          move.l    12(A6),A0
0000596E  1010      10066          move.b    (A0),D0
00005970  4880      10067          ext.w     D0
00005972  48C0      10068          ext.l     D0
00005974  0C80 0000 10069          cmp.l     #46,D0
00005978  002E      
0000597A  6614      10070          bne.s     vsprintf_18
0000597C  52AE 000C 10071          addq.l    #1,12(A6)
00005980  486E 0010 10072          pea       16(A6)
00005984  486E 000C 10073          pea       12(A6)
00005988  6100 FE48 10074          bsr       @vsprintf_getval
0000598C  504F      10075          addq.w    #8,A7
0000598E  2A00      10076          move.l    D0,D5
                    10077   vsprintf_18:
00005990  206E 000C 10078          move.l    12(A6),A0
00005994  1010      10079          move.b    (A0),D0
00005996  4880      10080          ext.w     D0
00005998  48C0      10081          ext.l     D0
0000599A  0C80 0000 10082          cmp.l     #108,D0
0000599E  006C      
000059A0  660A      10083          bne.s     vsprintf_20
000059A2  52AE 000C 10084          addq.l    #1,12(A6)
000059A6  1D7C 0001 10085          move.b    #1,-45(A6)
000059AA  FFD3      
                    10086   vsprintf_20:
000059AC  206E 000C 10087          move.l    12(A6),A0
000059B0  1010      10088          move.b    (A0),D0
000059B2  4880      10089          ext.w     D0
000059B4  48C0      10090          ext.l     D0
000059B6  0C80 0000 10091          cmp.l     #111,D0
000059BA  006F      
000059BC  6700 00D4 10092          beq       vsprintf_27
000059C0  6E34      10093          bgt.s     vsprintf_33
000059C2  0C80 0000 10094          cmp.l     #100,D0
000059C6  0064      
000059C8  6700 0054 10095          beq       vsprintf_24
000059CC  6E1C      10096          bgt.s     vsprintf_34
000059CE  0C80 0000 10097          cmp.l     #99,D0
000059D2  0063      
000059D4  6700 012C 10098          beq       vsprintf_30
000059D8  6E00 016A 10099          bgt       vsprintf_22
000059DC  0C80 0000 10100          cmp.l     #88,D0
000059E0  0058      
000059E2  6700 00E6 10101          beq       vsprintf_28
000059E6  6000 015C 10102          bra       vsprintf_22
                    10103   vsprintf_34:
000059EA  0C80 0000 10104          cmp.l     #105,D0
000059EE  0069      
000059F0  672C      10105          beq.s     vsprintf_24
000059F2  6000 0150 10106          bra       vsprintf_22
                    10107   vsprintf_33:
000059F6  0C80 0000 10108          cmp.l     #117,D0
000059FA  0075      
000059FC  6700 005C 10109          beq       vsprintf_26
00005A00  6E0E      10110          bgt.s     vsprintf_35
00005A02  0C80 0000 10111          cmp.l     #115,D0
00005A06  0073      
00005A08  6700 011C 10112          beq       vsprintf_31
00005A0C  6000 0136 10113          bra       vsprintf_22
                    10114   vsprintf_35:
00005A10  0C80 0000 10115          cmp.l     #120,D0
00005A14  0078      
00005A16  6700 00B2 10116          beq       vsprintf_28
00005A1A  6000 0128 10117          bra       vsprintf_22
                    10118   vsprintf_24:
00005A1E  4A2E FFD3 10119          tst.b     -45(A6)
00005A22  671A      10120          beq.s     vsprintf_36
00005A24  4878 000A 10121          pea       10
00005A28  2F03      10122          move.l    D3,-(A7)
00005A2A  206E 0010 10123          move.l    16(A6),A0
00005A2E  58AE 0010 10124          addq.l    #4,16(A6)
00005A32  2F10      10125          move.l    (A0),-(A7)
00005A34  6100 04F8 10126          bsr       _ltoa
00005A38  DEFC 000C 10127          add.w     #12,A7
00005A3C  6018      10128          bra.s     vsprintf_37
                    10129   vsprintf_36:
00005A3E  4878 000A 10130          pea       10
00005A42  2F03      10131          move.l    D3,-(A7)
00005A44  206E 0010 10132          move.l    16(A6),A0
00005A48  58AE 0010 10133          addq.l    #4,16(A6)
00005A4C  2F10      10134          move.l    (A0),-(A7)
00005A4E  6100 04DE 10135          bsr       _ltoa
00005A52  DEFC 000C 10136          add.w     #12,A7
                    10137   vsprintf_37:
00005A56  6000 00FA 10138          bra       vsprintf_23
                    10139   vsprintf_26:
00005A5A  4A2E FFD3 10140          tst.b     -45(A6)
00005A5E  6718      10141          beq.s     vsprintf_38
00005A60  4878 000A 10142          pea       10
00005A64  2F03      10143          move.l    D3,-(A7)
00005A66  206E 0010 10144          move.l    16(A6),A0
00005A6A  58AE 0010 10145          addq.l    #4,16(A6)
00005A6E  2F10      10146          move.l    (A0),-(A7)
00005A70  4E94      10147          jsr       (A4)
00005A72  DEFC 000C 10148          add.w     #12,A7
00005A76  6016      10149          bra.s     vsprintf_39
                    10150   vsprintf_38:
00005A78  4878 000A 10151          pea       10
00005A7C  2F03      10152          move.l    D3,-(A7)
00005A7E  206E 0010 10153          move.l    16(A6),A0
00005A82  58AE 0010 10154          addq.l    #4,16(A6)
00005A86  2F10      10155          move.l    (A0),-(A7)
00005A88  4E94      10156          jsr       (A4)
00005A8A  DEFC 000C 10157          add.w     #12,A7
                    10158   vsprintf_39:
00005A8E  6000 00C2 10159          bra       vsprintf_23
                    10160   vsprintf_27:
00005A92  4A2E FFD3 10161          tst.b     -45(A6)
00005A96  6718      10162          beq.s     vsprintf_40
00005A98  4878 0008 10163          pea       8
00005A9C  2F03      10164          move.l    D3,-(A7)
00005A9E  206E 0010 10165          move.l    16(A6),A0
00005AA2  58AE 0010 10166          addq.l    #4,16(A6)
00005AA6  2F10      10167          move.l    (A0),-(A7)
00005AA8  4E94      10168          jsr       (A4)
00005AAA  DEFC 000C 10169          add.w     #12,A7
00005AAE  6016      10170          bra.s     vsprintf_41
                    10171   vsprintf_40:
00005AB0  4878 0008 10172          pea       8
00005AB4  2F03      10173          move.l    D3,-(A7)
00005AB6  206E 0010 10174          move.l    16(A6),A0
00005ABA  58AE 0010 10175          addq.l    #4,16(A6)
00005ABE  2F10      10176          move.l    (A0),-(A7)
00005AC0  4E94      10177          jsr       (A4)
00005AC2  DEFC 000C 10178          add.w     #12,A7
                    10179   vsprintf_41:
00005AC6  6000 008A 10180          bra       vsprintf_23
                    10181   vsprintf_28:
00005ACA  4A2E FFD3 10182          tst.b     -45(A6)
00005ACE  6718      10183          beq.s     vsprintf_42
00005AD0  4878 0010 10184          pea       16
00005AD4  2F03      10185          move.l    D3,-(A7)
00005AD6  206E 0010 10186          move.l    16(A6),A0
00005ADA  58AE 0010 10187          addq.l    #4,16(A6)
00005ADE  2F10      10188          move.l    (A0),-(A7)
00005AE0  4E94      10189          jsr       (A4)
00005AE2  DEFC 000C 10190          add.w     #12,A7
00005AE6  6016      10191          bra.s     vsprintf_43
                    10192   vsprintf_42:
00005AE8  4878 0010 10193          pea       16
00005AEC  2F03      10194          move.l    D3,-(A7)
00005AEE  206E 0010 10195          move.l    16(A6),A0
00005AF2  58AE 0010 10196          addq.l    #4,16(A6)
00005AF6  2F10      10197          move.l    (A0),-(A7)
00005AF8  4E94      10198          jsr       (A4)
00005AFA  DEFC 000C 10199          add.w     #12,A7
                    10200   vsprintf_43:
00005AFE  6000 0052 10201          bra       vsprintf_23
                    10202   vsprintf_30:
00005B02  206E 0010 10203          move.l    16(A6),A0
00005B06  58AE 0010 10204          addq.l    #4,16(A6)
00005B0A  2010      10205          move.l    (A0),D0
00005B0C  2042      10206          move.l    D2,A0
00005B0E  5282      10207          addq.l    #1,D2
00005B10  1080      10208          move.b    D0,(A0)
00005B12  2042      10209          move.l    D2,A0
00005B14  4210      10210          clr.b     (A0)
00005B16  200D      10211          move.l    A5,D0
00005B18  6704      10212          beq.s     vsprintf_44
00005B1A  200D      10213          move.l    A5,D0
00005B1C  6002      10214          bra.s     vsprintf_45
                    10215   vsprintf_44:
00005B1E  7001      10216          moveq     #1,D0
                    10217   vsprintf_45:
00005B20  2A00      10218          move.l    D0,D5
00005B22  6000 002E 10219          bra       vsprintf_23
                    10220   vsprintf_31:
00005B26  206E 0010 10221          move.l    16(A6),A0
00005B2A  58AE 0010 10222          addq.l    #4,16(A6)
00005B2E  2610      10223          move.l    (A0),D3
00005B30  0C85 FFFF 10224          cmp.l     #-1,D5
00005B34  FFFF      
00005B36  660A      10225          bne.s     vsprintf_46
00005B38  2F03      10226          move.l    D3,-(A7)
00005B3A  6100 0578 10227          bsr       _strlen
00005B3E  584F      10228          addq.w    #4,A7
00005B40  2A00      10229          move.l    D0,D5
                    10230   vsprintf_46:
00005B42  600E      10231          bra.s     vsprintf_23
                    10232   vsprintf_22:
00005B44  206E 000C 10233          move.l    12(A6),A0
00005B48  2242      10234          move.l    D2,A1
00005B4A  5282      10235          addq.l    #1,D2
00005B4C  1290      10236          move.b    (A0),(A1)
00005B4E  2042      10237          move.l    D2,A0
00005B50  4210      10238          clr.b     (A0)
                    10239   vsprintf_23:
00005B52  2F03      10240          move.l    D3,-(A7)
00005B54  6100 055E 10241          bsr       _strlen
00005B58  584F      10242          addq.w    #4,A7
00005B5A  1800      10243          move.b    D0,D4
00005B5C  206E 000C 10244          move.l    12(A6),A0
00005B60  1010      10245          move.b    (A0),D0
00005B62  4880      10246          ext.w     D0
00005B64  48C0      10247          ext.l     D0
00005B66  0C80 0000 10248          cmp.l     #115,D0
00005B6A  0073      
00005B6C  6618      10249          bne.s     vsprintf_48
00005B6E  0C85 0000 10250          cmp.l     #0,D5
00005B72  0000      
00005B74  6D10      10251          blt.s     vsprintf_48
00005B76  4884      10252          ext.w     D4
00005B78  48C4      10253          ext.l     D4
00005B7A  B885      10254          cmp.l     D5,D4
00005B7C  6F04      10255          ble.s     vsprintf_50
00005B7E  1005      10256          move.b    D5,D0
00005B80  6002      10257          bra.s     vsprintf_51
                    10258   vsprintf_50:
00005B82  1004      10259          move.b    D4,D0
                    10260   vsprintf_51:
00005B84  1800      10261          move.b    D0,D4
                    10262   vsprintf_48:
00005B86  206E 000C 10263          move.l    12(A6),A0
00005B8A  1010      10264          move.b    (A0),D0
00005B8C  4880      10265          ext.w     D0
00005B8E  48C0      10266          ext.l     D0
00005B90  0C80 0000 10267          cmp.l     #88,D0
00005B94  0058      
00005B96  6600 0026 10268          bne       vsprintf_56
00005B9A  41EE FFDC 10269          lea       -36(A6),A0
00005B9E  2408      10270          move.l    A0,D2
                    10271   vsprintf_54:
00005BA0  2042      10272          move.l    D2,A0
00005BA2  4A10      10273          tst.b     (A0)
00005BA4  6718      10274          beq.s     vsprintf_56
00005BA6  2042      10275          move.l    D2,A0
00005BA8  1210      10276          move.b    (A0),D1
00005BAA  4881      10277          ext.w     D1
00005BAC  48C1      10278          ext.l     D1
00005BAE  2F01      10279          move.l    D1,-(A7)
00005BB0  6100 FB98 10280          bsr       _toupper
00005BB4  584F      10281          addq.w    #4,A7
00005BB6  2042      10282          move.l    D2,A0
00005BB8  1080      10283          move.b    D0,(A0)
00005BBA  5282      10284          addq.l    #1,D2
00005BBC  60E2      10285          bra       vsprintf_54
                    10286   vsprintf_56:
00005BBE  7E00      10287          moveq     #0,D7
00005BC0  41EE FFD4 10288          lea       -44(A6),A0
00005BC4  2408      10289          move.l    A0,D2
00005BC6  206E 000C 10290          move.l    12(A6),A0
00005BCA  1010      10291          move.b    (A0),D0
00005BCC  4880      10292          ext.w     D0
00005BCE  48C0      10293          ext.l     D0
00005BD0  0C80 0000 10294          cmp.l     #100,D0
00005BD4  0064      
00005BD6  6714      10295          beq.s     vsprintf_59
00005BD8  206E 000C 10296          move.l    12(A6),A0
00005BDC  1010      10297          move.b    (A0),D0
00005BDE  4880      10298          ext.w     D0
00005BE0  48C0      10299          ext.l     D0
00005BE2  0C80 0000 10300          cmp.l     #105,D0
00005BE6  0069      
00005BE8  6600 0076 10301          bne       vsprintf_65
                    10302   vsprintf_59:
00005BEC  4A2E FFCE 10303          tst.b     -50(A6)
00005BF0  6612      10304          bne.s     vsprintf_62
00005BF2  2043      10305          move.l    D3,A0
00005BF4  1010      10306          move.b    (A0),D0
00005BF6  4880      10307          ext.w     D0
00005BF8  48C0      10308          ext.l     D0
00005BFA  0C80 0000 10309          cmp.l     #45,D0
00005BFE  002D      
00005C00  6600 002E 10310          bne       vsprintf_60
                    10311   vsprintf_62:
00005C04  2043      10312          move.l    D3,A0
00005C06  1010      10313          move.b    (A0),D0
00005C08  4880      10314          ext.w     D0
00005C0A  48C0      10315          ext.l     D0
00005C0C  0C80 0000 10316          cmp.l     #45,D0
00005C10  002D      
00005C12  660E      10317          bne.s     vsprintf_63
00005C14  2043      10318          move.l    D3,A0
00005C16  5283      10319          addq.l    #1,D3
00005C18  2242      10320          move.l    D2,A1
00005C1A  5282      10321          addq.l    #1,D2
00005C1C  1290      10322          move.b    (A0),(A1)
00005C1E  5304      10323          subq.b    #1,D4
00005C20  6008      10324          bra.s     vsprintf_64
                    10325   vsprintf_63:
00005C22  2042      10326          move.l    D2,A0
00005C24  5282      10327          addq.l    #1,D2
00005C26  10BC 002B 10328          move.b    #43,(A0)
                    10329   vsprintf_64:
00005C2A  5287      10330          addq.l    #1,D7
00005C2C  6000 0032 10331          bra       vsprintf_65
                    10332   vsprintf_60:
00005C30  4A2E FFCF 10333          tst.b     -49(A6)
00005C34  6700 002A 10334          beq       vsprintf_65
00005C38  2043      10335          move.l    D3,A0
00005C3A  1010      10336          move.b    (A0),D0
00005C3C  4880      10337          ext.w     D0
00005C3E  48C0      10338          ext.l     D0
00005C40  0C80 0000 10339          cmp.l     #45,D0
00005C44  002D      
00005C46  660E      10340          bne.s     vsprintf_67
00005C48  2043      10341          move.l    D3,A0
00005C4A  5283      10342          addq.l    #1,D3
00005C4C  2242      10343          move.l    D2,A1
00005C4E  5282      10344          addq.l    #1,D2
00005C50  1290      10345          move.b    (A0),(A1)
00005C52  5304      10346          subq.b    #1,D4
00005C54  6008      10347          bra.s     vsprintf_68
                    10348   vsprintf_67:
00005C56  2042      10349          move.l    D2,A0
00005C58  5282      10350          addq.l    #1,D2
00005C5A  10BC 0020 10351          move.b    #32,(A0)
                    10352   vsprintf_68:
00005C5E  5287      10353          addq.l    #1,D7
                    10354   vsprintf_65:
00005C60  4A2E FFD0 10355          tst.b     -48(A6)
00005C64  6700 0066 10356          beq       vsprintf_77
00005C68  206E 000C 10357          move.l    12(A6),A0
00005C6C  1010      10358          move.b    (A0),D0
00005C6E  4880      10359          ext.w     D0
00005C70  48C0      10360          ext.l     D0
00005C72  0C80 0000 10361          cmp.l     #111,D0
00005C76  006F      
00005C78  671A      10362          beq.s     vsprintf_73
00005C7A  6E0C      10363          bgt.s     vsprintf_76
00005C7C  0C80 0000 10364          cmp.l     #88,D0
00005C80  0058      
00005C82  6710      10365          beq.s     vsprintf_73
00005C84  6000 0046 10366          bra       vsprintf_77
                    10367   vsprintf_76:
00005C88  0C80 0000 10368          cmp.l     #120,D0
00005C8C  0078      
00005C8E  6704      10369          beq.s     vsprintf_73
00005C90  6000 003A 10370          bra       vsprintf_77
                    10371   vsprintf_73:
00005C94  2042      10372          move.l    D2,A0
00005C96  5282      10373          addq.l    #1,D2
00005C98  10BC 0030 10374          move.b    #48,(A0)
00005C9C  5287      10375          addq.l    #1,D7
00005C9E  206E 000C 10376          move.l    12(A6),A0
00005CA2  1010      10377          move.b    (A0),D0
00005CA4  4880      10378          ext.w     D0
00005CA6  48C0      10379          ext.l     D0
00005CA8  0C80 0000 10380          cmp.l     #120,D0
00005CAC  0078      
00005CAE  6712      10381          beq.s     vsprintf_79
00005CB0  206E 000C 10382          move.l    12(A6),A0
00005CB4  1010      10383          move.b    (A0),D0
00005CB6  4880      10384          ext.w     D0
00005CB8  48C0      10385          ext.l     D0
00005CBA  0C80 0000 10386          cmp.l     #88,D0
00005CBE  0058      
00005CC0  660A      10387          bne.s     vsprintf_77
                    10388   vsprintf_79:
00005CC2  2042      10389          move.l    D2,A0
00005CC4  5282      10390          addq.l    #1,D2
00005CC6  10BC 0078 10391          move.b    #120,(A0)
00005CCA  5287      10392          addq.l    #1,D7
                    10393   vsprintf_77:
00005CCC  2042      10394          move.l    D2,A0
00005CCE  4210      10395          clr.b     (A0)
00005CD0  206E 000C 10396          move.l    12(A6),A0
00005CD4  1010      10397          move.b    (A0),D0
00005CD6  4880      10398          ext.w     D0
00005CD8  48C0      10399          ext.l     D0
00005CDA  0C80 0000 10400          cmp.l     #105,D0
00005CDE  0069      
00005CE0  6700 0076 10401          beq       vsprintf_82
00005CE4  6E42      10402          bgt.s     vsprintf_93
00005CE6  0C80 0000 10403          cmp.l     #99,D0
00005CEA  0063      
00005CEC  6700 0084 10404          beq       vsprintf_96
00005CF0  6E1C      10405          bgt.s     vsprintf_94
00005CF2  0C80 0000 10406          cmp.l     #88,D0
00005CF6  0058      
00005CF8  6700 005E 10407          beq       vsprintf_82
00005CFC  6E00 0184 10408          bgt       vsprintf_80
00005D00  0C80 0000 10409          cmp.l     #69,D0
00005D04  0045      
00005D06  6700 0050 10410          beq       vsprintf_82
00005D0A  6000 0176 10411          bra       vsprintf_80
                    10412   vsprintf_94:
00005D0E  0C80 0000 10413          cmp.l     #101,D0
00005D12  0065      
00005D14  6700 0042 10414          beq       vsprintf_82
00005D18  6E00 0168 10415          bgt       vsprintf_80
00005D1C  0C80 0000 10416          cmp.l     #100,D0
00005D20  0064      
00005D22  6734      10417          beq.s     vsprintf_82
00005D24  6000 015C 10418          bra       vsprintf_80
                    10419   vsprintf_93:
00005D28  0C80 0000 10420          cmp.l     #117,D0
00005D2C  0075      
00005D2E  6728      10421          beq.s     vsprintf_82
00005D30  6E1A      10422          bgt.s     vsprintf_95
00005D32  0C80 0000 10423          cmp.l     #115,D0
00005D36  0073      
00005D38  6700 0038 10424          beq       vsprintf_96
00005D3C  6E00 0144 10425          bgt       vsprintf_80
00005D40  0C80 0000 10426          cmp.l     #111,D0
00005D44  006F      
00005D46  6710      10427          beq.s     vsprintf_82
00005D48  6000 0138 10428          bra       vsprintf_80
                    10429   vsprintf_95:
00005D4C  0C80 0000 10430          cmp.l     #120,D0
00005D50  0078      
00005D52  6704      10431          beq.s     vsprintf_82
00005D54  6000 012C 10432          bra       vsprintf_80
                    10433   vsprintf_82:
00005D58  4A2E FFD2 10434          tst.b     -46(A6)
00005D5C  6714      10435          beq.s     vsprintf_96
00005D5E  4A2E FFCD 10436          tst.b     -51(A6)
00005D62  660E      10437          bne.s     vsprintf_96
00005D64  200D      10438          move.l    A5,D0
00005D66  9087      10439          sub.l     D7,D0
00005D68  4884      10440          ext.w     D4
00005D6A  48C4      10441          ext.l     D4
00005D6C  9084      10442          sub.l     D4,D0
00005D6E  2D40 FFFC 10443          move.l    D0,-4(A6)
                    10444   vsprintf_96:
00005D72  202E FFFC 10445          move.l    -4(A6),D0
00005D76  0C80 0000 10446          cmp.l     #0,D0
00005D7A  0000      
00005D7C  6C04      10447          bge.s     vsprintf_98
00005D7E  42AE FFFC 10448          clr.l     -4(A6)
                    10449   vsprintf_98:
00005D82  4A2E FFCD 10450          tst.b     -51(A6)
00005D86  6600 0030 10451          bne       vsprintf_104
00005D8A  4884      10452          ext.w     D4
00005D8C  48C4      10453          ext.l     D4
00005D8E  2004      10454          move.l    D4,D0
00005D90  D0AE FFFC 10455          add.l     -4(A6),D0
00005D94  D087      10456          add.l     D7,D0
00005D96  1D40 FFD1 10457          move.b    D0,-47(A6)
                    10458   vsprintf_102:
00005D9A  102E FFD1 10459          move.b    -47(A6),D0
00005D9E  4880      10460          ext.w     D0
00005DA0  48C0      10461          ext.l     D0
00005DA2  220D      10462          move.l    A5,D1
00005DA4  534D      10463          subq.w    #1,A5
00005DA6  B081      10464          cmp.l     D1,D0
00005DA8  6C0E      10465          bge.s     vsprintf_104
00005DAA  4878 0020 10466          pea       32
00005DAE  2F0A      10467          move.l    A2,-(A7)
00005DB0  4E93      10468          jsr       (A3)
00005DB2  504F      10469          addq.w    #8,A7
00005DB4  5286      10470          addq.l    #1,D6
00005DB6  60E2      10471          bra       vsprintf_102
                    10472   vsprintf_104:
00005DB8  41EE FFD4 10473          lea       -44(A6),A0
00005DBC  2408      10474          move.l    A0,D2
                    10475   vsprintf_105:
00005DBE  2042      10476          move.l    D2,A0
00005DC0  4A10      10477          tst.b     (A0)
00005DC2  6716      10478          beq.s     vsprintf_107
00005DC4  2042      10479          move.l    D2,A0
00005DC6  5282      10480          addq.l    #1,D2
00005DC8  1210      10481          move.b    (A0),D1
00005DCA  4881      10482          ext.w     D1
00005DCC  48C1      10483          ext.l     D1
00005DCE  2F01      10484          move.l    D1,-(A7)
00005DD0  2F0A      10485          move.l    A2,-(A7)
00005DD2  4E93      10486          jsr       (A3)
00005DD4  504F      10487          addq.w    #8,A7
00005DD6  5286      10488          addq.l    #1,D6
00005DD8  60E4      10489          bra       vsprintf_105
                    10490   vsprintf_107:
00005DDA  202E FFFC 10491          move.l    -4(A6),D0
00005DDE  1D40 FFD1 10492          move.b    D0,-47(A6)
                    10493   vsprintf_108:
00005DE2  102E FFD1 10494          move.b    -47(A6),D0
00005DE6  532E FFD1 10495          subq.b    #1,-47(A6)
00005DEA  4A00      10496          tst.b     D0
00005DEC  670E      10497          beq.s     vsprintf_110
00005DEE  4878 0030 10498          pea       48
00005DF2  2F0A      10499          move.l    A2,-(A7)
00005DF4  4E93      10500          jsr       (A3)
00005DF6  504F      10501          addq.w    #8,A7
00005DF8  5286      10502          addq.l    #1,D6
00005DFA  60E6      10503          bra       vsprintf_108
                    10504   vsprintf_110:
00005DFC  2043      10505          move.l    D3,A0
00005DFE  4A10      10506          tst.b     (A0)
00005E00  6700 0048 10507          beq       vsprintf_113
00005E04  206E 000C 10508          move.l    12(A6),A0
00005E08  1010      10509          move.b    (A0),D0
00005E0A  4880      10510          ext.w     D0
00005E0C  48C0      10511          ext.l     D0
00005E0E  0C80 0000 10512          cmp.l     #115,D0
00005E12  0073      
00005E14  670C      10513          beq.s     vsprintf_116
00005E16  6E18      10514          bgt.s     vsprintf_119
00005E18  0C80 0000 10515          cmp.l     #99,D0
00005E1C  0063      
00005E1E  6702      10516          beq.s     vsprintf_116
00005E20  600E      10517          bra.s     vsprintf_119
                    10518   vsprintf_116:
00005E22  2005      10519          move.l    D5,D0
00005E24  5385      10520          subq.l    #1,D5
00005E26  0C80 0000 10521          cmp.l     #0,D0
00005E2A  0000      
00005E2C  6E02      10522          bgt.s     vsprintf_119
00005E2E  6016      10523          bra.s     vsprintf_115
                    10524   vsprintf_119:
00005E30  2043      10525          move.l    D3,A0
00005E32  5283      10526          addq.l    #1,D3
00005E34  1210      10527          move.b    (A0),D1
00005E36  4881      10528          ext.w     D1
00005E38  48C1      10529          ext.l     D1
00005E3A  2F01      10530          move.l    D1,-(A7)
00005E3C  2F0A      10531          move.l    A2,-(A7)
00005E3E  4E93      10532          jsr       (A3)
00005E40  504F      10533          addq.w    #8,A7
00005E42  5286      10534          addq.l    #1,D6
00005E44  6002      10535          bra.s     vsprintf_112
                    10536   vsprintf_115:
00005E46  6002      10537          bra.s     vsprintf_113
                    10538   vsprintf_112:
00005E48  60B2      10539          bra       vsprintf_110
                    10540   vsprintf_113:
00005E4A  4A2E FFCD 10541          tst.b     -51(A6)
00005E4E  6700 0030 10542          beq       vsprintf_125
00005E52  4884      10543          ext.w     D4
00005E54  48C4      10544          ext.l     D4
00005E56  2004      10545          move.l    D4,D0
00005E58  D0AE FFFC 10546          add.l     -4(A6),D0
00005E5C  D087      10547          add.l     D7,D0
00005E5E  1D40 FFD1 10548          move.b    D0,-47(A6)
                    10549   vsprintf_123:
00005E62  102E FFD1 10550          move.b    -47(A6),D0
00005E66  4880      10551          ext.w     D0
00005E68  48C0      10552          ext.l     D0
00005E6A  220D      10553          move.l    A5,D1
00005E6C  534D      10554          subq.w    #1,A5
00005E6E  B081      10555          cmp.l     D1,D0
00005E70  6C0E      10556          bge.s     vsprintf_125
00005E72  4878 0020 10557          pea       32
00005E76  2F0A      10558          move.l    A2,-(A7)
00005E78  4E93      10559          jsr       (A3)
00005E7A  504F      10560          addq.w    #8,A7
00005E7C  5386      10561          subq.l    #1,D6
00005E7E  60E2      10562          bra       vsprintf_123
                    10563   vsprintf_125:
00005E80  6014      10564          bra.s     vsprintf_81
                    10565   vsprintf_80:
00005E82  206E 000C 10566          move.l    12(A6),A0
00005E86  1210      10567          move.b    (A0),D1
00005E88  4881      10568          ext.w     D1
00005E8A  48C1      10569          ext.l     D1
00005E8C  2F01      10570          move.l    D1,-(A7)
00005E8E  2F0A      10571          move.l    A2,-(A7)
00005E90  4E93      10572          jsr       (A3)
00005E92  504F      10573          addq.w    #8,A7
00005E94  5286      10574          addq.l    #1,D6
                    10575   vsprintf_81:
00005E96  52AE 000C 10576          addq.l    #1,12(A6)
                    10577   vsprintf_2:
00005E9A  6000 F9D6 10578          bra       vsprintf_1
                    10579   vsprintf_3:
00005E9E  4A92      10580          tst.l     (A2)
00005EA0  6710      10581          beq.s     vsprintf_126
00005EA2  4201      10582          clr.b     D1
00005EA4  C2BC 0000 10583          and.l     #255,D1
00005EA8  00FF      
00005EAA  2F01      10584          move.l    D1,-(A7)
00005EAC  2F0A      10585          move.l    A2,-(A7)
00005EAE  4E93      10586          jsr       (A3)
00005EB0  504F      10587          addq.w    #8,A7
                    10588   vsprintf_126:
00005EB2  2006      10589          move.l    D6,D0
00005EB4  4CDF 3CFC 10590          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00005EB8  4E5E      10591          unlk      A6
00005EBA  4E75      10592          rts
                    10593   @itoa_convert:
00005EBC  4E56 0000 10594          link      A6,#0
00005EC0  48E7 3C00 10595          movem.l   D2/D3/D4/D5,-(A7)
00005EC4  242E 0008 10596          move.l    8(A6),D2
00005EC8  262E 0010 10597          move.l    16(A6),D3
00005ECC  2A2E 000C 10598          move.l    12(A6),D5
00005ED0  2F05      10599          move.l    D5,-(A7)
00005ED2  2F03      10600          move.l    D3,-(A7)
00005ED4  6100 01F0 10601          bsr       ULDIV
00005ED8  202F 0004 10602          move.l    4(A7),D0
00005EDC  504F      10603          addq.w    #8,A7
00005EDE  2800      10604          move.l    D0,D4
00005EE0  BA83      10605          cmp.l     D3,D5
00005EE2  651A      10606          blo.s     @itoa_convert_1
00005EE4  2F03      10607          move.l    D3,-(A7)
00005EE6  2F05      10608          move.l    D5,-(A7)
00005EE8  2F03      10609          move.l    D3,-(A7)
00005EEA  6100 01DA 10610          bsr       ULDIV
00005EEE  2217      10611          move.l    (A7),D1
00005EF0  504F      10612          addq.w    #8,A7
00005EF2  2F01      10613          move.l    D1,-(A7)
00005EF4  2F02      10614          move.l    D2,-(A7)
00005EF6  61C4      10615          bsr       @itoa_convert
00005EF8  DEFC 000C 10616          add.w     #12,A7
00005EFC  2400      10617          move.l    D0,D2
                    10618   @itoa_convert_1:
00005EFE  0C84 0000 10619          cmp.l     #9,D4
00005F02  0009      
00005F04  6E0A      10620          bgt.s     @itoa_convert_3
00005F06  2004      10621          move.l    D4,D0
00005F08  0680 0000 10622          add.l     #48,D0
00005F0C  0030      
00005F0E  600E      10623          bra.s     @itoa_convert_4
                    10624   @itoa_convert_3:
00005F10  2004      10625          move.l    D4,D0
00005F12  0680 0000 10626          add.l     #97,D0
00005F16  0061      
00005F18  0480 0000 10627          sub.l     #10,D0
00005F1C  000A      
                    10628   @itoa_convert_4:
00005F1E  2042      10629          move.l    D2,A0
00005F20  1080      10630          move.b    D0,(A0)
00005F22  2002      10631          move.l    D2,D0
00005F24  5280      10632          addq.l    #1,D0
00005F26  4CDF 003C 10633          movem.l   (A7)+,D2/D3/D4/D5
00005F2A  4E5E      10634          unlk      A6
00005F2C  4E75      10635          rts
                    10636   _ltoa:
00005F2E  4E56 0000 10637          link      A6,#0
00005F32  48E7 3C00 10638          movem.l   D2/D3/D4/D5,-(A7)
00005F36  242E 0008 10639          move.l    8(A6),D2
00005F3A  262E 000C 10640          move.l    12(A6),D3
00005F3E  2A2E 0010 10641          move.l    16(A6),D5
00005F42  2803      10642          move.l    D3,D4
00005F44  0C85 0000 10643          cmp.l     #2,D5
00005F48  0002      
00005F4A  6D08      10644          blt.s     ltoa_3
00005F4C  0C85 0000 10645          cmp.l     #36,D5
00005F50  0024      
00005F52  6F06      10646          ble.s     ltoa_1
                    10647   ltoa_3:
00005F54  2003      10648          move.l    D3,D0
00005F56  6000 0052 10649          bra       ltoa_4
                    10650   ltoa_1:
00005F5A  0C85 0000 10651          cmp.l     #10,D5
00005F5E  000A      
00005F60  6600 0032 10652          bne       ltoa_5
00005F64  0C82 0000 10653          cmp.l     #0,D2
00005F68  0000      
00005F6A  6C28      10654          bge.s     ltoa_5
00005F6C  2002      10655          move.l    D2,D0
00005F6E  4480      10656          neg.l     D0
00005F70  2400      10657          move.l    D0,D2
00005F72  0C82 0000 10658          cmp.l     #0,D2
00005F76  0000      
00005F78  6C12      10659          bge.s     ltoa_7
00005F7A  4879 0000 10660          pea       @itoa_1
00005F7E  7A6A      
00005F80  2F03      10661          move.l    D3,-(A7)
00005F82  6100 F69C 10662          bsr       _strcpy
00005F86  504F      10663          addq.w    #8,A7
00005F88  2003      10664          move.l    D3,D0
00005F8A  601E      10665          bra.s     ltoa_4
                    10666   ltoa_7:
00005F8C  2044      10667          move.l    D4,A0
00005F8E  5284      10668          addq.l    #1,D4
00005F90  10BC 002D 10669          move.b    #45,(A0)
                    10670   ltoa_5:
00005F94  2F05      10671          move.l    D5,-(A7)
00005F96  2F02      10672          move.l    D2,-(A7)
00005F98  2F04      10673          move.l    D4,-(A7)
00005F9A  6100 FF20 10674          bsr       @itoa_convert
00005F9E  DEFC 000C 10675          add.w     #12,A7
00005FA2  2800      10676          move.l    D0,D4
00005FA4  2044      10677          move.l    D4,A0
00005FA6  4210      10678          clr.b     (A0)
00005FA8  2003      10679          move.l    D3,D0
                    10680   ltoa_4:
00005FAA  4CDF 003C 10681          movem.l   (A7)+,D2/D3/D4/D5
00005FAE  4E5E      10682          unlk      A6
00005FB0  4E75      10683          rts
                    10684   _ultoa:
00005FB2  4E56 0000 10685          link      A6,#0
00005FB6  48E7 3800 10686          movem.l   D2/D3/D4,-(A7)
00005FBA  262E 0010 10687          move.l    16(A6),D3
00005FBE  282E 000C 10688          move.l    12(A6),D4
00005FC2  2404      10689          move.l    D4,D2
00005FC4  0C83 0000 10690          cmp.l     #2,D3
00005FC8  0002      
00005FCA  6D08      10691          blt.s     ultoa_3
00005FCC  0C83 0000 10692          cmp.l     #36,D3
00005FD0  0024      
00005FD2  6F04      10693          ble.s     ultoa_1
                    10694   ultoa_3:
00005FD4  2004      10695          move.l    D4,D0
00005FD6  6018      10696          bra.s     ultoa_4
                    10697   ultoa_1:
00005FD8  2F03      10698          move.l    D3,-(A7)
00005FDA  2F2E 0008 10699          move.l    8(A6),-(A7)
00005FDE  2F02      10700          move.l    D2,-(A7)
00005FE0  6100 FEDA 10701          bsr       @itoa_convert
00005FE4  DEFC 000C 10702          add.w     #12,A7
00005FE8  2400      10703          move.l    D0,D2
00005FEA  2042      10704          move.l    D2,A0
00005FEC  4210      10705          clr.b     (A0)
00005FEE  2004      10706          move.l    D4,D0
                    10707   ultoa_4:
00005FF0  4CDF 001C 10708          movem.l   (A7)+,D2/D3/D4
00005FF4  4E5E      10709          unlk      A6
00005FF6  4E75      10710          rts
                    10711   _itoa:
00005FF8  4E56 0000 10712          link      A6,#0
00005FFC  2F2E 0010 10713          move.l    16(A6),-(A7)
00006000  2F2E 000C 10714          move.l    12(A6),-(A7)
00006004  2F2E 0008 10715          move.l    8(A6),-(A7)
00006008  6100 FF24 10716          bsr       _ltoa
0000600C  DEFC 000C 10717          add.w     #12,A7
00006010  4E5E      10718          unlk      A6
00006012  4E75      10719          rts
                    10720   ULMUL:
00006014  4E56 0000 10721          link    A6,#0
00006018  48E7 C000 10722          movem.l D0/D1,-(A7)
0000601C  222E 0008 10723          move.l  8(A6),D1
00006020  202E 000C 10724          move.l  12(A6),D0
00006024  602C      10725          bra.s   lmul_3
                    10726   LMUL:
00006026  4E56 0000 10727          link    A6,#0
0000602A  48E7 C000 10728          movem.l D0/D1,-(A7)
0000602E  222E 0008 10729          move.l  8(A6),D1
00006032  202E 000C 10730          move.l  12(A6),D0
00006036  4A80      10731          tst.l   D0
00006038  6A0A      10732          bpl.s   lmul_1
0000603A  4480      10733          neg.l   D0
0000603C  4A81      10734          tst.l   D1
0000603E  6A0A      10735          bpl.s   lmul_2
00006040  4481      10736          neg.l   D1
00006042  600E      10737          bra.s   lmul_3
                    10738   lmul_1:
00006044  4A81      10739          tst.l   D1
00006046  6A0A      10740          bpl.s   lmul_3
00006048  4481      10741          neg.l   D1
                    10742   lmul_2:
0000604A  6114      10743          bsr.s   domul
0000604C  4481      10744          neg.l   D1
0000604E  4080      10745          negx.l  D0
00006050  6002      10746          bra.s   lmul_4
                    10747   lmul_3:
00006052  610C      10748          bsr.s   domul
                    10749   lmul_4:
00006054  2D41 0008 10750          move.l  D1,8(A6)
00006058  4CDF 0003 10751          movem.l (A7)+,D0/D1
0000605C  4E5E      10752          unlk    A6
0000605E  4E75      10753          rts
                    10754   domul:
00006060  0C81 0000 10755          cmpi.l  #$FFFF,D1
00006064  FFFF      
00006066  620C      10756          bhi.s   domul_1
00006068  0C80 0000 10757          cmpi.l  #$FFFF,D0
0000606C  FFFF      
0000606E  620E      10758          bhi.s   domul_2
00006070  C2C0      10759          mulu    D0,D1
00006072  4E75      10760          rts
                    10761   domul_1:
00006074  0C80 0000 10762          cmpi.l  #$FFFF,D0
00006078  FFFF      
0000607A  6218      10763          bhi.s   domul_4
0000607C  6002      10764          bra.s   domul_3
                    10765   domul_2
0000607E  C141      10766          exg     D0,D1
                    10767   domul_3:
00006080  2F02      10768          move.l  D2,-(A7)
00006082  2401      10769          move.l  D1,D2
00006084  4842      10770          swap    D2
00006086  C2C0      10771          mulu    D0,D1
00006088  C4C0      10772          mulu    D0,D2
0000608A  4842      10773          swap    D2
0000608C  4242      10774          clr.w   D2
0000608E  D282      10775          add.l   D2,D1
00006090  241F      10776          move.l  (A7)+,D2
00006092  4E75      10777          rts
                    10778   domul_4:
00006094  48E7 3000 10779          movem.l D2/D3,-(A7)
00006098  2401      10780          move.l  D1,D2
0000609A  2601      10781          move.l  D1,D3
0000609C  C2C0      10782          mulu    D0,D1
0000609E  4842      10783          swap    D2
000060A0  C4C0      10784          mulu    D0,D2
000060A2  4840      10785          swap    D0
000060A4  C6C0      10786          mulu    D0,D3
000060A6  D483      10787          add.l   D3,D2
000060A8  4842      10788          swap    D2
000060AA  4242      10789          clr.w   D2
000060AC  D282      10790          add.l   D2,D1
000060AE  4CDF 000C 10791          movem.l (A7)+,D2/D3
000060B2  4E75      10792          rts
                    10793   _strlen:
000060B4  206F 0004 10794          move.l    (4,A7),A0
000060B8  2248      10795          move.l    A0,A1
                    10796   strlen_1:
000060BA  4A19      10797          tst.b     (A1)+
000060BC  66FC      10798          bne       strlen_1
000060BE  2009      10799          move.l    A1,D0
000060C0  9088      10800          sub.l     A0,D0
000060C2  5380      10801          subq.l    #1,D0
000060C4  4E75      10802          rts
                    10803   ULDIV:
000060C6  4E56 0000 10804          link    A6,#0
000060CA  48E7 C000 10805          movem.l D0/D1,-(A7)
000060CE  222E 0008 10806          move.l  8(A6),D1
000060D2  202E 000C 10807          move.l  12(A6),D0
000060D6  6036      10808          bra.s   ldiv_3
                    10809   LDIV:
000060D8  4E56 0000 10810          link    A6,#0
000060DC  48E7 C000 10811          movem.l D0/D1,-(A7)
000060E0  222E 0008 10812          move.l  8(A6),D1
000060E4  202E 000C 10813          move.l  12(A6),D0
000060E8  4A80      10814          tst.l   D0
000060EA  6A0E      10815          bpl.s   ldiv_1
000060EC  4480      10816          neg.l   D0
000060EE  4A81      10817          tst.l   D1
000060F0  6A14      10818          bpl.s   ldiv_2
000060F2  4481      10819          neg.l   D1
000060F4  612A      10820          bsr.s   dodiv
000060F6  4481      10821          neg.l   D1
000060F8  6016      10822          bra.s   ldiv_4
                    10823   ldiv_1:
000060FA  4A81      10824          tst.l   D1
000060FC  6A10      10825          bpl.s   ldiv_3
000060FE  4481      10826          neg.l   D1
00006100  611E      10827          bsr.s   dodiv
00006102  4480      10828          neg.l   D0
00006104  600A      10829          bra.s   ldiv_4
                    10830   ldiv_2:
00006106  6118      10831          bsr.s   dodiv
00006108  4480      10832          neg.l   D0
0000610A  4481      10833          neg.l   D1
0000610C  6002      10834          bra.s   ldiv_4
                    10835   ldiv_3:
0000610E  6110      10836          bsr.s   dodiv
                    10837   ldiv_4:
00006110  2D40 0008 10838          move.l  D0,8(A6)
00006114  2D41 000C 10839          move.l  D1,12(A6)
00006118  4CDF 0003 10840          movem.l (A7)+,D0/D1
0000611C  4E5E      10841          unlk    A6
0000611E  4E75      10842          rts
                    10843   dodiv:
00006120  0C81 0000 10844          cmpi.l  #$FFFF,D1
00006124  FFFF      
00006126  6236      10845          bhi.s   dodiv_2
00006128  0C80 0000 10846          cmpi.l  #$FFFF,D0
0000612C  FFFF      
0000612E  6210      10847          bhi.s   dodiv_1
00006130  80C1      10848          divu    D1,D0
00006132  2200      10849          move.l  D0,D1
00006134  4241      10850          clr.w   D1
00006136  4841      10851          swap    D1
00006138  0280 0000 10852          andi.l  #$FFFF,D0
0000613C  FFFF      
0000613E  4E75      10853          rts
                    10854   dodiv_1:
00006140  48A7 A000 10855          movem.w D0/D2,-(A7)
00006144  4240      10856          clr.w   D0
00006146  4840      10857          swap    D0
00006148  80C1      10858          divu    D1,D0
0000614A  3400      10859          move.w  D0,D2
0000614C  301F      10860          move.w  (A7)+,D0
0000614E  80C1      10861          divu    D1,D0
00006150  4840      10862          swap    D0
00006152  4281      10863          clr.l   D1
00006154  3200      10864          move.w  D0,D1
00006156  3002      10865          move.w  D2,D0
00006158  4840      10866          swap    D0
0000615A  341F      10867          move.w  (A7)+,D2
0000615C  4E75      10868          rts
                    10869   dodiv_2:
0000615E  48E7 3800 10870          movem.l D2/D3/D4,-(A7)
00006162  2401      10871          move.l  D1,D2
00006164  4242      10872          clr.w   D2
00006166  4842      10873          swap    D2
00006168  5282      10874          addq.l  #1,D2
0000616A  2600      10875          move.l  D0,D3
0000616C  2801      10876          move.l  D1,D4
0000616E  2202      10877          move.l  D2,D1
00006170  61CE      10878          bsr.s   dodiv_1
00006172  2204      10879          move.l  D4,D1
00006174  82C2      10880          divu    D2,D1
00006176  80C1      10881          divu    D1,D0
00006178  0280 0000 10882          andi.l  #$FFFF,D0
0000617C  FFFF      
                    10883   dodiv_3:
0000617E  2204      10884          move.l  D4,D1
00006180  2404      10885          move.l  D4,D2
00006182  4842      10886          swap    D2
00006184  C2C0      10887          mulu    D0,D1
00006186  C4C0      10888          mulu    D0,D2
00006188  4842      10889          swap    D2
0000618A  D282      10890          add.l   D2,D1
0000618C  9283      10891          sub.l   D3,D1
0000618E  620A      10892          bhi.s   dodiv_4
00006190  4481      10893          neg.l   D1
00006192  B881      10894          cmp.l   D1,D4
00006194  6208      10895          bhi.s   dodiv_5
00006196  5280      10896          addq.l  #1,D0
00006198  60E4      10897          bra.s   dodiv_3
                    10898   dodiv_4:
0000619A  5380      10899          subq.l  #1,D0
0000619C  60E0      10900          bra.s   dodiv_3
                    10901   dodiv_5:
0000619E  4CDF 001C 10902          movem.l (A7)+,D2/D3/D4
000061A2  4E75      10903          rts
                    10904          section   data
          0000 61A4 10905   DataStart       equ       *
                    10906   
                    10907   *********************************************************************************************************
                    10908   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    10909   * to ram as part of the CStart routine in this file
                    10910   *********************************************************************************************************
                    10911   
                    10912   @m68kde~1_1:
000061A4  0D53 7769 10913          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
000061A8  7463 6865 
000061AC  7320 5357 
000061B0  5B        
000061B1  3135 2D30 10914          dc.b      49,53,45,48,93,32,61,32,0
000061B5  5D20 3D20 
000061B9  00        
                    10915   @m68kde~1_2:
000061BA  3000      10916          dc.b      48,0
                    10917   @m68kde~1_3:
000061BC  3100      10918          dc.b      49,0
                    10919   @m68kde~1_4:
000061BE  0D0A 456E 10920          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
000061C2  7465 7220 
000061C6  5374 6172 
000061CA  74        
000061CB  2041 6464 10921          dc.b      32,65,100,100,114,101,115,115,58,32,0
000061CF  7265 7373 
000061D3  3A20 00   
                    10922   @m68kde~1_5:
000061D6  0D0A 3C45 10923          dc.b      13,10,60,69,83,67,62,32,61,32,65,98,111,114
000061DA  5343 3E20 
000061DE  3D20 4162 
000061E2  6F72      
000061E4  742C 2053 10924          dc.b      116,44,32,83,80,65,67,69,32,116,111,32,67,111
000061E8  5041 4345 
000061EC  2074 6F20 
000061F0  436F      
000061F2  6E74 696E 10925          dc.b      110,116,105,110,117,101,0
000061F6  7565 00   
                    10926   @m68kde~1_6:
000061FA  0D0A 2530 10927          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,32,32
000061FE  3858 2020 
00006202  2530 3458 
00006206  2020 20   
00006209  2020 2020 10928          dc.b      32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
0000620D  2020 2020 
00006211  2020 2020 
00006215  2020 20   
00006218  2020 2020 10929          dc.b      32,32,32,32,32,32,37,115,0
0000621C  2020 2573 
00006220  00        
                    10930   @m68kde~1_7:
00006222  0D0A 2530 10931          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00006226  3858 2020 
0000622A  2530 3458 
0000622E  2025 30   
00006231  3458 2020 10932          dc.b      52,88,32,32,32,32,32,32,32,32,32,32,32,32,32
00006235  2020 2020 
00006239  2020 2020 
0000623D  2020 20   
00006240  2020 2020 10933          dc.b      32,32,32,32,32,32,37,115,0
00006244  2020 2573 
00006248  00        
                    10934   @m68kde~1_8:
0000624A  0D0A 2530 10935          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
0000624E  3858 2020 
00006252  2530 3458 
00006256  2025 30   
00006259  3458 2025 10936          dc.b      52,88,32,37,48,52,88,32,32,32,32,32,32,32,32
0000625D  3034 5820 
00006261  2020 2020 
00006265  2020 20   
00006268  2020 2020 10937          dc.b      32,32,32,32,32,32,37,115,0
0000626C  2020 2573 
00006270  00        
                    10938   @m68kde~1_9:
00006272  0D0A 2530 10939          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00006276  3858 2020 
0000627A  2530 3458 
0000627E  2025 30   
00006281  3458 2025 10940          dc.b      52,88,32,37,48,52,88,32,37,48,52,88,32,32,32
00006285  3034 5820 
00006289  2530 3458 
0000628D  2020 20   
00006290  2020 2020 10941          dc.b      32,32,32,32,32,32,37,115,0
00006294  2020 2573 
00006298  00        
                    10942   @m68kde~1_10:
0000629A  0D0A 2530 10943          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
0000629E  3858 2020 
000062A2  2530 3458 
000062A6  2025 30   
000062A9  3458 2025 10944          dc.b      52,88,32,37,48,52,88,32,37,48,52,88,32,37,48
000062AD  3034 5820 
000062B1  2530 3458 
000062B5  2025 30   
000062B8  3458 2020 10945          dc.b      52,88,32,32,32,32,37,115,0
000062BC  2020 2573 
000062C0  00        
                    10946   @m68kde~1_11:
000062C2  0D0A 4475 10947          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
000062C6  6D70 204D 
000062CA  656D 6F72 
000062CE  79        
000062CF  2042 6C6F 10948          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
000062D3  636B 3A20 
000062D7  3C45 5343 
000062DB  3E20      
000062DD  746F 2041 10949          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
000062E1  626F 7274 
000062E5  2C20 3C53 
000062E9  50        
000062EA  4143 453E 10950          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
000062EE  2074 6F20 
000062F2  436F 6E74 
000062F6  69        
000062F7  6E75 6500 10951          dc.b      110,117,101,0
                    10952   @m68kde~1_12:
000062FC  0D0A 456E 10953          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00006300  7465 7220 
00006304  5374 6172 
00006308  74        
00006309  2041 6464 10954          dc.b      32,65,100,100,114,101,115,115,58,32,0
0000630D  7265 7373 
00006311  3A20 00   
                    10955   @m68kde~1_13:
00006314  0D0A 2530 10956          dc.b      13,10,37,48,56,120,32,0
00006318  3878 2000 
                    10957   @m68kde~1_14:
0000631C  2530 3258 10958          dc.b      37,48,50,88,0
00006320  00        
                    10959   @m68kde~1_15:
00006322  2020 00   10960          dc.b      32,32,0
                    10961   @m68kde~1_16:
00006326  0D0A 00   10962          dc.b      13,10,0
                    10963   @m68kde~1_17:
0000632A  0D0A 4669 10964          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
0000632E  6C6C 204D 
00006332  656D 6F72 
00006336  79        
00006337  2042 6C6F 10965          dc.b      32,66,108,111,99,107,0
0000633B  636B 00   
                    10966   @m68kde~1_18:
0000633E  0D0A 456E 10967          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00006342  7465 7220 
00006346  5374 6172 
0000634A  74        
0000634B  2041 6464 10968          dc.b      32,65,100,100,114,101,115,115,58,32,0
0000634F  7265 7373 
00006353  3A20 00   
                    10969   @m68kde~1_19:
00006356  0D0A 456E 10970          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
0000635A  7465 7220 
0000635E  456E 6420 
00006362  41        
00006363  6464 7265 10971          dc.b      100,100,114,101,115,115,58,32,0
00006367  7373 3A20 
0000636B  00        
                    10972   @m68kde~1_20:
0000636C  0D0A 456E 10973          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00006370  7465 7220 
00006374  4669 6C6C 
00006378  20        
00006379  4461 7461 10974          dc.b      68,97,116,97,58,32,0
0000637D  3A20 00   
                    10975   @m68kde~1_21:
00006380  0D0A 4669 10976          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00006384  6C6C 696E 
00006388  6720 4164 
0000638C  64        
0000638D  7265 7373 10977          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00006391  6573 205B 
00006395  2425 3038 
00006399  58        
0000639A  202D 2024 10978          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
0000639E  2530 3858 
000063A2  5D20 7769 
000063A6  7468      
000063A8  2024 2530 10979          dc.b      32,36,37,48,50,88,0
000063AC  3258 00   
                    10980   @m68kde~1_22:
000063B0  0D0A 446F 10981          dc.b      13,10,68,111,119,110,108,111,97,100,32,80,114
000063B4  776E 6C6F 
000063B8  6164 2050 
000063BC  72        
000063BD  6F67 7261 10982          dc.b      111,103,114,97,109,32,116,111,32,77,101,109
000063C1  6D20 746F 
000063C5  204D 656D 
000063C9  6F72 792E 10983          dc.b      111,114,121,46,46,46,46,60,69,83,67,62,32,116
000063CD  2E2E 2E3C 
000063D1  4553 433E 
000063D5  2074      
000063D7  6F20 4361 10984          dc.b      111,32,67,97,110,99,101,108,0
000063DB  6E63 656C 
000063DF  00        
                    10985   @m68kde~1_23:
000063E0  0D0A 5761 10986          dc.b      13,10,87,97,105,116,105,110,103,32,102,111,114
000063E4  6974 696E 
000063E8  6720 666F 
000063EC  72        
000063ED  204C 6170 10987          dc.b      32,76,97,112,116,111,112,32,116,111,32,115,101
000063F1  746F 7020 
000063F5  746F 2073 
000063F9  65        
000063FA  6E64 2027 10988          dc.b      110,100,32,39,46,72,69,88,39,32,102,105,108
000063FE  2E48 4558 
00006402  2720 6669 
00006406  6C        
00006407  653A 0D0A 10989          dc.b      101,58,13,10,0
0000640B  00        
                    10990   @m68kde~1_24:
0000640C  0D0A 4C6F 10991          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00006410  6164 2046 
00006414  6169 6C65 
00006418  64        
00006419  2061 7420 10992          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
0000641D  4164 6472 
00006421  6573 7320 
00006425  3D        
00006426  205B 2425 10993          dc.b      32,91,36,37,48,56,88,93,13,10,0
0000642A  3038 585D 
0000642E  0D0A 00   
                    10994   @m68kde~1_25:
00006432  0D0A 4C6F 10995          dc.b      13,10,76,111,97,100,32,83,117,99,99,101,115
00006436  6164 2053 
0000643A  7563 6365 
0000643E  73        
0000643F  7366 756C 10996          dc.b      115,102,117,108,46,46,46,46,46,13,10,0
00006443  2E2E 2E2E 
00006447  2E0D 0A00 
                    10997   @m68kde~1_26:
0000644C  0D0A 4578 10998          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00006450  616D 696E 
00006454  6520 616E 
00006458  64        
00006459  2043 6861 10999          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
0000645D  6E67 6520 
00006461  4D65 6D6F 
00006465  72        
00006466  7900      11000          dc.b      121,0
                    11001   @m68kde~1_27:
00006468  0D0A 3C45 11002          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
0000646C  5343 3E20 
00006470  746F 2053 
00006474  746F      
00006476  702C 203C 11003          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
0000647A  5350 4143 
0000647E  453E 2074 
00006482  6F20      
00006484  4164 7661 11004          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00006488  6E63 652C 
0000648C  2027 2D27 
00006490  2074      
00006492  6F20 476F 11005          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00006496  2042 6163 
0000649A  6B2C 203C 
0000649E  4441      
000064A0  5441 3E20 11006          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
000064A4  746F 2063 
000064A8  6861 6E67 
000064AC  65        
000064AD  00        11007          dc.b      0
                    11008   @m68kde~1_28:
000064AE  0D0A 456E 11009          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
000064B2  7465 7220 
000064B6  4164 6472 
000064BA  65        
000064BB  7373 3A20 11010          dc.b      115,115,58,32,0
000064BF  00        
                    11011   @m68kde~1_29:
000064C0  0D0A 5B25 11012          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
000064C4  3038 785D 
000064C8  203A 2025 
000064CC  3032 78   
000064CF  2020 00   11013          dc.b      32,32,0
                    11014   @m68kde~1_30:
000064D2  0D0A 5761 11015          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
000064D6  726E 696E 
000064DA  6720 4368 
000064DE  61        
000064DF  6E67 6520 11016          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
000064E3  4661 696C 
000064E7  6564 3A20 
000064EB  57        
000064EC  726F 7465 11017          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
000064F0  205B 2530 
000064F4  3278 5D2C 
000064F8  20        
000064F9  5265 6164 11018          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
000064FD  205B 2530 
00006501  3278 5D00 
                    11019   @m68kde~1_31:
00006506  0D0A 5072 11020          dc.b      13,10,80,114,111,103,114,97,109,32,70,108,97
0000650A  6F67 7261 
0000650E  6D20 466C 
00006512  61        
00006513  7368 204D 11021          dc.b      115,104,32,77,101,109,111,114,121,46,46,46,46
00006517  656D 6F72 
0000651B  792E 2E2E 
0000651F  2E        
00006520  2E5B 592F 11022          dc.b      46,91,89,47,78,93,63,0
00006524  4E5D 3F00 
                    11023   @m68kde~1_32:
00006528  0D0A 5072 11024          dc.b      13,10,80,114,111,103,114,97,109,109,105,110
0000652C  6F67 7261 
00006530  6D6D 696E 
00006534  6720 4142 11025          dc.b      103,32,65,66,65,78,68,79,78,69,68,46,46,46,46
00006538  414E 444F 
0000653C  4E45 442E 
00006540  2E2E 2E   
00006543  2E00      11026          dc.b      46,0
                    11027   @m68kde~1_33:
00006546  0D0A 4572 11028          dc.b      13,10,69,114,97,115,105,110,103,32,70,108,97
0000654A  6173 696E 
0000654E  6720 466C 
00006552  61        
00006553  7368 204D 11029          dc.b      115,104,32,77,101,109,111,114,121,46,46,46,46
00006557  656D 6F72 
0000655B  792E 2E2E 
0000655F  2E        
00006560  2E00      11030          dc.b      46,0
                    11031   @m68kde~1_34:
00006562  0D0A 5072 11032          dc.b      13,10,80,114,111,103,114,97,109,109,105,110
00006566  6F67 7261 
0000656A  6D6D 696E 
0000656E  6720 466C 11033          dc.b      103,32,70,108,97,115,104,32,77,101,109,111,114
00006572  6173 6820 
00006576  4D65 6D6F 
0000657A  72        
0000657B  792E 2E2E 11034          dc.b      121,46,46,46,46,46,0
0000657F  2E2E 00   
                    11035   @m68kde~1_35:
00006582  0D0A 5665 11036          dc.b      13,10,86,101,114,105,102,121,105,110,103,46
00006586  7269 6679 
0000658A  696E 672E 
0000658E  2E2E 2E2E 11037          dc.b      46,46,46,46,0
00006592  00        
                    11038   @m68kde~1_36:
00006594  0D0A 4641 11039          dc.b      13,10,70,65,73,76,69,68,46,46,46,46,46,0
00006598  494C 4544 
0000659C  2E2E 2E2E 
000065A0  2E00      
                    11040   @m68kde~1_37:
000065A2  0D0A 5041 11041          dc.b      13,10,80,65,83,83,69,68,0
000065A6  5353 4544 
000065AA  00        
                    11042   @m68kde~1_38:
000065AC  0D0A 4C6F 11043          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
000065B0  6164 696E 
000065B4  6720 5072 
000065B8  6F        
000065B9  6772 616D 11044          dc.b      103,114,97,109,32,70,114,111,109,32,70,108,97
000065BD  2046 726F 
000065C1  6D20 466C 
000065C5  61        
000065C6  7368 2E2E 11045          dc.b      115,104,46,46,46,46,85,115,105,110,103,32,0
000065CA  2E2E 5573 
000065CE  696E 6720 
000065D2  00        
                    11046   @m68kde~1_39:
000065D4  536F 6674 11047          dc.b      83,111,102,116,119,97,114,101,0
000065D8  7761 7265 
000065DC  00        
                    11048   @m68kde~1_40:
000065DE  444D 4100 11049          dc.b      68,77,65,0
                    11050   @m68kde~1_41:
000065E2  0D0A 5072 11051          dc.b      13,10,80,114,111,103,114,97,109,32,76,111,97
000065E6  6F67 7261 
000065EA  6D20 4C6F 
000065EE  61        
000065EF  6465 642E 11052          dc.b      100,101,100,46,46,46,46,46,0
000065F3  2E2E 2E2E 
000065F7  00        
                    11053   @m68kde~1_42:
000065F8  2425 3038 11054          dc.b      36,37,48,56,88,32,32,0
000065FC  5820 2000 
                    11055   @m68kde~1_43:
00006600  2530 3258 11056          dc.b      37,48,50,88,0
00006604  00        
                    11057   @m68kde~1_44:
00006606  2000      11058          dc.b      32,0
                    11059   @m68kde~1_45:
00006608  2020 00   11060          dc.b      32,32,0
                    11061   @m68kde~1_46:
0000660C  2E00      11062          dc.b      46,0
                    11063   @m68kde~1_47:
0000660E  2563 00   11064          dc.b      37,99,0
                    11065   @m68kde~1_48:
00006612  00        11066          dc.b      0
                    11067   @m68kde~1_49:
00006614  0D0A 0D0A 11068          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00006618  2044 3020 
0000661C  3D20 2425 
00006620  3038 58   
00006623  2020 4130 11069          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00006627  203D 2024 
0000662B  2530 3858 
0000662F  00        
                    11070   @m68kde~1_50:
00006630  0D0A 2044 11071          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00006634  3120 3D20 
00006638  2425 3038 
0000663C  5820 20   
0000663F  4131 203D 11072          dc.b      65,49,32,61,32,36,37,48,56,88,0
00006643  2024 2530 
00006647  3858 00   
                    11073   @m68kde~1_51:
0000664A  0D0A 2044 11074          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
0000664E  3220 3D20 
00006652  2425 3038 
00006656  5820 20   
00006659  4132 203D 11075          dc.b      65,50,32,61,32,36,37,48,56,88,0
0000665D  2024 2530 
00006661  3858 00   
                    11076   @m68kde~1_52:
00006664  0D0A 2044 11077          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00006668  3320 3D20 
0000666C  2425 3038 
00006670  5820 20   
00006673  4133 203D 11078          dc.b      65,51,32,61,32,36,37,48,56,88,0
00006677  2024 2530 
0000667B  3858 00   
                    11079   @m68kde~1_53:
0000667E  0D0A 2044 11080          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00006682  3420 3D20 
00006686  2425 3038 
0000668A  5820 20   
0000668D  4134 203D 11081          dc.b      65,52,32,61,32,36,37,48,56,88,0
00006691  2024 2530 
00006695  3858 00   
                    11082   @m68kde~1_54:
00006698  0D0A 2044 11083          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
0000669C  3520 3D20 
000066A0  2425 3038 
000066A4  5820 20   
000066A7  4135 203D 11084          dc.b      65,53,32,61,32,36,37,48,56,88,0
000066AB  2024 2530 
000066AF  3858 00   
                    11085   @m68kde~1_55:
000066B2  0D0A 2044 11086          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
000066B6  3620 3D20 
000066BA  2425 3038 
000066BE  5820 20   
000066C1  4136 203D 11087          dc.b      65,54,32,61,32,36,37,48,56,88,0
000066C5  2024 2530 
000066C9  3858 00   
                    11088   @m68kde~1_56:
000066CC  0D0A 2044 11089          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
000066D0  3720 3D20 
000066D4  2425 3038 
000066D8  5820 20   
000066DB  4137 203D 11090          dc.b      65,55,32,61,32,36,37,48,56,88,0
000066DF  2024 2530 
000066E3  3858 00   
                    11091   @m68kde~1_57:
000066E6  0D0A 0D0A 11092          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
000066EA  5553 5020 
000066EE  3D20 2425 
000066F2  3038 58   
000066F5  2020 2841 11093          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
000066F9  3729 2055 
000066FD  7365 7220 
00006701  5350      
00006703  00        11094          dc.b      0
                    11095   @m68kde~1_58:
00006704  0D0A 5353 11096          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00006708  5020 3D20 
0000670C  2425 3038 
00006710  5820 20   
00006713  2841 3729 11097          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00006717  2053 7570 
0000671B  6572 7669 
0000671F  73        
00006720  6F72 2053 11098          dc.b      111,114,32,83,80,0
00006724  5000      
                    11099   @m68kde~1_59:
00006726  0D0A 2053 11100          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
0000672A  5220 3D20 
0000672E  2425 3034 
00006732  5820 20   
00006735  2000      11101          dc.b      32,0
                    11102   @m68kde~1_60:
00006738  2020 205B 11103          dc.b      32,32,32,91,0
0000673C  00        
                    11104   @m68kde~1_61:
0000673E  0D0A 2050 11105          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00006742  4320 3D20 
00006746  2425 3038 
0000674A  5820 20   
0000674D  00        11106          dc.b      0
                    11107   @m68kde~1_62:
0000674E  2573 00   11108          dc.b      37,115,0
                    11109   @m68kde~1_63:
00006752  5B42 5245 11110          dc.b      91,66,82,69,65,75,80,79,73,78,84,93,0
00006756  414B 504F 
0000675A  494E 545D 
0000675E  00        
                    11111   @m68kde~1_64:
00006760  0D0A 00   11112          dc.b      13,10,0
                    11113   @m68kde~1_65:
00006764  0D0A 5750 11114          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00006768  2564 203D 
0000676C  2025 7300 
                    11115   @m68kde~1_66:
00006770  0D0A 0D0A 11116          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00006774  0D0A 0D0A 
00006778  0D0A 0D0A 
0000677C  5369 6E   
0000677F  676C 6520 11117          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00006783  5374 6570 
00006787  2020 3A5B 
0000678B  4F        
0000678C  4E5D 00   11118          dc.b      78,93,0
                    11119   @m68kde~1_67:
00006790  0D0A 4272 11120          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006794  6561 6B20 
00006798  506F 696E 
0000679C  74        
0000679D  7320 3A5B 11121          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
000067A1  4469 7361 
000067A5  626C 6564 
000067A9  5D        
000067AA  00        11122          dc.b      0
                    11123   @m68kde~1_68:
000067AC  0D0A 5072 11124          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
000067B0  6573 7320 
000067B4  3C53 5041 
000067B8  4345      
000067BA  3E20 746F 11125          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
000067BE  2045 7865 
000067C2  6375 7465 
000067C6  20        
000067C7  4E65 7874 11126          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
000067CB  2049 6E73 
000067CF  7472 7563 
000067D3  7469 6F6E 11127          dc.b      116,105,111,110,0
000067D7  00        
                    11128   @m68kde~1_69:
000067D8  0D0A 5072 11129          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000067DC  6573 7320 
000067E0  3C45 5343 
000067E4  3E20      
000067E6  746F 2052 11130          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
000067EA  6573 756D 
000067EE  6520 5072 
000067F2  6F67 7261 11131          dc.b      111,103,114,97,109,0
000067F6  6D00      
                    11132   @m68kde~1_70:
000067F8  0D0A 496C 11133          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
000067FC  6C65 6761 
00006800  6C20 4461 
00006804  74        
00006805  6120 5265 11134          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00006809  6769 7374 
0000680D  6572 203A 
00006811  20        
00006812  5573 6520 11135          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00006816  4430 2D44 
0000681A  372E 2E2E 
0000681E  2E2E      
00006820  0D0A 00   11136          dc.b      13,10,0
                    11137   @m68kde~1_71:
00006824  0D0A 4425 11138          dc.b      13,10,68,37,99,32,61,32,0
00006828  6320 3D20 
0000682C  00        
                    11139   @m68kde~1_72:
0000682E  0D0A 496C 11140          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
00006832  6C65 6761 
00006836  6C20 4164 
0000683A  64        
0000683B  7265 7373 11141          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
0000683F  2052 6567 
00006843  6973 7465 
00006847  7220 3A20 11142          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
0000684B  5573 6520 
0000684F  4130 2D41 
00006853  372E      
00006855  2E2E 2E2E 11143          dc.b      46,46,46,46,13,10,0
00006859  0D0A 00   
                    11144   @m68kde~1_73:
0000685C  0D0A 4125 11145          dc.b      13,10,65,37,99,32,61,32,0
00006860  6320 3D20 
00006864  00        
                    11146   @m68kde~1_74:
00006866  0D0A 5573 11147          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
0000686A  6572 2053 
0000686E  5020 3D20 
00006872  00        
                    11148   @m68kde~1_75:
00006874  0D0A 496C 11149          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00006878  6C65 6761 
0000687C  6C20 5265 
00006880  67        
00006881  6973 7465 11150          dc.b      105,115,116,101,114,46,46,46,46,0
00006885  722E 2E2E 
00006889  2E00      
                    11151   @m68kde~1_76:
0000688C  0D0A 5379 11152          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00006890  7374 656D 
00006894  2053 5020 
00006898  3D        
00006899  2000      11153          dc.b      32,0
                    11154   @m68kde~1_77:
0000689C  0D0A 496C 11155          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000068A0  6C65 6761 
000068A4  6C20 5265 
000068A8  67        
000068A9  6973 7465 11156          dc.b      105,115,116,101,114,46,46,46,46,0
000068AD  722E 2E2E 
000068B1  2E00      
                    11157   @m68kde~1_78:
000068B4  0D0A 5043 11158          dc.b      13,10,80,67,32,61,32,0
000068B8  203D 2000 
                    11159   @m68kde~1_79:
000068BC  0D0A 5352 11160          dc.b      13,10,83,82,32,61,32,0
000068C0  203D 2000 
                    11161   @m68kde~1_80:
000068C4  0D0A 496C 11162          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000068C8  6C65 6761 
000068CC  6C20 5265 
000068D0  67        
000068D1  6973 7465 11163          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
000068D5  723A 2055 
000068D9  7365 2041 
000068DD  30        
000068DE  2D41 372C 11164          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
000068E2  2044 302D 
000068E6  4437 2C20 
000068EA  5353 50   
000068ED  2C20 5553 11165          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
000068F1  502C 2050 
000068F5  4320 6F72 
000068F9  2053      
000068FB  520D 0A00 11166          dc.b      82,13,10,0
                    11167   @m68kde~1_81:
00006900  0D0A 0D0A 11168          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00006904  4E75 6D20 
00006908  2020 2020 
0000690C  4164      
0000690E  6472 6573 11169          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00006912  7320 2020 
00006916  2020 2049 
0000691A  6E        
0000691B  7374 7275 11170          dc.b      115,116,114,117,99,116,105,111,110,0
0000691F  6374 696F 
00006923  6E00      
                    11171   @m68kde~1_82:
00006926  0D0A 2D2D 11172          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
0000692A  2D20 2020 
0000692E  2020 2D2D 
00006932  2D2D 2D   
00006935  2D2D 2D2D 11173          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00006939  2020 2020 
0000693D  2D2D 2D2D 
00006941  2D2D 2D   
00006944  2D2D 2D2D 11174          dc.b      45,45,45,45,0
00006948  00        
                    11175   @m68kde~1_83:
0000694A  0D0A 4E6F 11176          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
0000694E  2042 7265 
00006952  616B 506F 
00006956  69        
00006957  6E74 7320 11177          dc.b      110,116,115,32,83,101,116,0
0000695B  5365 7400 
                    11178   @m68kde~1_84:
00006960  0D0A 2533 11179          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00006964  6420 2020 
00006968  2020 2425 
0000696C  3038 78   
0000696F  00        11180          dc.b      0
                    11181   @m68kde~1_85:
00006970  2020 2020 11182          dc.b      32,32,32,32,37,115,0
00006974  2573 00   
                    11183   @m68kde~1_86:
00006978  0D0A 00   11184          dc.b      13,10,0
                    11185   @m68kde~1_87:
0000697C  0D0A 4E75 11186          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00006980  6D20 2020 
00006984  2020 4164 
00006988  6472      
0000698A  6573 7300 11187          dc.b      101,115,115,0
                    11188   @m68kde~1_88:
0000698E  0D0A 2D2D 11189          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00006992  2D20 2020 
00006996  2020 2D2D 
0000699A  2D2D 2D   
0000699D  2D2D 2D2D 11190          dc.b      45,45,45,45,0
000069A1  00        
                    11191   @m68kde~1_89:
000069A2  0D0A 4E6F 11192          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
000069A6  2057 6174 
000069AA  6368 506F 
000069AE  69        
000069AF  6E74 7320 11193          dc.b      110,116,115,32,83,101,116,0
000069B3  5365 7400 
                    11194   @m68kde~1_90:
000069B8  0D0A 2533 11195          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
000069BC  6420 2020 
000069C0  2020 2425 
000069C4  3038 78   
000069C7  00        11196          dc.b      0
                    11197   @m68kde~1_91:
000069C8  0D0A 00   11198          dc.b      13,10,0
                    11199   @m68kde~1_92:
000069CC  0D0A 456E 11200          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
000069D0  7465 7220 
000069D4  4272 6561 
000069D8  6B        
000069D9  2050 6F69 11201          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
000069DD  6E74 204E 
000069E1  756D 6265 
000069E5  72        
000069E6  3A20 00   11202          dc.b      58,32,0
                    11203   @m68kde~1_93:
000069EA  0D0A 496C 11204          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
000069EE  6C65 6761 
000069F2  6C20 5261 
000069F6  6E        
000069F7  6765 203A 11205          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
000069FB  2055 7365 
000069FF  2030 202D 
00006A03  2037      
00006A05  00        11206          dc.b      0
                    11207   @m68kde~1_94:
00006A06  0D0A 4272 11208          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006A0A  6561 6B20 
00006A0E  506F 696E 
00006A12  74        
00006A13  2043 6C65 11209          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00006A17  6172 6564 
00006A1B  2E2E 2E2E 
00006A1F  2E        
00006A20  0D0A 00   11210          dc.b      13,10,0
                    11211   @m68kde~1_95:
00006A24  0D0A 4272 11212          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006A28  6561 6B20 
00006A2C  506F 696E 
00006A30  74        
00006A31  2077 6173 11213          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00006A35  6E27 7420 
00006A39  5365 742E 
00006A3D  2E        
00006A3E  2E2E 2E00 11214          dc.b      46,46,46,0
                    11215   @m68kde~1_96:
00006A42  0D0A 456E 11216          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00006A46  7465 7220 
00006A4A  5761 7463 
00006A4E  68        
00006A4F  2050 6F69 11217          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00006A53  6E74 204E 
00006A57  756D 6265 
00006A5B  72        
00006A5C  3A20 00   11218          dc.b      58,32,0
                    11219   @m68kde~1_97:
00006A60  0D0A 496C 11220          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00006A64  6C65 6761 
00006A68  6C20 5261 
00006A6C  6E        
00006A6D  6765 203A 11221          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00006A71  2055 7365 
00006A75  2030 202D 
00006A79  2037      
00006A7B  00        11222          dc.b      0
                    11223   @m68kde~1_98:
00006A7C  0D0A 5761 11224          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00006A80  7463 6820 
00006A84  506F 696E 
00006A88  74        
00006A89  2043 6C65 11225          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00006A8D  6172 6564 
00006A91  2E2E 2E2E 
00006A95  2E        
00006A96  0D0A 00   11226          dc.b      13,10,0
                    11227   @m68kde~1_99:
00006A9A  0D0A 5761 11228          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00006A9E  7463 6820 
00006AA2  506F 696E 
00006AA6  74        
00006AA7  2057 6173 11229          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
00006AAB  206E 6F74 
00006AAF  2053 6574 
00006AB3  2E        
00006AB4  2E2E 2E2E 11230          dc.b      46,46,46,46,0
00006AB8  00        
                    11231   @m68kde~1_100:
00006ABA  0D0A 4E6F 11232          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00006ABE  2046 5245 
00006AC2  4520 4272 
00006AC6  6561      
00006AC8  6B20 506F 11233          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00006ACC  696E 7473 
00006AD0  2E2E 2E2E 
00006AD4  2E        
00006AD5  00        11234          dc.b      0
                    11235   @m68kde~1_101:
00006AD6  0D0A 4272 11236          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006ADA  6561 6B20 
00006ADE  506F 696E 
00006AE2  74        
00006AE3  2041 6464 11237          dc.b      32,65,100,100,114,101,115,115,58,32,0
00006AE7  7265 7373 
00006AEB  3A20 00   
                    11238   @m68kde~1_102:
00006AEE  0D0A 4572 11239          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00006AF2  726F 7220 
00006AF6  3A20 4272 
00006AFA  65        
00006AFB  616B 2050 11240          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00006AFF  6F69 6E74 
00006B03  7320 4341 
00006B07  4E        
00006B08  4E4F 5420 11241          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00006B0C  6265 2073 
00006B10  6574 2061 
00006B14  74        
00006B15  204F 4444 11242          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00006B19  2061 6464 
00006B1D  7265 7373 
00006B21  65        
00006B22  7300      11243          dc.b      115,0
                    11244   @m68kde~1_103:
00006B24  0D0A 4572 11245          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00006B28  726F 7220 
00006B2C  3A20 4272 
00006B30  65        
00006B31  616B 2050 11246          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00006B35  6F69 6E74 
00006B39  7320 4341 
00006B3D  4E        
00006B3E  4E4F 5420 11247          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00006B42  6265 2073 
00006B46  6574 2066 
00006B4A  6F        
00006B4B  7220 524F 11248          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00006B4F  4D20 696E 
00006B53  2052 616E 
00006B57  67        
00006B58  6520 3A20 11249          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00006B5C  5B24 302D 
00006B60  2430 3030 
00006B64  3037 46   
00006B67  4646 5D00 11250          dc.b      70,70,93,0
                    11251   @m68kde~1_104:
00006B6C  0D0A 4572 11252          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00006B70  726F 723A 
00006B74  2042 7265 
00006B78  61        
00006B79  6B20 506F 11253          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00006B7D  696E 7420 
00006B81  416C 7265 
00006B85  6164 7920 11254          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
00006B89  4578 6973 
00006B8D  7473 2061 
00006B91  74        
00006B92  2041 6464 11255          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00006B96  7265 7373 
00006B9A  203A 2025 
00006B9E  30        
00006B9F  3878 0D0A 11256          dc.b      56,120,13,10,0
00006BA3  00        
                    11257   @m68kde~1_105:
00006BA4  0D0A 4272 11258          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006BA8  6561 6B20 
00006BAC  506F 696E 
00006BB0  74        
00006BB1  2053 6574 11259          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00006BB5  2061 7420 
00006BB9  4164 6472 
00006BBD  65        
00006BBE  7373 3A20 11260          dc.b      115,115,58,32,91,36,37,48,56,120,93,44,32,73
00006BC2  5B24 2530 
00006BC6  3878 5D2C 
00006BCA  2049      
00006BCC  6E73 7472 11261          dc.b      110,115,116,114,117,99,116,105,111,110,32,61
00006BD0  7563 7469 
00006BD4  6F6E 203D 
00006BD8  2025 7300 11262          dc.b      32,37,115,0
                    11263   @m68kde~1_106:
00006BDC  0D0A 00   11264          dc.b      13,10,0
                    11265   @m68kde~1_107:
00006BE0  0D0A 4E6F 11266          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00006BE4  2046 5245 
00006BE8  4520 5761 
00006BEC  7463      
00006BEE  6820 506F 11267          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00006BF2  696E 7473 
00006BF6  2E2E 2E2E 
00006BFA  2E        
00006BFB  00        11268          dc.b      0
                    11269   @m68kde~1_108:
00006BFC  0D0A 5761 11270          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00006C00  7463 6820 
00006C04  506F 696E 
00006C08  74        
00006C09  2041 6464 11271          dc.b      32,65,100,100,114,101,115,115,58,32,0
00006C0D  7265 7373 
00006C11  3A20 00   
                    11272   @m68kde~1_109:
00006C14  0D0A 4572 11273          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
00006C18  726F 723A 
00006C1C  2057 6174 
00006C20  63        
00006C21  6820 506F 11274          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00006C25  696E 7420 
00006C29  416C 7265 
00006C2D  6164 7920 11275          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00006C31  5365 7420 
00006C35  6174 2041 
00006C39  64        
00006C3A  6472 6573 11276          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00006C3E  7320 3A20 
00006C42  2530 3878 
00006C46  0D        
00006C47  0A00      11277          dc.b      10,0
                    11278   @m68kde~1_110:
00006C4A  0D0A 5761 11279          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00006C4E  7463 6820 
00006C52  506F 696E 
00006C56  74        
00006C57  2053 6574 11280          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00006C5B  2061 7420 
00006C5F  4164 6472 
00006C63  65        
00006C64  7373 3A20 11281          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00006C68  5B24 2530 
00006C6C  3878 5D00 
                    11282   @m68kde~1_111:
00006C70  0D0A 00   11283          dc.b      13,10,0
                    11284   @m68kde~1_112:
00006C74  0D0A 0D0A 11285          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00006C78  0D0A 0D0A 
00006C7C  4042 5245 
00006C80  414B 50   
00006C83  4F49 4E54 11286          dc.b      79,73,78,84,0
00006C87  00        
                    11287   @m68kde~1_113:
00006C88  0D0A 5369 11288          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00006C8C  6E67 6C65 
00006C90  2053 7465 
00006C94  70        
00006C95  203A 205B 11289          dc.b      32,58,32,91,79,78,93,0
00006C99  4F4E 5D00 
                    11290   @m68kde~1_114:
00006C9E  0D0A 4272 11291          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00006CA2  6561 6B50 
00006CA6  6F69 6E74 
00006CAA  73        
00006CAB  203A 205B 11292          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00006CAF  456E 6162 
00006CB3  6C65 645D 
00006CB7  00        
                    11293   @m68kde~1_115:
00006CB8  0D0A 5072 11294          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00006CBC  6573 7320 
00006CC0  3C53 5041 
00006CC4  4345      
00006CC6  3E20 746F 11295          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00006CCA  2045 7865 
00006CCE  6375 7465 
00006CD2  20        
00006CD3  4E65 7874 11296          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
00006CD7  2049 6E73 
00006CDB  7472 7563 
00006CDF  7469 6F6E 11297          dc.b      116,105,111,110,0
00006CE3  00        
                    11298   @m68kde~1_116:
00006CE4  0D0A 5072 11299          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00006CE8  6573 7320 
00006CEC  3C45 5343 
00006CF0  3E20      
00006CF2  746F 2052 11300          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00006CF6  6573 756D 
00006CFA  6520 5573 
00006CFE  6572 2050 11301          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00006D02  726F 6772 
00006D06  616D 0D0A 
00006D0A  00        
                    11302   @m68kde~1_117:
00006D0C  0D0A 556E 11303          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00006D10  6B6E 6F77 
00006D14  6E20 436F 
00006D18  6D        
00006D19  6D61 6E64 11304          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00006D1D  2E2E 2E2E 
00006D21  2E0D 0A00 
                    11305   @m68kde~1_118:
00006D26  0D0A 5072 11306          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00006D2A  6F67 7261 
00006D2E  6D20 456E 
00006D32  64        
00006D33  6564 2028 11307          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00006D37  5452 4150 
00006D3B  2023 3135 
00006D3F  292E      
00006D41  2E2E 2E00 11308          dc.b      46,46,46,0
                    11309   @m68kde~1_119:
00006D46  0D0A 4B69 11310          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00006D4A  6C6C 2041 
00006D4E  6C6C 2042 
00006D52  72        
00006D53  6561 6B20 11311          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00006D57  506F 696E 
00006D5B  7473 2E2E 
00006D5F  2E        
00006D60  2879 2F6E 11312          dc.b      40,121,47,110,41,63,0
00006D64  293F 00   
                    11313   @m68kde~1_120:
00006D68  0D0A 4B69 11314          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00006D6C  6C6C 2041 
00006D70  6C6C 2057 
00006D74  61        
00006D75  7463 6820 11315          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00006D79  506F 696E 
00006D7D  7473 2E2E 
00006D81  2E        
00006D82  2879 2F6E 11316          dc.b      40,121,47,110,41,63,0
00006D86  293F 00   
                    11317   @m68kde~1_121:
00006D8A  0D0A 2D2D 11318          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00006D8E  2D2D 2D2D 
00006D92  2D2D 2D2D 
00006D96  2D2D 2D   
00006D99  2D2D 2D2D 11319          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00006D9D  2D2D 2D2D 
00006DA1  2D2D 2D2D 
00006DA5  2D2D 2D   
00006DA8  2D2D 2D2D 11320          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00006DAC  2D2D 2D2D 
00006DB0  2D2D 2D2D 
00006DB4  2D2D 2D   
00006DB7  2D2D 2D2D 11321          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00006DBB  2D2D 2D2D 
00006DBF  2D2D 2D2D 
00006DC3  2D2D 2D   
00006DC6  2D2D 2D2D 11322          dc.b      45,45,45,45,45,45,0
00006DCA  2D2D 00   
                    11323   @m68kde~1_122:
00006DCE  0D0A 2020 11324          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
00006DD2  4465 6275 
00006DD6  6767 6572 
00006DDA  20        
00006DDB  436F 6D6D 11325          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
00006DDF  616E 6420 
00006DE3  5375 6D6D 
00006DE7  6172 7900 11326          dc.b      97,114,121,0
                    11327   @m68kde~1_123:
00006DEC  0D0A 2020 11328          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
00006DF0  2E28 7265 
00006DF4  6729 2020 
00006DF8  2020      
00006DFA  2020 202D 11329          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
00006DFE  2043 6861 
00006E02  6E67 6520 
00006E06  5265      
00006E08  6769 7374 11330          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00006E0C  6572 733A 
00006E10  2065 2E67 
00006E14  2041 302D 11331          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00006E18  4137 2C44 
00006E1C  302D 4437 
00006E20  2C50 43   
00006E23  2C53 5350 11332          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00006E27  2C55 5350 
00006E2B  2C53 5200 
                    11333   @m68kde~1_124:
00006E30  0D0A 2020 11334          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00006E34  4244 2F42 
00006E38  532F 4243 
00006E3C  2F42 4B   
00006E3F  2020 2D20 11335          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00006E43  4272 6561 
00006E47  6B20 506F 
00006E4B  69        
00006E4C  6E74 3A20 11336          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00006E50  4469 7370 
00006E54  6C61 792F 
00006E58  53        
00006E59  6574 2F43 11337          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00006E5D  6C65 6172 
00006E61  2F4B 696C 
00006E65  6C        
00006E66  00        11338          dc.b      0
                    11339   @m68kde~1_125:
00006E68  0D0A 2020 11340          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00006E6C  4320 2020 
00006E70  2020 2020 
00006E74  2020 20   
00006E77  2020 2D20 11341          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00006E7B  436F 7079 
00006E7F  2050 726F 
00006E83  67        
00006E84  7261 6D20 11342          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00006E88  6672 6F6D 
00006E8C  2046 6C61 
00006E90  73        
00006E91  6820 746F 11343          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00006E95  204D 6169 
00006E99  6E20 4D65 
00006E9D  6D        
00006E9E  6F72 7900 11344          dc.b      111,114,121,0
                    11345   @m68kde~1_126:
00006EA2  0D0A 2020 11346          dc.b      13,10,32,32,68,73,32,32,32,32,32,32,32,32,32
00006EA6  4449 2020 
00006EAA  2020 2020 
00006EAE  2020 20   
00006EB1  2020 2D20 11347          dc.b      32,32,45,32,68,105,115,97,115,115,101,109,98
00006EB5  4469 7361 
00006EB9  7373 656D 
00006EBD  62        
00006EBE  6C65 2050 11348          dc.b      108,101,32,80,114,111,103,114,97,109,0
00006EC2  726F 6772 
00006EC6  616D 00   
                    11349   @m68kde~1_127:
00006ECA  0D0A 2020 11350          dc.b      13,10,32,32,68,85,32,32,32,32,32,32,32,32,32
00006ECE  4455 2020 
00006ED2  2020 2020 
00006ED6  2020 20   
00006ED9  2020 2D20 11351          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00006EDD  4475 6D70 
00006EE1  204D 656D 
00006EE5  6F        
00006EE6  7279 2043 11352          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00006EEA  6F6E 7465 
00006EEE  6E74 7320 
00006EF2  746F 2053 11353          dc.b      116,111,32,83,99,114,101,101,110,0
00006EF6  6372 6565 
00006EFA  6E00      
                    11354   @m68kde~1_128:
00006EFC  0D0A 2020 11355          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00006F00  4520 2020 
00006F04  2020 2020 
00006F08  2020 20   
00006F0B  2020 2D20 11356          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00006F0F  456E 7465 
00006F13  7220 5374 
00006F17  72        
00006F18  696E 6720 11357          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00006F1C  696E 746F 
00006F20  204D 656D 
00006F24  6F72 7900 11358          dc.b      111,114,121,0
                    11359   @m68kde~1_129:
00006F28  0D0A 2020 11360          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00006F2C  4620 2020 
00006F30  2020 2020 
00006F34  2020 20   
00006F37  2020 2D20 11361          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00006F3B  4669 6C6C 
00006F3F  204D 656D 
00006F43  6F        
00006F44  7279 2077 11362          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00006F48  6974 6820 
00006F4C  4461 7461 
00006F50  00        
                    11363   @m68kde~1_130:
00006F52  0D0A 2020 11364          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00006F56  4720 2020 
00006F5A  2020 2020 
00006F5E  2020 20   
00006F61  2020 2D20 11365          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00006F65  476F 2050 
00006F69  726F 6772 
00006F6D  61        
00006F6E  6D20 5374 11366          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00006F72  6172 7469 
00006F76  6E67 2061 
00006F7A  74        
00006F7B  2041 6464 11367          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00006F7F  7265 7373 
00006F83  3A20 2425 
00006F87  30        
00006F88  3858 00   11368          dc.b      56,88,0
                    11369   @m68kde~1_131:
00006F8C  0D0A 2020 11370          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00006F90  4C20 2020 
00006F94  2020 2020 
00006F98  2020 20   
00006F9B  2020 2D20 11371          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00006F9F  4C6F 6164 
00006FA3  2050 726F 
00006FA7  67        
00006FA8  7261 6D20 11372          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00006FAC  282E 4845 
00006FB0  5820 6669 
00006FB4  6C        
00006FB5  6529 2066 11373          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00006FB9  726F 6D20 
00006FBD  4C61 7074 
00006FC1  6F        
00006FC2  7000      11374          dc.b      112,0
                    11375   @m68kde~1_132:
00006FC4  0D0A 2020 11376          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
00006FC8  4D20 2020 
00006FCC  2020 2020 
00006FD0  2020 20   
00006FD3  2020 2D20 11377          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
00006FD7  4D65 6D6F 
00006FDB  7279 2045 
00006FDF  78        
00006FE0  616D 696E 11378          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
00006FE4  6520 616E 
00006FE8  6420 4368 
00006FEC  61        
00006FED  6E67 6500 11379          dc.b      110,103,101,0
                    11380   @m68kde~1_133:
00006FF2  0D0A 2020 11381          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
00006FF6  5020 2020 
00006FFA  2020 2020 
00006FFE  2020 20   
00007001  2020 2D20 11382          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00007005  5072 6F67 
00007009  7261 6D20 
0000700D  46        
0000700E  6C61 7368 11383          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00007012  204D 656D 
00007016  6F72 7920 
0000701A  7769 7468 11384          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
0000701E  2055 7365 
00007022  7220 5072 
00007026  6F67 7261 11385          dc.b      111,103,114,97,109,0
0000702A  6D00      
                    11386   @m68kde~1_134:
0000702C  0D0A 2020 11387          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00007030  5220 2020 
00007034  2020 2020 
00007038  2020 20   
0000703B  2020 2D20 11388          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
0000703F  4469 7370 
00007043  6C61 7920 
00007047  36        
00007048  3830 3030 11389          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
0000704C  2052 6567 
00007050  6973 7465 
00007054  72        
00007055  7300      11390          dc.b      115,0
                    11391   @m68kde~1_135:
00007058  0D0A 2020 11392          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
0000705C  5320 2020 
00007060  2020 2020 
00007064  2020 20   
00007067  2020 2D20 11393          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
0000706B  546F 6767 
0000706F  6C65 204F 
00007073  4E        
00007074  2F4F 4646 11394          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00007078  2053 696E 
0000707C  676C 6520 
00007080  53        
00007081  7465 7020 11395          dc.b      116,101,112,32,77,111,100,101,0
00007085  4D6F 6465 
00007089  00        
                    11396   @m68kde~1_136:
0000708A  0D0A 2020 11397          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
0000708E  544D 2020 
00007092  2020 2020 
00007096  2020 20   
00007099  2020 2D20 11398          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
0000709D  5465 7374 
000070A1  204D 656D 
000070A5  6F        
000070A6  7279 00   11399          dc.b      114,121,0
                    11400   @m68kde~1_137:
000070AA  0D0A 2020 11401          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
000070AE  5453 2020 
000070B2  2020 2020 
000070B6  2020 20   
000070B9  2020 2D20 11402          dc.b      32,32,45,32,84,101,115,116,32,68,69,50,32,83
000070BD  5465 7374 
000070C1  2044 4532 
000070C5  2053      
000070C7  7769 7463 11403          dc.b      119,105,116,99,104,101,115,58,32,83,87,48,45
000070CB  6865 733A 
000070CF  2053 5730 
000070D3  2D        
000070D4  5357 3135 11404          dc.b      83,87,49,53,0
000070D8  00        
                    11405   @m68kde~1_138:
000070DA  0D0A 2020 11406          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
000070DE  5444 2020 
000070E2  2020 2020 
000070E6  2020 20   
000070E9  2020 2D20 11407          dc.b      32,32,45,32,84,101,115,116,32,68,69,50,32,68
000070ED  5465 7374 
000070F1  2044 4532 
000070F5  2044      
000070F7  6973 706C 11408          dc.b      105,115,112,108,97,121,115,58,32,76,69,68,115
000070FB  6179 733A 
000070FF  204C 4544 
00007103  73        
00007104  2061 6E64 11409          dc.b      32,97,110,100,32,55,45,83,101,103,109,101,110
00007108  2037 2D53 
0000710C  6567 6D65 
00007110  6E        
00007111  7400      11410          dc.b      116,0
                    11411   @m68kde~1_139:
00007114  0D0A 2020 11412          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00007118  5744 2F57 
0000711C  532F 5743 
00007120  2F57 4B   
00007123  2020 2D20 11413          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00007127  5761 7463 
0000712B  6820 506F 
0000712F  696E      
00007131  743A 2044 11414          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
00007135  6973 706C 
00007139  6179 2F53 
0000713D  65        
0000713E  742F 436C 11415          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
00007142  6561 722F 
00007146  4B69 6C6C 
0000714A  00        
                    11416   @m68kde~1_140:
0000714C  0D0A 2300 11417          dc.b      13,10,35,0
                    11418   @m68kde~1_141:
00007150  0D0A 5072 11419          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00007154  6F67 7261 
00007158  6D20 5275 
0000715C  6E        
0000715D  6E69 6E67 11420          dc.b      110,105,110,103,46,46,46,46,46,0
00007161  2E2E 2E2E 
00007165  2E00      
                    11421   @m68kde~1_142:
00007168  0D0A 5072 11422          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
0000716C  6573 7320 
00007170  3C52 4553 
00007174  4554      
00007176  3E20 6275 11423          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
0000717A  7474 6F6E 
0000717E  203C 4B65 
00007182  79        
00007183  303E 206F 11424          dc.b      48,62,32,111,110,32,68,69,50,32,116,111,32,115
00007187  6E20 4445 
0000718B  3220 746F 
0000718F  2073      
00007191  746F 7000 11425          dc.b      116,111,112,0
                    11426   @m68kde~1_143:
00007196  0D0A 4572 11427          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
0000719A  726F 723A 
0000719E  2050 7265 
000071A2  73        
000071A3  7320 2747 11428          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
000071A7  2720 6669 
000071AB  7273 7420 
000071AF  74        
000071B0  6F20 7374 11429          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
000071B4  6172 7420 
000071B8  7072 6F67 
000071BC  7261 6D00 11430          dc.b      114,97,109,0
                    11431   @m68kde~1_144:
000071C0  0D0A 5369 11432          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000071C4  6E67 6C65 
000071C8  2053 7465 
000071CC  70        
000071CD  2020 3A5B 11433          dc.b      32,32,58,91,79,78,93,0
000071D1  4F4E 5D00 
                    11434   @m68kde~1_145:
000071D6  0D0A 4272 11435          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000071DA  6561 6B20 
000071DE  506F 696E 
000071E2  74        
000071E3  7320 3A5B 11436          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
000071E7  4469 7361 
000071EB  626C 6564 
000071EF  5D        
000071F0  00        11437          dc.b      0
                    11438   @m68kde~1_146:
000071F2  0D0A 5072 11439          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
000071F6  6573 7320 
000071FA  2747 2720 
000071FE  74        
000071FF  6F20 5472 11440          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00007203  6163 6520 
00007207  5072 6F67 
0000720B  72        
0000720C  616D 2066 11441          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00007210  726F 6D20 
00007214  6164 6472 
00007218  6573 7320 11442          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
0000721C  2425 582E 
00007220  2E2E 2E2E 
00007224  00        
                    11443   @m68kde~1_147:
00007226  0D0A 5075 11444          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
0000722A  7368 203C 
0000722E  5245 5345 
00007232  5420      
00007234  4275 7474 11445          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00007238  6F6E 3E20 
0000723C  746F 2053 
00007240  74        
00007241  6F70 2E2E 11446          dc.b      111,112,46,46,46,46,46,0
00007245  2E2E 2E00 
                    11447   @m68kde~1_148:
0000724A  0D0A 5369 11448          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
0000724E  6E67 6C65 
00007252  2053 7465 
00007256  70        
00007257  203A 205B 11449          dc.b      32,58,32,91,79,70,70,93,0
0000725B  4F46 465D 
0000725F  00        
                    11450   @m68kde~1_149:
00007260  0D0A 4272 11451          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00007264  6561 6B20 
00007268  506F 696E 
0000726C  74        
0000726D  7320 3A5B 11452          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00007271  456E 6162 
00007275  6C65 645D 
00007279  00        
                    11453   @m68kde~1_150:
0000727A  0D0A 5072 11454          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
0000727E  6573 7320 
00007282  3C45 5343 
00007286  3E20      
00007288  746F 2052 11455          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
0000728C  6573 756D 
00007290  6520 5573 
00007294  6572 2050 11456          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00007298  726F 6772 
0000729C  616D 2E2E 
000072A0  2E        
000072A1  2E2E 00   11457          dc.b      46,46,0
                    11458   @m68kde~1_151:
000072A4  0D0A 5369 11459          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000072A8  6E67 6C65 
000072AC  2053 7465 
000072B0  70        
000072B1  2020 3A5B 11460          dc.b      32,32,58,91,79,70,70,93,0
000072B5  4F46 465D 
000072B9  00        
                    11461   @m68kde~1_152:
000072BA  0D0A 4272 11462          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000072BE  6561 6B20 
000072C2  506F 696E 
000072C6  74        
000072C7  7320 3A5B 11463          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
000072CB  456E 6162 
000072CF  6C65 645D 
000072D3  00        
                    11464   @m68kde~1_153:
000072D4  0D0A 5072 11465          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
000072D8  6F67 7261 
000072DC  6D20 5275 
000072E0  6E        
000072E1  6E69 6E67 11466          dc.b      110,105,110,103,46,46,46,46,46,0
000072E5  2E2E 2E2E 
000072E9  2E00      
                    11467   @m68kde~1_154:
000072EC  0D0A 5072 11468          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
000072F0  6573 7320 
000072F4  3C52 4553 
000072F8  4554      
000072FA  3E20 6275 11469          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
000072FE  7474 6F6E 
00007302  203C 4B65 
00007306  79        
00007307  303E 206F 11470          dc.b      48,62,32,111,110,32,68,69,50,32,116,111,32,115
0000730B  6E20 4445 
0000730F  3220 746F 
00007313  2073      
00007315  746F 7000 11471          dc.b      116,111,112,0
                    11472   @m68kde~1_155:
0000731A  0D0A 0D0A 11473          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
0000731E  5072 6F67 
00007322  7261 6D20 
00007326  41        
00007327  424F 5254 11474          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
0000732B  2021 2121 
0000732F  2121 210D 
00007333  0A00      
                    11475   @m68kde~1_156:
00007336  2573 0D0A 11476          dc.b      37,115,13,10,0
0000733A  00        
                    11477   @m68kde~1_157:
0000733C  0D0A 0D0A 11478          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00007340  5072 6F67 
00007344  7261 6D20 
00007348  41        
00007349  424F 5254 11479          dc.b      66,79,82,84,32,33,33,33,33,33,0
0000734D  2021 2121 
00007351  2121 00   
                    11480   @m68kde~1_158:
00007354  0D0A 556E 11481          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00007358  6861 6E64 
0000735C  6C65 6420 
00007360  49        
00007361  6E74 6572 11482          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00007365  7275 7074 
00007369  3A20 4952 
0000736D  5125 6420 11483          dc.b      81,37,100,32,33,33,33,33,33,0
00007371  2121 2121 
00007375  2100      
                    11484   @m68kde~1_159:
00007378  4144 4452 11485          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
0000737C  4553 5320 
00007380  4552 524F 
00007384  523A 20   
00007387  3136 206F 11486          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
0000738B  7220 3332 
0000738F  2042 6974 
00007393  2054      
00007395  7261 6E73 11487          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00007399  6665 7220 
0000739D  746F 2F66 
000073A1  726F 6D20 11488          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
000073A5  616E 204F 
000073A9  4444 2041 
000073AD  64        
000073AE  6472 6573 11489          dc.b      100,114,101,115,115,46,46,46,46,0
000073B2  732E 2E2E 
000073B6  2E00      
                    11490   @m68kde~1_160:
000073B8  556E 6861 11491          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
000073BC  6E64 6C65 
000073C0  6420 5472 
000073C4  6170 2021 11492          dc.b      97,112,32,33,33,33,33,33,0
000073C8  2121 2121 
000073CC  00        
                    11493   @m68kde~1_161:
000073CE  4255 5320 11494          dc.b      66,85,83,32,69,114,114,111,114,33,0
000073D2  4572 726F 
000073D6  7221 00   
                    11495   @m68kde~1_162:
000073DA  4144 4452 11496          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
000073DE  4553 5320 
000073E2  4572 726F 
000073E6  7221      
000073E8  00        11497          dc.b      0
                    11498   @m68kde~1_163:
000073EA  494C 4C45 11499          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
000073EE  4741 4C20 
000073F2  494E 5354 
000073F6  5255 43   
000073F9  5449 4F4E 11500          dc.b      84,73,79,78,0
000073FD  00        
                    11501   @m68kde~1_164:
000073FE  4449 5649 11502          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00007402  4445 2042 
00007406  5920 5A45 
0000740A  524F 00   
                    11503   @m68kde~1_165:
0000740E  2743 484B 11504          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00007412  2720 494E 
00007416  5354 5255 
0000741A  4354 49   
0000741D  4F4E 00   11505          dc.b      79,78,0
                    11506   @m68kde~1_166:
00007420  5452 4150 11507          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00007424  5620 494E 
00007428  5354 5255 
0000742C  4354 49   
0000742F  4F4E 00   11508          dc.b      79,78,0
                    11509   @m68kde~1_167:
00007432  5052 4956 11510          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00007436  494C 4547 
0000743A  4520 5649 
0000743E  4F4C 41   
00007441  5449 4F4E 11511          dc.b      84,73,79,78,0
00007445  00        
                    11512   @m68kde~1_168:
00007446  554E 494E 11513          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
0000744A  4954 4941 
0000744E  4C49 5345 
00007452  4420 49   
00007455  5251 00   11514          dc.b      82,81,0
                    11515   @m68kde~1_169:
00007458  5350 5552 11516          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
0000745C  494F 5553 
00007460  2049 5251 
00007464  00        
                    11517   @m68kde~1_170:
00007466  0D0A 5374 11518          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
0000746A  6172 7420 
0000746E  4164 6472 
00007472  65        
00007473  7373 2069 11519          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00007477  6E20 4D65 
0000747B  6D6F 7279 
0000747F  3A20 00   11520          dc.b      58,32,0
                    11521   @m68kde~1_171:
00007482  0D0A 456E 11522          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00007486  7465 7220 
0000748A  5374 7269 
0000748E  6E        
0000748F  6720 2845 11523          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00007493  5343 2074 
00007497  6F20 656E 
0000749B  64        
0000749C  2920 3A00 11524          dc.b      41,32,58,0
                    11525   @m68kde~1_172:
000074A0  0D0A 5374 11526          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
000074A4  6172 7420 
000074A8  4164 6472 
000074AC  65        
000074AD  7373 3A20 11527          dc.b      115,115,58,32,0
000074B1  00        
                    11528   @m68kde~1_173:
000074B2  0D0A 456E 11529          dc.b      13,10,69,110,100,32,65,100,100,114,101,115,115
000074B6  6420 4164 
000074BA  6472 6573 
000074BE  73        
000074BF  3A20 00   11530          dc.b      58,32,0
                    11531   @m68kde~1_174:
000074C2  3638 6B20 11532          dc.b      54,56,107,32,66,117,103,32,86,49,46,55,52,0
000074C6  4275 6720 
000074CA  5631 2E37 
000074CE  3400      
                    11533   @m68kde~1_175:
000074D0  436F 7079 11534          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
000074D4  7269 6768 
000074D8  7420 2843 
000074DC  2920 504A 11535          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
000074E0  2044 6176 
000074E4  6965 7320 
000074E8  3230      
000074EA  3132 00   11536          dc.b      49,50,0
                    11537   @m68kde~1_176:
000074EE  0D0A 5275 11538          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
000074F2  6E6E 696E 
000074F6  672E 2E2E 
000074FA  2E        
000074FB  2E00      11539          dc.b      46,0
                    11540   @m68kde~1_177:
000074FE  5275 6E6E 11541          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
00007502  696E 672E 
00007506  2E2E 2E2E 
0000750A  00        
                    11542   @m68kde~1_178:
0000750C  4279 3A20 11543          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
00007510  504A 2044 
00007514  6176 6965 
00007518  73        
00007519  00        11544          dc.b      0
                    11545   @m68kde~1_179:
0000751A  0D0A 2573 11546          dc.b      13,10,37,115,0
0000751E  00        
                    11547   @m68kde~1_180:
00007520  0D0A 2573 11548          dc.b      13,10,37,115,0
00007524  00        
                    11549   @m68kde~1_181:
00007526  2E42 2000 11550          dc.b      46,66,32,0
                    11551   @m68kde~1_182:
0000752A  2E57 2000 11552          dc.b      46,87,32,0
                    11553   @m68kde~1_183:
0000752E  2E4C 2000 11554          dc.b      46,76,32,0
                    11555   @m68kde~1_184:
00007532  2324 2558 11556          dc.b      35,36,37,88,0
00007536  00        
                    11557   @m68kde~1_185:
00007538  2324 2558 11558          dc.b      35,36,37,88,0
0000753C  00        
                    11559   @m68kde~1_186:
0000753E  2324 2558 11560          dc.b      35,36,37,88,0
00007542  00        
                    11561   @m68kde~1_187:
00007544  2324 2558 11562          dc.b      35,36,37,88,0
00007548  00        
                    11563   @m68kde~1_188:
0000754A  2324 2558 11564          dc.b      35,36,37,88,0
0000754E  00        
                    11565   @m68kde~1_189:
00007550  2324 2558 11566          dc.b      35,36,37,88,0
00007554  00        
                    11567   @m68kde~1_190:
00007556  2324 2558 11568          dc.b      35,36,37,88,0
0000755A  00        
                    11569   @m68kde~1_191:
0000755C  2800      11570          dc.b      40,0
                    11571   @m68kde~1_192:
0000755E  2900      11572          dc.b      41,0
                    11573   @m68kde~1_193:
00007560  2800      11574          dc.b      40,0
                    11575   @m68kde~1_194:
00007562  292B 00   11576          dc.b      41,43,0
                    11577   @m68kde~1_195:
00007566  2D28 00   11578          dc.b      45,40,0
                    11579   @m68kde~1_196:
0000756A  2900      11580          dc.b      41,0
                    11581   @m68kde~1_197:
0000756C  2564 2841 11582          dc.b      37,100,40,65,37,100,41,0
00007570  2564 2900 
                    11583   @m68kde~1_198:
00007574  2564 2841 11584          dc.b      37,100,40,65,37,100,44,0
00007578  2564 2C00 
                    11585   @m68kde~1_199:
0000757C  4400      11586          dc.b      68,0
                    11587   @m68kde~1_200:
0000757E  4100      11588          dc.b      65,0
                    11589   @m68kde~1_201:
00007580  2564 00   11590          dc.b      37,100,0
                    11591   @m68kde~1_202:
00007584  2E57 2900 11592          dc.b      46,87,41,0
                    11593   @m68kde~1_203:
00007588  2E4C 2900 11594          dc.b      46,76,41,0
                    11595   @m68kde~1_204:
0000758C  2425 5800 11596          dc.b      36,37,88,0
                    11597   @m68kde~1_205:
00007590  2425 5800 11598          dc.b      36,37,88,0
                    11599   @m68kde~1_206:
00007594  2564 2850 11600          dc.b      37,100,40,80,67,41,0
00007598  4329 00   
                    11601   @m68kde~1_207:
0000759C  2564 2850 11602          dc.b      37,100,40,80,67,44,0
000075A0  432C 00   
                    11603   @m68kde~1_208:
000075A4  4400      11604          dc.b      68,0
                    11605   @m68kde~1_209:
000075A6  4100      11606          dc.b      65,0
                    11607   @m68kde~1_210:
000075A8  2564 00   11608          dc.b      37,100,0
                    11609   @m68kde~1_211:
000075AC  2E57 2900 11610          dc.b      46,87,41,0
                    11611   @m68kde~1_212:
000075B0  2E4C 2900 11612          dc.b      46,76,41,0
                    11613   @m68kde~1_213:
000075B4  2C00      11614          dc.b      44,0
                    11615   @m68kde~1_214:
000075B6  2C00      11616          dc.b      44,0
                    11617   @m68kde~1_215:
000075B8  4343 00   11618          dc.b      67,67,0
                    11619   @m68kde~1_216:
000075BC  4353 00   11620          dc.b      67,83,0
                    11621   @m68kde~1_217:
000075C0  4551 00   11622          dc.b      69,81,0
                    11623   @m68kde~1_218:
000075C4  4745 00   11624          dc.b      71,69,0
                    11625   @m68kde~1_219:
000075C8  4754 00   11626          dc.b      71,84,0
                    11627   @m68kde~1_220:
000075CC  4849 00   11628          dc.b      72,73,0
                    11629   @m68kde~1_221:
000075D0  4C45 00   11630          dc.b      76,69,0
                    11631   @m68kde~1_222:
000075D4  4C53 00   11632          dc.b      76,83,0
                    11633   @m68kde~1_223:
000075D8  4C54 00   11634          dc.b      76,84,0
                    11635   @m68kde~1_224:
000075DC  4D49 00   11636          dc.b      77,73,0
                    11637   @m68kde~1_225:
000075E0  4E45 00   11638          dc.b      78,69,0
                    11639   @m68kde~1_226:
000075E4  504C 00   11640          dc.b      80,76,0
                    11641   @m68kde~1_227:
000075E8  5653 00   11642          dc.b      86,83,0
                    11643   @m68kde~1_228:
000075EC  5643 00   11644          dc.b      86,67,0
                    11645   @m68kde~1_229:
000075F0  5241 00   11646          dc.b      82,65,0
                    11647   @m68kde~1_230:
000075F4  5352 00   11648          dc.b      83,82,0
                    11649   @m68kde~1_231:
000075F8  2000      11650          dc.b      32,0
                    11651   @m68kde~1_232:
000075FA  556E 6B6E 11652          dc.b      85,110,107,110,111,119,110,0
000075FE  6F77 6E00 
                    11653   @m68kde~1_233:
00007602  4142 4344 11654          dc.b      65,66,67,68,32,68,37,100,44,68,37,100,0
00007606  2044 2564 
0000760A  2C44 2564 
0000760E  00        
                    11655   @m68kde~1_234:
00007610  4142 4344 11656          dc.b      65,66,67,68,32,45,40,65,37,100,41,44,45,40,65
00007614  202D 2841 
00007618  2564 292C 
0000761C  2D28 41   
0000761F  2564 2900 11657          dc.b      37,100,41,0
                    11658   @m68kde~1_235:
00007624  4144 4441 11659          dc.b      65,68,68,65,46,87,32,0
00007628  2E57 2000 
                    11660   @m68kde~1_236:
0000762C  4144 4441 11661          dc.b      65,68,68,65,46,76,32,0
00007630  2E4C 2000 
                    11662   @m68kde~1_237:
00007634  2C41 2558 11663          dc.b      44,65,37,88,0
00007638  00        
                    11664   @m68kde~1_238:
0000763A  4144 4400 11665          dc.b      65,68,68,0
                    11666   @m68kde~1_239:
0000763E  4144 4449 11667          dc.b      65,68,68,73,0
00007642  00        
                    11668   @m68kde~1_240:
00007644  414E 4449 11669          dc.b      65,78,68,73,0
00007648  00        
                    11670   @m68kde~1_241:
0000764A  434D 5049 11671          dc.b      67,77,80,73,0
0000764E  00        
                    11672   @m68kde~1_242:
00007650  454F 5249 11673          dc.b      69,79,82,73,0
00007654  00        
                    11674   @m68kde~1_243:
00007656  4F52 4900 11675          dc.b      79,82,73,0
                    11676   @m68kde~1_244:
0000765A  5355 4249 11677          dc.b      83,85,66,73,0
0000765E  00        
                    11678   @m68kde~1_245:
00007660  2C00      11679          dc.b      44,0
                    11680   @m68kde~1_246:
00007662  414E 4449 11681          dc.b      65,78,68,73,32,35,36,37,88,44,83,82,0
00007666  2023 2425 
0000766A  582C 5352 
0000766E  00        
                    11682   @m68kde~1_247:
00007670  4144 4451 11683          dc.b      65,68,68,81,0
00007674  00        
                    11684   @m68kde~1_248:
00007676  2325 3158 11685          dc.b      35,37,49,88,44,0
0000767A  2C00      
                    11686   @m68kde~1_249:
0000767C  4144 4458 11687          dc.b      65,68,68,88,0
00007680  00        
                    11688   @m68kde~1_250:
00007682  4425 582C 11689          dc.b      68,37,88,44,68,37,88,0
00007686  4425 5800 
                    11690   @m68kde~1_251:
0000768A  2D28 4125 11691          dc.b      45,40,65,37,88,41,44,45,40,65,37,88,41,0
0000768E  5829 2C2D 
00007692  2841 2558 
00007696  2900      
                    11692   @m68kde~1_252:
00007698  414E 4400 11693          dc.b      65,78,68,0
                    11694   @m68kde~1_253:
0000769C  414E 4449 11695          dc.b      65,78,68,73,32,35,36,37,50,88,44,67,67,82,0
000076A0  2023 2425 
000076A4  3258 2C43 
000076A8  4352 00   
                    11696   @m68kde~1_254:
000076AC  4153 4C00 11697          dc.b      65,83,76,0
                    11698   @m68kde~1_255:
000076B0  4153 5200 11699          dc.b      65,83,82,0
                    11700   @m68kde~1_256:
000076B4  4C53 4C00 11701          dc.b      76,83,76,0
                    11702   @m68kde~1_257:
000076B8  4C53 5200 11703          dc.b      76,83,82,0
                    11704   @m68kde~1_258:
000076BC  524F 4C00 11705          dc.b      82,79,76,0
                    11706   @m68kde~1_259:
000076C0  524F 5200 11707          dc.b      82,79,82,0
                    11708   @m68kde~1_260:
000076C4  524F 584C 11709          dc.b      82,79,88,76,0
000076C8  00        
                    11710   @m68kde~1_261:
000076CA  524F 5852 11711          dc.b      82,79,88,82,0
000076CE  00        
                    11712   @m68kde~1_262:
000076D0  2020 00   11713          dc.b      32,32,0
                    11714   @m68kde~1_263:
000076D4  4153 4C00 11715          dc.b      65,83,76,0
                    11716   @m68kde~1_264:
000076D8  4153 5200 11717          dc.b      65,83,82,0
                    11718   @m68kde~1_265:
000076DC  4C53 4C00 11719          dc.b      76,83,76,0
                    11720   @m68kde~1_266:
000076E0  4C53 5200 11721          dc.b      76,83,82,0
                    11722   @m68kde~1_267:
000076E4  524F 4C00 11723          dc.b      82,79,76,0
                    11724   @m68kde~1_268:
000076E8  524F 5200 11725          dc.b      82,79,82,0
                    11726   @m68kde~1_269:
000076EC  524F 584C 11727          dc.b      82,79,88,76,0
000076F0  00        
                    11728   @m68kde~1_270:
000076F2  524F 5852 11729          dc.b      82,79,88,82,0
000076F6  00        
                    11730   @m68kde~1_271:
000076F8  2324 2558 11731          dc.b      35,36,37,88,44,68,37,88,0
000076FC  2C44 2558 
00007700  00        
                    11732   @m68kde~1_272:
00007702  4425 582C 11733          dc.b      68,37,88,44,68,37,88,0
00007706  4425 5800 
                    11734   @m68kde~1_273:
0000770A  4200      11735          dc.b      66,0
                    11736   @m68kde~1_274:
0000770C  2425 5800 11737          dc.b      36,37,88,0
                    11738   @m68kde~1_275:
00007710  2425 5800 11739          dc.b      36,37,88,0
                    11740   @m68kde~1_276:
00007714  4243 4847 11741          dc.b      66,67,72,71,32,0
00007718  2000      
                    11742   @m68kde~1_277:
0000771A  4425 642C 11743          dc.b      68,37,100,44,0
0000771E  00        
                    11744   @m68kde~1_278:
00007720  4243 4847 11745          dc.b      66,67,72,71,32,0
00007724  2000      
                    11746   @m68kde~1_279:
00007726  2324 2558 11747          dc.b      35,36,37,88,44,0
0000772A  2C00      
                    11748   @m68kde~1_280:
0000772C  4243 4C52 11749          dc.b      66,67,76,82,32,0
00007730  2000      
                    11750   @m68kde~1_281:
00007732  4425 642C 11751          dc.b      68,37,100,44,0
00007736  00        
                    11752   @m68kde~1_282:
00007738  4243 4C52 11753          dc.b      66,67,76,82,32,0
0000773C  2000      
                    11754   @m68kde~1_283:
0000773E  2324 2558 11755          dc.b      35,36,37,88,44,0
00007742  2C00      
                    11756   @m68kde~1_284:
00007744  4253 4554 11757          dc.b      66,83,69,84,32,0
00007748  2000      
                    11758   @m68kde~1_285:
0000774A  4425 642C 11759          dc.b      68,37,100,44,0
0000774E  00        
                    11760   @m68kde~1_286:
00007750  4253 4554 11761          dc.b      66,83,69,84,32,0
00007754  2000      
                    11762   @m68kde~1_287:
00007756  2324 2558 11763          dc.b      35,36,37,88,44,0
0000775A  2C00      
                    11764   @m68kde~1_288:
0000775C  4254 5354 11765          dc.b      66,84,83,84,32,0
00007760  2000      
                    11766   @m68kde~1_289:
00007762  4425 642C 11767          dc.b      68,37,100,44,0
00007766  00        
                    11768   @m68kde~1_290:
00007768  4254 5354 11769          dc.b      66,84,83,84,32,0
0000776C  2000      
                    11770   @m68kde~1_291:
0000776E  2324 2558 11771          dc.b      35,36,37,88,44,0
00007772  2C00      
                    11772   @m68kde~1_292:
00007774  4348 4B20 11773          dc.b      67,72,75,32,0
00007778  00        
                    11774   @m68kde~1_293:
0000777A  2C44 2564 11775          dc.b      44,68,37,100,0
0000777E  00        
                    11776   @m68kde~1_294:
00007780  434C 5200 11777          dc.b      67,76,82,0
                    11778   @m68kde~1_295:
00007784  434D 5041 11779          dc.b      67,77,80,65,46,87,32,0
00007788  2E57 2000 
                    11780   @m68kde~1_296:
0000778C  434D 5041 11781          dc.b      67,77,80,65,46,76,32,0
00007790  2E4C 2000 
                    11782   @m68kde~1_297:
00007794  2C41 2564 11783          dc.b      44,65,37,100,0
00007798  00        
                    11784   @m68kde~1_298:
0000779A  434D 5000 11785          dc.b      67,77,80,0
                    11786   @m68kde~1_299:
0000779E  434D 504D 11787          dc.b      67,77,80,77,0
000077A2  00        
                    11788   @m68kde~1_300:
000077A4  2841 2564 11789          dc.b      40,65,37,100,41,43,44,40,65,37,100,41,43,0
000077A8  292B 2C28 
000077AC  4125 6429 
000077B0  2B00      
                    11790   @m68kde~1_301:
000077B2  4442 00   11791          dc.b      68,66,0
                    11792   @m68kde~1_302:
000077B6  4425 642C 11793          dc.b      68,37,100,44,37,43,100,40,80,67,41,32,116,111
000077BA  252B 6428 
000077BE  5043 2920 
000077C2  746F      
000077C4  2041 6464 11794          dc.b      32,65,100,100,114,58,36,37,88,0
000077C8  723A 2425 
000077CC  5800      
                    11795   @m68kde~1_303:
000077CE  4449 5653 11796          dc.b      68,73,86,83,32,0
000077D2  2000      
                    11797   @m68kde~1_304:
000077D4  2C00      11798          dc.b      44,0
                    11799   @m68kde~1_305:
000077D6  4449 5655 11800          dc.b      68,73,86,85,32,0
000077DA  2000      
                    11801   @m68kde~1_306:
000077DC  2C00      11802          dc.b      44,0
                    11803   @m68kde~1_307:
000077DE  454F 5200 11804          dc.b      69,79,82,0
                    11805   @m68kde~1_308:
000077E2  454F 5249 11806          dc.b      69,79,82,73,32,35,36,37,50,88,44,67,67,82,0
000077E6  2023 2425 
000077EA  3258 2C43 
000077EE  4352 00   
                    11807   @m68kde~1_309:
000077F2  454F 5249 11808          dc.b      69,79,82,73,32,35,36,37,88,44,83,82,0
000077F6  2023 2425 
000077FA  582C 5352 
000077FE  00        
                    11809   @m68kde~1_310:
00007800  4558 4720 11810          dc.b      69,88,71,32,68,37,100,44,68,37,100,0
00007804  4425 642C 
00007808  4425 6400 
                    11811   @m68kde~1_311:
0000780C  4558 4720 11812          dc.b      69,88,71,32,65,37,100,44,65,37,100,0
00007810  4125 642C 
00007814  4125 6400 
                    11813   @m68kde~1_312:
00007818  4558 4720 11814          dc.b      69,88,71,32,68,37,100,44,65,37,100,0
0000781C  4425 642C 
00007820  4125 6400 
                    11815   @m68kde~1_313:
00007824  4558 5400 11816          dc.b      69,88,84,0
                    11817   @m68kde~1_314:
00007828  2E4C 2000 11818          dc.b      46,76,32,0
                    11819   @m68kde~1_315:
0000782C  2E57 2000 11820          dc.b      46,87,32,0
                    11821   @m68kde~1_316:
00007830  494C 4C45 11822          dc.b      73,76,76,69,71,65,76,32,40,36,52,65,70,67,41
00007834  4741 4C20 
00007838  2824 3441 
0000783C  4643 29   
0000783F  00        11823          dc.b      0
                    11824   @m68kde~1_317:
00007840  4A4D 5020 11825          dc.b      74,77,80,32,0
00007844  00        
                    11826   @m68kde~1_318:
00007846  4A53 5220 11827          dc.b      74,83,82,32,0
0000784A  00        
                    11828   @m68kde~1_319:
0000784C  4C45 4120 11829          dc.b      76,69,65,32,0
00007850  00        
                    11830   @m68kde~1_320:
00007852  2C41 2564 11831          dc.b      44,65,37,100,0
00007856  00        
                    11832   @m68kde~1_321:
00007858  4C49 4E4B 11833          dc.b      76,73,78,75,32,0
0000785C  2000      
                    11834   @m68kde~1_322:
0000785E  4125 642C 11835          dc.b      65,37,100,44,35,37,100,0
00007862  2325 6400 
                    11836   @m68kde~1_323:
00007866  4D4F 5645 11837          dc.b      77,79,86,69,46,66,32,0
0000786A  2E42 2000 
                    11838   @m68kde~1_324:
0000786E  4D4F 5645 11839          dc.b      77,79,86,69,46,76,32,0
00007872  2E4C 2000 
                    11840   @m68kde~1_325:
00007876  4D4F 5645 11841          dc.b      77,79,86,69,46,87,32,0
0000787A  2E57 2000 
                    11842   @m68kde~1_326:
0000787E  2C00      11843          dc.b      44,0
                    11844   @m68kde~1_327:
00007880  4D4F 5645 11845          dc.b      77,79,86,69,32,0
00007884  2000      
                    11846   @m68kde~1_328:
00007886  2C43 4352 11847          dc.b      44,67,67,82,0
0000788A  00        
                    11848   @m68kde~1_329:
0000788C  4D4F 5645 11849          dc.b      77,79,86,69,32,83,82,44,0
00007890  2053 522C 
00007894  00        
                    11850   @m68kde~1_330:
00007896  4D4F 5645 11851          dc.b      77,79,86,69,32,0
0000789A  2000      
                    11852   @m68kde~1_331:
0000789C  2C53 5200 11853          dc.b      44,83,82,0
                    11854   @m68kde~1_332:
000078A0  4D4F 5645 11855          dc.b      77,79,86,69,32,85,83,80,44,65,37,100,0
000078A4  2055 5350 
000078A8  2C41 2564 
000078AC  00        
                    11856   @m68kde~1_333:
000078AE  4D4F 5645 11857          dc.b      77,79,86,69,32,65,37,100,44,85,83,80,0
000078B2  2041 2564 
000078B6  2C55 5350 
000078BA  00        
                    11858   @m68kde~1_334:
000078BC  4D4F 5645 11859          dc.b      77,79,86,69,77,0
000078C0  4D00      
                    11860   @m68kde~1_335:
000078C2  2E57 2000 11861          dc.b      46,87,32,0
                    11862   @m68kde~1_336:
000078C6  2E4C 2000 11863          dc.b      46,76,32,0
                    11864   @m68kde~1_337:
000078CA  00        11865          dc.b      0
                    11866   @m68kde~1_338:
000078CC  4425 6400 11867          dc.b      68,37,100,0
                    11868   @m68kde~1_339:
000078D0  2F44 2564 11869          dc.b      47,68,37,100,0
000078D4  00        
                    11870   @m68kde~1_340:
000078D6  4125 6400 11871          dc.b      65,37,100,0
                    11872   @m68kde~1_341:
000078DA  2F41 2564 11873          dc.b      47,65,37,100,0
000078DE  00        
                    11874   @m68kde~1_342:
000078E0  2C00      11875          dc.b      44,0
                    11876   @m68kde~1_343:
000078E2  2C00      11877          dc.b      44,0
                    11878   @m68kde~1_344:
000078E4  4425 6400 11879          dc.b      68,37,100,0
                    11880   @m68kde~1_345:
000078E8  2F44 2564 11881          dc.b      47,68,37,100,0
000078EC  00        
                    11882   @m68kde~1_346:
000078EE  4125 6400 11883          dc.b      65,37,100,0
                    11884   @m68kde~1_347:
000078F2  2F41 2564 11885          dc.b      47,65,37,100,0
000078F6  00        
                    11886   @m68kde~1_348:
000078F8  4D4F 5645 11887          dc.b      77,79,86,69,80,46,87,32,36,37,88,40,65,37,100
000078FC  502E 5720 
00007900  2425 5828 
00007904  4125 64   
00007907  292C 4425 11888          dc.b      41,44,68,37,100,0
0000790B  6400      
                    11889   @m68kde~1_349:
0000790E  4D4F 5645 11890          dc.b      77,79,86,69,80,46,76,32,36,37,88,40,65,37,100
00007912  502E 4C20 
00007916  2425 5828 
0000791A  4125 64   
0000791D  292C 4425 11891          dc.b      41,44,68,37,100,0
00007921  6400      
                    11892   @m68kde~1_350:
00007924  4D4F 5645 11893          dc.b      77,79,86,69,80,46,87,32,68,37,100,44,36,37,88
00007928  502E 5720 
0000792C  4425 642C 
00007930  2425 58   
00007933  2841 2564 11894          dc.b      40,65,37,100,41,0
00007937  2900      
                    11895   @m68kde~1_351:
0000793A  4D4F 5645 11896          dc.b      77,79,86,69,80,46,76,32,68,37,100,44,36,37,88
0000793E  502E 4C20 
00007942  4425 642C 
00007946  2425 58   
00007949  2841 2564 11897          dc.b      40,65,37,100,41,0
0000794D  2900      
                    11898   @m68kde~1_352:
00007950  4D4F 5645 11899          dc.b      77,79,86,69,81,32,35,36,37,88,44,68,37,100,0
00007954  5120 2324 
00007958  2558 2C44 
0000795C  2564 00   
                    11900   @m68kde~1_353:
00007960  4D55 4C53 11901          dc.b      77,85,76,83,32,0
00007964  2000      
                    11902   @m68kde~1_354:
00007966  2C44 2564 11903          dc.b      44,68,37,100,0
0000796A  00        
                    11904   @m68kde~1_355:
0000796C  4D55 4C55 11905          dc.b      77,85,76,85,32,0
00007970  2000      
                    11906   @m68kde~1_356:
00007972  2C44 2564 11907          dc.b      44,68,37,100,0
00007976  00        
                    11908   @m68kde~1_357:
00007978  4E42 4344 11909          dc.b      78,66,67,68,32,0
0000797C  2000      
                    11910   @m68kde~1_358:
0000797E  4E45 4700 11911          dc.b      78,69,71,0
                    11912   @m68kde~1_359:
00007982  4E45 4758 11913          dc.b      78,69,71,88,0
00007986  00        
                    11914   @m68kde~1_360:
00007988  4E4F 5000 11915          dc.b      78,79,80,0
                    11916   @m68kde~1_361:
0000798C  4E4F 5400 11917          dc.b      78,79,84,0
                    11918   @m68kde~1_362:
00007990  4F52 00   11919          dc.b      79,82,0
                    11920   @m68kde~1_363:
00007994  4F52 4920 11921          dc.b      79,82,73,32,35,36,37,50,88,44,67,67,82,0
00007998  2324 2532 
0000799C  582C 4343 
000079A0  5200      
                    11922   @m68kde~1_364:
000079A2  4F52 4920 11923          dc.b      79,82,73,32,32,35,36,37,88,44,83,82,0
000079A6  2023 2425 
000079AA  582C 5352 
000079AE  00        
                    11924   @m68kde~1_365:
000079B0  5045 4120 11925          dc.b      80,69,65,32,0
000079B4  00        
                    11926   @m68kde~1_366:
000079B6  5245 5345 11927          dc.b      82,69,83,69,84,0
000079BA  5400      
                    11928   @m68kde~1_367:
000079BC  5254 4500 11929          dc.b      82,84,69,0
                    11930   @m68kde~1_368:
000079C0  5254 5200 11931          dc.b      82,84,82,0
                    11932   @m68kde~1_369:
000079C4  5254 5300 11933          dc.b      82,84,83,0
                    11934   @m68kde~1_370:
000079C8  5354 4F50 11935          dc.b      83,84,79,80,32,35,36,37,88,0
000079CC  2023 2425 
000079D0  5800      
                    11936   @m68kde~1_371:
000079D2  5342 4344 11937          dc.b      83,66,67,68,32,68,37,100,44,68,37,100,0
000079D6  2044 2564 
000079DA  2C44 2564 
000079DE  00        
                    11938   @m68kde~1_372:
000079E0  5342 4344 11939          dc.b      83,66,67,68,32,45,40,65,37,100,41,44,45,40,65
000079E4  202D 2841 
000079E8  2564 292C 
000079EC  2D28 41   
000079EF  2564 2900 11940          dc.b      37,100,41,0
                    11941   @m68kde~1_373:
000079F4  5300      11942          dc.b      83,0
                    11943   @m68kde~1_374:
000079F6  5355 4241 11944          dc.b      83,85,66,65,46,87,32,0
000079FA  2E57 2000 
                    11945   @m68kde~1_375:
000079FE  5355 4241 11946          dc.b      83,85,66,65,46,76,32,0
00007A02  2E4C 2000 
                    11947   @m68kde~1_376:
00007A06  2C41 2558 11948          dc.b      44,65,37,88,0
00007A0A  00        
                    11949   @m68kde~1_377:
00007A0C  5355 4200 11950          dc.b      83,85,66,0
                    11951   @m68kde~1_378:
00007A10  5355 4251 11952          dc.b      83,85,66,81,0
00007A14  00        
                    11953   @m68kde~1_379:
00007A16  2325 3158 11954          dc.b      35,37,49,88,44,0
00007A1A  2C00      
                    11955   @m68kde~1_380:
00007A1C  5355 4258 11956          dc.b      83,85,66,88,0
00007A20  00        
                    11957   @m68kde~1_381:
00007A22  4425 3158 11958          dc.b      68,37,49,88,44,68,37,49,88,0
00007A26  2C44 2531 
00007A2A  5800      
                    11959   @m68kde~1_382:
00007A2C  2D28 4125 11960          dc.b      45,40,65,37,49,88,41,44,45,40,65,37,49,88,41
00007A30  3158 292C 
00007A34  2D28 4125 
00007A38  3158 29   
00007A3B  00        11961          dc.b      0
                    11962   @m68kde~1_383:
00007A3C  5357 4150 11963          dc.b      83,87,65,80,32,68,37,100,0
00007A40  2044 2564 
00007A44  00        
                    11964   @m68kde~1_384:
00007A46  5441 5320 11965          dc.b      84,65,83,32,0
00007A4A  00        
                    11966   @m68kde~1_385:
00007A4C  5452 4150 11967          dc.b      84,82,65,80,32,35,37,100,0
00007A50  2023 2564 
00007A54  00        
                    11968   @m68kde~1_386:
00007A56  5452 4150 11969          dc.b      84,82,65,80,86,0
00007A5A  5600      
                    11970   @m68kde~1_387:
00007A5C  5453 5400 11971          dc.b      84,83,84,0
                    11972   @m68kde~1_388:
00007A60  554E 4C4B 11973          dc.b      85,78,76,75,32,65,37,100,0
00007A64  2041 2564 
00007A68  00        
                    11974   @itoa_1:
00007A6A  2D32 3134 11975          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00007A6E  3734 3833 
00007A72  3634 3800 
                    11976          section   bss
          0000 7A76 11977   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    11978   
                    11979   *********************************************************************************************************
                    11980   * Section for Uninitialised Data held in ROM as constants
                    11981   *********************************************************************************************************
                    11982   
00840000            11983                   org     $00840000               Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 18D2 11984   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    11985   
                    11986   
00840000            11987   bss             org       bss
                    11988   
                    11989   *********************************************************************************************************
                    11990   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    11991   * install the exception handler using the C function InstallExceptionHandler()
                    11992   *********************************************************************************************************
                    11993   
                    11994   
                    11995   
00840000            11996   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
00840004            11997   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
00840008            11998   VBusError        ds.l    1      storage for address of Bus Error Handler
0084000C            11999   VAddressError    ds.l    1      storage for address of Address Error Handler
00840010            12000   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
00840014            12001   VDividebyZero    ds.l    1      storage for address of divide by zero handler
00840018            12002   VCheck           ds.l    1      ditto
0084001C            12003   VTrapV           ds.l    1      ditto
00840020            12004   VPrivilege       ds.l    1      ditto
00840024            12005   VTrace           ds.l    1
00840028            12006   VLine1010emul    ds.l    1
0084002C            12007   VLine1111emul    ds.l    1
00840030            12008   VUnassigned1     ds.l    1
00840034            12009   VUnassigned2     ds.l    1
00840038            12010   VUnassigned3     ds.l    1
0084003C            12011   VUninit_IRQ      ds.l    1
00840040            12012   VUnassigned4     ds.l    1
00840044            12013   VUnassigned5     ds.l    1
00840048            12014   VUnassigned6     ds.l    1
0084004C            12015   VUnassigned7     ds.l    1
00840050            12016   VUnassigned8     ds.l    1
00840054            12017   VUnassigned9     ds.l    1
00840058            12018   VUnassigned10    ds.l    1
0084005C            12019   VUnassigned11    ds.l    1
00840060            12020   VSpuriousIRQ     ds.l    1
                    12021   
                    12022   * Interrupt handlers Vector 25-31
00840064            12023   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
00840068            12024   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0084006C            12025   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
00840070            12026   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
00840074            12027   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
00840078            12028   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0084007C            12029   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    12030   
                    12031   * Trap Handler vectors 32-47
00840080            12032   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
00840084            12033   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
00840088            12034   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0084008C            12035   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
00840090            12036   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
00840094            12037   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
00840098            12038   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0084009C            12039   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
008400A0            12040   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
008400A4            12041   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
008400A8            12042   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
008400AC            12043   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
008400B0            12044   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
008400B4            12045   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
008400B8            12046   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
008400BC            12047   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    12048   
                    12049   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    12050   
                    12051   ***********************************************************************************************************
                    12052   * Other Variables
                    12053   ***********************************************************************************************************
                    12054   *__DebugA5       ds.l    1
                    12055   *__UserA5        ds.l    1
                    12056   
                    12057   ***********************************************************************************************************
008400C0            12058   __ungetbuf:     ds.w    1       ; ungetbuffer for stdio functions
008400C2            12059   __allocp:       ds.l    0       ; start of allocation units
008400C2            12060   __heap:         ds.l    0       ; pointers for malloc functions
                    12061   
                    12062   *__himem:       ds.l    himem            ; highest memory location + 1
                    12063   *__stklen:      ds.l    stklen           ; default stack size
                    12064   
                    12065   *********************************************************************************************************
                    12066   * Section for Heap
                    12067   *********************************************************************************************************
                    12068   
                    12069   _i:
008400C2            12070          ds.b      4
                    12071   _x:
008400C6            12072          ds.b      4
                    12073   _y:
008400CA            12074          ds.b      4
                    12075   _z:
008400CE            12076          ds.b      4
                    12077   _PortA_Count:
008400D2            12078          ds.b      4
                    12079   _Trace:
008400D6            12080          ds.b      4
                    12081   _GoFlag:
008400DA            12082          ds.b      4
                    12083   _d0:
008400DE            12084          ds.b      4
                    12085   _d1:
008400E2            12086          ds.b      4
                    12087   _d2:
008400E6            12088          ds.b      4
                    12089   _d3:
008400EA            12090          ds.b      4
                    12091   _d4:
008400EE            12092          ds.b      4
                    12093   _d5:
008400F2            12094          ds.b      4
                    12095   _d6:
008400F6            12096          ds.b      4
                    12097   _d7:
008400FA            12098          ds.b      4
                    12099   _a0:
008400FE            12100          ds.b      4
                    12101   _a1:
00840102            12102          ds.b      4
                    12103   _a2:
00840106            12104          ds.b      4
                    12105   _a3:
0084010A            12106          ds.b      4
                    12107   _a4:
0084010E            12108          ds.b      4
                    12109   _a5:
00840112            12110          ds.b      4
                    12111   _a6:
00840116            12112          ds.b      4
                    12113   _PC:
0084011A            12114          ds.b      4
                    12115   _SSP:
0084011E            12116          ds.b      4
                    12117   _USP:
00840122            12118          ds.b      4
                    12119   _SR:
00840126            12120          ds.b      2
                    12121   _BreakPointAddress:
00840128            12122          ds.b      32
                    12123   _BreakPointInstruction:
00840148            12124          ds.b      16
                    12125   _BreakPointSetOrCleared:
00840158            12126          ds.b      32
                    12127   _InstructionSize:
00840178            12128          ds.b      4
                    12129   _WatchPointAddress:
0084017C            12130          ds.b      32
                    12131   _WatchPointSetOrCleared:
0084019C            12132          ds.b      32
                    12133   _WatchPointString:
008401BC            12134          ds.b      800
                    12135   _Instruction:
008404DC            12136          ds.b      100
                    12137   _TempString:
00840540            12138          ds.b      100
                    12139          section   heap
          0084 05A4 12140   bssEnd          equ *                   end of storage space for unitialised variables
                    12141   *                                       we have to copy all initialised variable from rom to here at startup
          0084 05A4 12142   heap   equ       *
          0000 0000

Assembly errors: 0


SYMBOL TABLE

Symbol        Value        Symbol        Value        Symbol        Value
----------------------     ----------------------     ----------------------
@itoa_1       00007A6A     @itoa_convert 00005EBC     @itoa_..ert_1 00005EFE     
@itoa_..ert_3 00005F10     @itoa_..ert_4 00005F1E     @m68kde~1_1   000061A4     
@m68kde~1_10  0000629A     @m68kde~1_100 00006ABA     @m68kde~1_101 00006AD6     
@m68kde~1_102 00006AEE     @m68kde~1_103 00006B24     @m68kde~1_104 00006B6C     
@m68kde~1_105 00006BA4     @m68kde~1_106 00006BDC     @m68kde~1_107 00006BE0     
@m68kde~1_108 00006BFC     @m68kde~1_109 00006C14     @m68kde~1_11  000062C2     
@m68kde~1_110 00006C4A     @m68kde~1_111 00006C70     @m68kde~1_112 00006C74     
@m68kde~1_113 00006C88     @m68kde~1_114 00006C9E     @m68kde~1_115 00006CB8     
@m68kde~1_116 00006CE4     @m68kde~1_117 00006D0C     @m68kde~1_118 00006D26     
@m68kde~1_119 00006D46     @m68kde~1_12  000062FC     @m68kde~1_120 00006D68     
@m68kde~1_121 00006D8A     @m68kde~1_122 00006DCE     @m68kde~1_123 00006DEC     
@m68kde~1_124 00006E30     @m68kde~1_125 00006E68     @m68kde~1_126 00006EA2     
@m68kde~1_127 00006ECA     @m68kde~1_128 00006EFC     @m68kde~1_129 00006F28     
@m68kde~1_13  00006314     @m68kde~1_130 00006F52     @m68kde~1_131 00006F8C     
@m68kde~1_132 00006FC4     @m68kde~1_133 00006FF2     @m68kde~1_134 0000702C     
@m68kde~1_135 00007058     @m68kde~1_136 0000708A     @m68kde~1_137 000070AA     
@m68kde~1_138 000070DA     @m68kde~1_139 00007114     @m68kde~1_14  0000631C     
@m68kde~1_140 0000714C     @m68kde~1_141 00007150     @m68kde~1_142 00007168     
@m68kde~1_143 00007196     @m68kde~1_144 000071C0     @m68kde~1_145 000071D6     
@m68kde~1_146 000071F2     @m68kde~1_147 00007226     @m68kde~1_148 0000724A     
@m68kde~1_149 00007260     @m68kde~1_15  00006322     @m68kde~1_150 0000727A     
@m68kde~1_151 000072A4     @m68kde~1_152 000072BA     @m68kde~1_153 000072D4     
@m68kde~1_154 000072EC     @m68kde~1_155 0000731A     @m68kde~1_156 00007336     
@m68kde~1_157 0000733C     @m68kde~1_158 00007354     @m68kde~1_159 00007378     
@m68kde~1_16  00006326     @m68kde~1_160 000073B8     @m68kde~1_161 000073CE     
@m68kde~1_162 000073DA     @m68kde~1_163 000073EA     @m68kde~1_164 000073FE     
@m68kde~1_165 0000740E     @m68kde~1_166 00007420     @m68kde~1_167 00007432     
@m68kde~1_168 00007446     @m68kde~1_169 00007458     @m68kde~1_17  0000632A     
@m68kde~1_170 00007466     @m68kde~1_171 00007482     @m68kde~1_172 000074A0     
@m68kde~1_173 000074B2     @m68kde~1_174 000074C2     @m68kde~1_175 000074D0     
@m68kde~1_176 000074EE     @m68kde~1_177 000074FE     @m68kde~1_178 0000750C     
@m68kde~1_179 0000751A     @m68kde~1_18  0000633E     @m68kde~1_180 00007520     
@m68kde~1_181 00007526     @m68kde~1_182 0000752A     @m68kde~1_183 0000752E     
@m68kde~1_184 00007532     @m68kde~1_185 00007538     @m68kde~1_186 0000753E     
@m68kde~1_187 00007544     @m68kde~1_188 0000754A     @m68kde~1_189 00007550     
@m68kde~1_19  00006356     @m68kde~1_190 00007556     @m68kde~1_191 0000755C     
@m68kde~1_192 0000755E     @m68kde~1_193 00007560     @m68kde~1_194 00007562     
@m68kde~1_195 00007566     @m68kde~1_196 0000756A     @m68kde~1_197 0000756C     
@m68kde~1_198 00007574     @m68kde~1_199 0000757C     @m68kde~1_2   000061BA     
@m68kde~1_20  0000636C     @m68kde~1_200 0000757E     @m68kde~1_201 00007580     
@m68kde~1_202 00007584     @m68kde~1_203 00007588     @m68kde~1_204 0000758C     
@m68kde~1_205 00007590     @m68kde~1_206 00007594     @m68kde~1_207 0000759C     
@m68kde~1_208 000075A4     @m68kde~1_209 000075A6     @m68kde~1_21  00006380     
@m68kde~1_210 000075A8     @m68kde~1_211 000075AC     @m68kde~1_212 000075B0     
@m68kde~1_213 000075B4     @m68kde~1_214 000075B6     @m68kde~1_215 000075B8     
@m68kde~1_216 000075BC     @m68kde~1_217 000075C0     @m68kde~1_218 000075C4     
@m68kde~1_219 000075C8     @m68kde~1_22  000063B0     @m68kde~1_220 000075CC     
@m68kde~1_221 000075D0     @m68kde~1_222 000075D4     @m68kde~1_223 000075D8     
@m68kde~1_224 000075DC     @m68kde~1_225 000075E0     @m68kde~1_226 000075E4     
@m68kde~1_227 000075E8     @m68kde~1_228 000075EC     @m68kde~1_229 000075F0     
@m68kde~1_23  000063E0     @m68kde~1_230 000075F4     @m68kde~1_231 000075F8     
@m68kde~1_232 000075FA     @m68kde~1_233 00007602     @m68kde~1_234 00007610     
@m68kde~1_235 00007624     @m68kde~1_236 0000762C     @m68kde~1_237 00007634     
@m68kde~1_238 0000763A     @m68kde~1_239 0000763E     @m68kde~1_24  0000640C     
@m68kde~1_240 00007644     @m68kde~1_241 0000764A     @m68kde~1_242 00007650     
@m68kde~1_243 00007656     @m68kde~1_244 0000765A     @m68kde~1_245 00007660     
@m68kde~1_246 00007662     @m68kde~1_247 00007670     @m68kde~1_248 00007676     
@m68kde~1_249 0000767C     @m68kde~1_25  00006432     @m68kde~1_250 00007682     
@m68kde~1_251 0000768A     @m68kde~1_252 00007698     @m68kde~1_253 0000769C     
@m68kde~1_254 000076AC     @m68kde~1_255 000076B0     @m68kde~1_256 000076B4     
@m68kde~1_257 000076B8     @m68kde~1_258 000076BC     @m68kde~1_259 000076C0     
@m68kde~1_26  0000644C     @m68kde~1_260 000076C4     @m68kde~1_261 000076CA     
@m68kde~1_262 000076D0     @m68kde~1_263 000076D4     @m68kde~1_264 000076D8     
@m68kde~1_265 000076DC     @m68kde~1_266 000076E0     @m68kde~1_267 000076E4     
@m68kde~1_268 000076E8     @m68kde~1_269 000076EC     @m68kde~1_27  00006468     
@m68kde~1_270 000076F2     @m68kde~1_271 000076F8     @m68kde~1_272 00007702     
@m68kde~1_273 0000770A     @m68kde~1_274 0000770C     @m68kde~1_275 00007710     
@m68kde~1_276 00007714     @m68kde~1_277 0000771A     @m68kde~1_278 00007720     
@m68kde~1_279 00007726     @m68kde~1_28  000064AE     @m68kde~1_280 0000772C     
@m68kde~1_281 00007732     @m68kde~1_282 00007738     @m68kde~1_283 0000773E     
@m68kde~1_284 00007744     @m68kde~1_285 0000774A     @m68kde~1_286 00007750     
@m68kde~1_287 00007756     @m68kde~1_288 0000775C     @m68kde~1_289 00007762     
@m68kde~1_29  000064C0     @m68kde~1_290 00007768     @m68kde~1_291 0000776E     
@m68kde~1_292 00007774     @m68kde~1_293 0000777A     @m68kde~1_294 00007780     
@m68kde~1_295 00007784     @m68kde~1_296 0000778C     @m68kde~1_297 00007794     
@m68kde~1_298 0000779A     @m68kde~1_299 0000779E     @m68kde~1_3   000061BC     
@m68kde~1_30  000064D2     @m68kde~1_300 000077A4     @m68kde~1_301 000077B2     
@m68kde~1_302 000077B6     @m68kde~1_303 000077CE     @m68kde~1_304 000077D4     
@m68kde~1_305 000077D6     @m68kde~1_306 000077DC     @m68kde~1_307 000077DE     
@m68kde~1_308 000077E2     @m68kde~1_309 000077F2     @m68kde~1_31  00006506     
@m68kde~1_310 00007800     @m68kde~1_311 0000780C     @m68kde~1_312 00007818     
@m68kde~1_313 00007824     @m68kde~1_314 00007828     @m68kde~1_315 0000782C     
@m68kde~1_316 00007830     @m68kde~1_317 00007840     @m68kde~1_318 00007846     
@m68kde~1_319 0000784C     @m68kde~1_32  00006528     @m68kde~1_320 00007852     
@m68kde~1_321 00007858     @m68kde~1_322 0000785E     @m68kde~1_323 00007866     
@m68kde~1_324 0000786E     @m68kde~1_325 00007876     @m68kde~1_326 0000787E     
@m68kde~1_327 00007880     @m68kde~1_328 00007886     @m68kde~1_329 0000788C     
@m68kde~1_33  00006546     @m68kde~1_330 00007896     @m68kde~1_331 0000789C     
@m68kde~1_332 000078A0     @m68kde~1_333 000078AE     @m68kde~1_334 000078BC     
@m68kde~1_335 000078C2     @m68kde~1_336 000078C6     @m68kde~1_337 000078CA     
@m68kde~1_338 000078CC     @m68kde~1_339 000078D0     @m68kde~1_34  00006562     
@m68kde~1_340 000078D6     @m68kde~1_341 000078DA     @m68kde~1_342 000078E0     
@m68kde~1_343 000078E2     @m68kde~1_344 000078E4     @m68kde~1_345 000078E8     
@m68kde~1_346 000078EE     @m68kde~1_347 000078F2     @m68kde~1_348 000078F8     
@m68kde~1_349 0000790E     @m68kde~1_35  00006582     @m68kde~1_350 00007924     
@m68kde~1_351 0000793A     @m68kde~1_352 00007950     @m68kde~1_353 00007960     
@m68kde~1_354 00007966     @m68kde~1_355 0000796C     @m68kde~1_356 00007972     
@m68kde~1_357 00007978     @m68kde~1_358 0000797E     @m68kde~1_359 00007982     
@m68kde~1_36  00006594     @m68kde~1_360 00007988     @m68kde~1_361 0000798C     
@m68kde~1_362 00007990     @m68kde~1_363 00007994     @m68kde~1_364 000079A2     
@m68kde~1_365 000079B0     @m68kde~1_366 000079B6     @m68kde~1_367 000079BC     
@m68kde~1_368 000079C0     @m68kde~1_369 000079C4     @m68kde~1_37  000065A2     
@m68kde~1_370 000079C8     @m68kde~1_371 000079D2     @m68kde~1_372 000079E0     
@m68kde~1_373 000079F4     @m68kde~1_374 000079F6     @m68kde~1_375 000079FE     
@m68kde~1_376 00007A06     @m68kde~1_377 00007A0C     @m68kde~1_378 00007A10     
@m68kde~1_379 00007A16     @m68kde~1_38  000065AC     @m68kde~1_380 00007A1C     
@m68kde~1_381 00007A22     @m68kde~1_382 00007A2C     @m68kde~1_383 00007A3C     
@m68kde~1_384 00007A46     @m68kde~1_385 00007A4C     @m68kde~1_386 00007A56     
@m68kde~1_387 00007A5C     @m68kde~1_388 00007A60     @m68kde~1_39  000065D4     
@m68kde~1_4   000061BE     @m68kde~1_40  000065DE     @m68kde~1_41  000065E2     
@m68kde~1_42  000065F8     @m68kde~1_43  00006600     @m68kde~1_44  00006606     
@m68kde~1_45  00006608     @m68kde~1_46  0000660C     @m68kde~1_47  0000660E     
@m68kde~1_48  00006612     @m68kde~1_49  00006614     @m68kde~1_5   000061D6     
@m68kde~1_50  00006630     @m68kde~1_51  0000664A     @m68kde~1_52  00006664     
@m68kde~1_53  0000667E     @m68kde~1_54  00006698     @m68kde~1_55  000066B2     
@m68kde~1_56  000066CC     @m68kde~1_57  000066E6     @m68kde~1_58  00006704     
@m68kde~1_59  00006726     @m68kde~1_6   000061FA     @m68kde~1_60  00006738     
@m68kde~1_61  0000673E     @m68kde~1_62  0000674E     @m68kde~1_63  00006752     
@m68kde~1_64  00006760     @m68kde~1_65  00006764     @m68kde~1_66  00006770     
@m68kde~1_67  00006790     @m68kde~1_68  000067AC     @m68kde~1_69  000067D8     
@m68kde~1_7   00006222     @m68kde~1_70  000067F8     @m68kde~1_71  00006824     
@m68kde~1_72  0000682E     @m68kde~1_73  0000685C     @m68kde~1_74  00006866     
@m68kde~1_75  00006874     @m68kde~1_76  0000688C     @m68kde~1_77  0000689C     
@m68kde~1_78  000068B4     @m68kde~1_79  000068BC     @m68kde~1_8   0000624A     
@m68kde~1_80  000068C4     @m68kde~1_81  00006900     @m68kde~1_82  00006926     
@m68kde~1_83  0000694A     @m68kde~1_84  00006960     @m68kde~1_85  00006970     
@m68kde~1_86  00006978     @m68kde~1_87  0000697C     @m68kde~1_88  0000698E     
@m68kde~1_89  000069A2     @m68kde~1_9   00006272     @m68kde~1_90  000069B8     
@m68kde~1_91  000069C8     @m68kde~1_92  000069CC     @m68kde~1_93  000069EA     
@m68kde~1_94  00006A06     @m68kde~1_95  00006A24     @m68kde~1_96  00006A42     
@m68kde~1_97  00006A60     @m68kde~1_98  00006A7C     @m68kde~1_99  00006A9A     
@vspri.._copy 000057A8     @vspri..opy_1 000057C4     @vspri..opy_2 000057CE     
@vspri..etval 000057D2     @vspri..val_1 00005804     @vspri..val_5 00005850     
AddressError  0000000C     BreakP..ear_1 00001F30     BreakP..ear_3 00001F22     
BreakP..ear_4 00001FAE     BreakP..ear_5 00001FA0     BreakP..ear_6 00001FAA     
BreakP..lay_1 00001D4C     BreakP..ay_10 00001E20     BreakP..ay_11 00001E1A     
BreakP..lay_3 00001D70     BreakP..lay_4 00001D6C     BreakP..lay_6 00001D8E     
BreakP..lay_7 00001D98     BreakP..lay_8 00001D9A     Breakpoint_1  000024B4     
Breakpoint_10 00002502     Breakpoint_3  000024E6     Breakpoint_5  000024E4     
Breakpoint_7  000024F2     Breakpoint_9  000024FE     BusError      00000008     
Change..ers_1 00001B7C     Change..rs_11 00001B3A     Change..rs_13 00001B48     
Change..rs_15 00001B56     Change..rs_17 00001B64     Change..rs_19 00001B72     
Change..rs_20 00001B78     Change..rs_21 00001C2A     Change..rs_23 00001BA0     
Change..rs_25 00001B92     Change..rs_26 00001BC8     Change..rs_28 00001BD8     
Change..ers_3 00001AF2     Change..rs_30 00001BE8     Change..rs_32 00001BF6     
Change..rs_34 00001C04     Change..rs_36 00001C12     Change..rs_38 00001C20     
Change..rs_39 00001C26     Change..rs_40 00001C7E     Change..rs_42 00001C6C     
Change..rs_43 00001C7A     Change..rs_44 00001CD2     Change..rs_46 00001CC0     
Change..rs_47 00001CCE     Change..rs_48 00001CFA     Change..ers_5 00001AE4     
Change..rs_50 00001D22     Change..rs_51 00001D2C     Change..ers_6 00001D30     
Change..ers_7 00001B1A     Change..ers_9 00001B2A     Check         00000018     
Clearln_1     00000A18     Clearln_3     00000A32     DMenu_1       000025A6     
DMenu_3       000025BA     DMenu_4       000025BE     DataEnd       00007A76     
DataLength    000018D2     DataStart     000061A4     Decode..ize_1 00002E74     
Decode..ize_3 00002E88     Decode..ize_4 00002E94     Decode..ode_1 00003574     
Decode..ode_2 000035A2     Decode..tEA_1 00003130     Decode..EA_11 0000322C     
Decode..EA_13 0000325C     Decode..EA_15 0000328C     Decode..EA_17 000032BC     
Decode..EA_19 000032E8     Decode..tEA_2 00003152     Decode..EA_21 00003398     
Decode..EA_23 00003336     Decode..EA_24 00003340     Decode..EA_25 0000338A     
Decode..EA_26 00003394     Decode..EA_29 000033C6     Decode..tEA_3 00003182     
Decode..EA_31 00003406     Decode..EA_33 00003430     Decode..EA_35 00003424     
Decode..EA_36 0000342C     Decode..EA_37 0000345C     Decode..EA_41 000034AA     
Decode..EA_42 000034B4     Decode..EA_43 000034FE     Decode..EA_44 00003508     
Decode..tEA_5 000031B6     Decode..tEA_7 000031E8     Decode..tEA_9 00003210     
Decode..ove_1 00002F58     Decode..ove_3 00002F7E     Decode..ove_5 00002FBE     
Decode..ode_1 00003024     Decode..de_10 000030CE     Decode..ode_3 00003004     
Decode..ode_4 00003056     Decode..ode_6 00003036     Decode..ode_7 0000309E     
Decode..ode_9 0000306A     Decode..ion_1 000035D4     Decode..on_11 00003638     
Decode..on_13 0000364C     Decode..on_15 00003660     Decode..on_17 00003674     
Decode..on_19 00003688     Decode..on_21 0000369C     Decode..on_23 000036B0     
Decode..on_25 000036C2     Decode..on_27 000036D4     Decode..on_29 000036E4     
Decode..ion_3 000035E8     Decode..on_30 000036EE     Decode..ion_5 000035FC     
Decode..ion_7 00003610     Decode..ion_9 00003624     Disabl..nts_1 00002062     
Disabl..nts_3 000020A8     Disabl..nts_4 000020A4     Disass..on_10 0000382C     
Disass..n_100 00003DE6     Disass..n_101 00003DF0     Disass..n_104 00003E18     
Disass..n_105 00003E22     Disass..n_106 00003E78     Disass..n_107 00003EAC     
Disass..n_108 00003F64     Disass..on_11 00003836     Disass..n_110 00003F3A     
Disass..n_111 00003F5C     Disass..n_112 00003FC0     Disass..n_114 00004012     
Disass..n_116 0000406E     Disass..n_118 000040C0     Disass..on_12 000039EA     
Disass..n_120 0000411C     Disass..n_122 0000416E     Disass..n_124 000041CA     
Disass..n_126 0000421C     Disass..n_128 00004278     Disass..n_130 000042BA     
Disass..n_134 00004346     Disass..n_135 00004358     Disass..n_136 000042EC     
Disass..n_137 000042FE     Disass..n_138 00004308     Disass..on_14 00003898     
Disass..n_141 000043E4     Disass..n_143 00004476     Disass..n_145 000044CC     
Disass..n_147 00004522     Disass..on_15 0000389A     Disass..n_151 0000457E     
Disass..n_153 000045B4     Disass..n_155 000045E0     Disass..n_159 0000465C     
Disass..on_16 000038AC     Disass..n_161 00004698     Disass..n_163 000046D2     
Disass..n_165 00004732     Disass..n_167 00004716     Disass..n_168 00004722     
Disass..n_169 00004754     Disass..on_17 000038AE     Disass..n_171 0000478A     
Disass..n_173 000047C0     Disass..n_175 00004824     Disass..n_177 00004882     
Disass..on_18 000038C2     Disass..n_181 000048C8     Disass..n_183 000048C6     
Disass..n_186 000048D8     Disass..n_187 000048DA     Disass..on_19 000038C4     
Disass..n_190 00004902     Disass..n_191 00004904     Disass..n_192 000048FE     
Disass..n_193 0000497E     Disass..n_195 00004928     Disass..n_197 0000493E     
Disass..n_198 00004948     Disass..n_199 000049C0     Disass..on_20 000038D8     
Disass..n_201 000049F6     Disass..n_203 00004A38     Disass..n_207 00004A88     
Disass..n_208 00004AA6     Disass..on_21 000038DA     Disass..n_213 00004B0A     
Disass..n_214 00004B16     Disass..n_215 00004BF6     Disass..n_217 00004B2C     
Disass..n_219 00004BD6     Disass..on_22 000038EA     Disass..n_220 00004BC6     
Disass..n_222 00004B8C     Disass..n_224 00004B78     Disass..n_225 00004B88     
Disass..n_226 00004BAA     Disass..n_227 00004BBE     Disass..n_228 00004C1C     
Disass..on_23 000038EC     Disass..n_230 00004CBA     Disass..n_231 00004CAA     
Disass..n_233 00004C70     Disass..n_235 00004C5C     Disass..n_236 00004C6C     
Disass..n_237 00004C8E     Disass..n_238 00004CA2     Disass..on_24 00003900     
Disass..n_241 00004D36     Disass..n_243 00004D70     Disass..n_245 00004DA8     
Disass..n_247 00004DDE     Disass..n_249 00004E2E     Disass..on_25 00003902     
Disass..n_251 00004E8C     Disass..n_253 00004EEA     Disass..n_255 00004F18     
Disass..n_259 00004F6E     Disass..on_26 0000392A     Disass..n_263 00004FC4     
Disass..n_265 00004FDE     Disass..n_269 00005034     Disass..n_273 0000507C     
Disass..n_275 00005064     Disass..n_276 000050B0     Disass..n_278 000050DC     
Disass..on_28 00003946     Disass..n_280 0000510A     Disass..n_282 0000512A     
Disass..n_284 0000514A     Disass..n_286 00005164     Disass..n_288 0000517E     
Disass..n_290 000051AA     Disass..n_294 00005222     Disass..n_295 0000524C     
Disass..n_298 000052BE     Disass..ion_3 000037BE     Disass..on_30 00003962     
Disass..n_302 0000534A     Disass..n_303 0000535C     Disass..n_304 000052F0     
Disass..n_305 00005302     Disass..n_306 0000530C     Disass..n_309 000053E0     
Disass..n_313 0000549C     Disass..n_315 00005466     Disass..n_316 00005494     
Disass..n_317 000054D4     Disass..on_32 0000397E     Disass..n_321 0000550C     
Disass..n_323 0000553C     Disass..n_325 00005556     Disass..n_329 000055C0     
Disass..n_331 000055F6     Disass..on_34 00003994     Disass..on_36 000039AC     
Disass..on_38 00003A16     Disass..ion_4 000037E8     Disass..on_40 00003A84     
Disass..on_44 00003B40     Disass..on_46 00003B0A     Disass..on_47 00003B38     
Disass..on_50 00003B7A     Disass..on_52 00003BAE     Disass..on_56 00003BC0     
Disass..on_57 00003BC2     Disass..on_58 00003BD4     Disass..on_59 00003BD6     
Disass..on_60 00003BEA     Disass..on_61 00003BEC     Disass..on_62 00003C00     
Disass..on_63 00003C02     Disass..on_64 00003C16     Disass..on_65 00003C18     
Disass..on_66 00003C2C     Disass..on_67 00003C2E     Disass..on_68 00003C42     
Disass..on_69 00003C44     Disass..ion_7 00003874     Disass..on_70 00003C58     
Disass..on_71 00003C5A     Disass..on_72 00003D5E     Disass..on_73 00003EB4     
Disass..on_76 00003C9E     Disass..on_77 00003CA8     Disass..ion_8 00003886     
Disass..on_80 00003CD0     Disass..on_81 00003CDA     Disass..on_84 00003D02     
Disass..on_85 00003D0C     Disass..on_88 00003D34     Disass..on_89 00003D3E     
Disass..ion_9 0000381A     Disass..on_92 00003D82     Disass..on_93 00003D8C     
Disass..on_96 00003DB4     Disass..on_97 00003DBE     Disass..ram_1 00000D78     
Disass..am_11 00000E3C     Disass..am_13 00000E92     Disass..am_15 00000EF2     
Disass..am_17 00000F18     Disass..am_19 00000F1C     Disass..ram_4 00000D7A     
Disass..ram_6 00000EFE     Disass..ram_7 00000DBC     Disass..ram_9 00000DF4     
DividebyZero  00000014     DumpMemory_1  00000F52     DumpMemory_10 00000FA4     
DumpMemory_12 00000FEC     DumpMemory_13 00000FD6     DumpMemory_14 00000FE8     
DumpMemory_15 00000FCC     DumpMemory_16 00001018     DumpMemory_3  0000101C     
DumpMemory_4  00000F54     DumpMemory_6  00000FF8     DumpMemory_7  00000F6C     
DumpMemory_9  00000F98     DumpRe..ers_1 00001596     DumpRe..rs_11 00001658     
DumpRe..rs_12 000016AA     DumpRe..rs_14 0000172E     DumpRe..rs_15 000016E6     
DumpRe..rs_16 0000170A     DumpRe..rs_17 000016D2     DumpRe..rs_18 00001810     
DumpRe..rs_19 00001816     DumpRe..rs_20 0000187E     DumpRe..rs_21 00001886     
DumpRe..rs_22 0000189C     DumpRe..rs_23 000018A4     DumpRe..rs_24 000018BA     
DumpRe..rs_25 000018C2     DumpRe..rs_26 000018D8     DumpRe..rs_27 000018E0     
DumpRe..rs_28 000018F6     DumpRe..rs_29 000018FE     DumpRe..ers_3 00001754     
DumpRe..rs_30 00001914     DumpRe..rs_31 0000191C     DumpRe..rs_32 00001932     
DumpRe..rs_33 0000193A     DumpRe..rs_34 00001950     DumpRe..rs_35 00001958     
DumpRe..rs_36 0000196E     DumpRe..rs_37 00001976     DumpRe..rs_38 0000198C     
DumpRe..rs_39 00001994     DumpRe..ers_4 00001730     DumpRe..rs_40 000019DE     
DumpRe..rs_41 000019E8     DumpRe..rs_42 000019F4     DumpRe..rs_44 00001A3E     
DumpRe..rs_45 00001A3A     DumpRe..ers_5 0000174E     DumpRe..ers_6 000015FA     
DumpRe..ers_8 0000167A     DumpRe..ers_9 00001604     E_1010        000008EA     
E_1111        000008FE     E_AErro       0000085E     E_BErro       0000084A     
E_Check       0000089A     E_DZero       00000886     E_IInst       00000872     
E_Priv        000008C2     E_Spuri       00000912     E_Trace       000008D6     
E_Trapv       000008AE     E_UnitI       00000912     E_Unnas1      00000912     
E_Unnas10     00000912     E_Unnas11     00000912     E_Unnas2      00000912     
E_Unnas3      00000912     E_Unnas4      00000912     E_Unnas5      00000912     
E_Unnas6      00000912     E_Unnas7      00000912     E_Unnas8      00000912     
E_Unnas9      00000912     Enable..nts_1 000020BA     Enable..nts_3 000020F4     
Enable..nts_4 000020F0     EnterString_1 00002A68     EnterString_3 00002A88     
FillMemory_1  0000108A     FillMemory_3  00001096     FlushK..ard_1 00000BFA     
FlushK..ard_4 00000C1A     FlushK..ard_5 00000C1C     FlushK..ard_6 00000C1E     
Format..ace_1 000014FC     Format..ce_10 00001556     Format..ce_11 00001552     
Format..ace_3 00001510     Format..ace_4 0000151A     Format..ace_6 00001560     
Format..ace_8 00001534     Format..ion_1 00002DBC     Format..on_10 00002E00     
Format..on_12 00002E14     Format..on_13 00002E14     Format..on_15 00002E28     
Format..ion_3 00002DD0     Format..ion_4 00002DD0     Format..ion_6 00002DFE     
Format..ion_7 00002DFC     Format..ion_9 00002E3A     Get2He..its_1 00000C9E     
Handle..int_1 000023E6     Handle..int_3 00002446     Handle..int_4 00002442     
IllegalInstr  00000010     InitialPC     00000004     InitialSP     00000000     
KillAl..nts_1 00002106     KillAl..nts_3 00002160     KillAl..nts_1 0000216E     
KillAl..nts_3 00002196     LDIV          000060D8     LMUL          00006026     
Level1IRQ     00000064     Level1RamISR  000004B6     Level2IRQ     00000068     
Level2RamISR  000004CA     Level3IRQ     0000006C     Level3RamISR  000004DE     
Level4IRQ     00000070     Level4RamISR  000004F2     Level5IRQ     00000074     
Level5RamISR  00000506     Level6IRQ     00000078     Level6RamISR  00000612     
Level7IRQ     0000007C     Level7RamISR  00000626     Line1010emul  00000028     
Line1111emul  0000002C     LoadFr..hip_1 000014AC     LoadFr..hip_2 000014DC     
LoadFr..hip_3 0000148A     LoadFr..hip_5 000014AA     Load_S..ile_1 000010CC     
Load_S..le_11 0000110A     Load_S..le_12 00001118     Load_S..le_14 00001136     
Load_S..le_16 0000114A     Load_S..le_17 00001156     Load_S..le_18 00001168     
Load_S..ile_2 000011C6     Load_S..le_20 0000118A     Load_S..le_21 000011BC     
Load_S..le_23 000011E2     Load_S..le_24 000011EE     Load_S..le_25 000011F0     
Load_S..le_27 000011FC     Load_S..ile_3 000011CA     Load_S..ile_4 000010CE     
Load_S..ile_6 000010F2     Load_S..ile_8 00001200     Load_S..ile_9 0000110E     
Memory..nge_1 0000123A     Memory..ge_10 0000127E     Memory..ge_11 000012EC     
Memory..ge_13 000012F6     Memory..nge_4 00001272     Memory..nge_6 000012FC     
Memory..nge_7 000012EE     Memory..nge_9 0000128E     OutMess_1     000009EE     
OutMess_3     00000A0E     Privilege     00000020     Progra..hip_1 0000135C     
Progra..ip_10 000013A6     Progra..ip_12 000013C8     Progra..ip_13 000013DE     
Progra..ip_15 00001408     Progra..ip_16 00001404     Progra..hip_3 00001412     
Progra..hip_4 0000136C     Progra..hip_6 00001380     Progra..hip_7 00001382     
Progra..hip_9 0000139A     SetBre..int_1 000021B2     SetBre..nt_11 0000222A     
SetBre..nt_13 0000222C     SetBre..nt_15 000022C8     SetBre..nt_16 00002256     
SetBre..nt_18 000022C2     SetBre..int_3 000021CA     SetBre..int_4 000021C6     
SetBre..int_6 000021E0     SetBre..int_9 00002214     SetWat..int_1 000022E6     
SetWat..nt_11 0000239E     SetWat..nt_12 00002358     SetWat..nt_14 0000239A     
SetWat..int_3 000022FE     SetWat..int_4 000022FA     SetWat..int_6 00002314     
SetWat..int_9 0000232A     SpuriousIRQ   00000060     SwitchTest_1  00000B0E     
SwitchTest_4  00000B3C     SwitchTest_6  00000B64     SwitchTest_7  00000B56     
SwitchTest_8  00000B60     TestLEDS_1    00000ABA     TestLEDS_4    00000AF4     
TestLEDS_6    00000B00     Trace         00000024     Trap0         00000080     
Trap0RamISR   0000063A     Trap1         00000084     Trap10        000000A8     
Trap10RamISR  00000702     Trap11        000000AC     Trap11RamISR  00000716     
Trap12        000000B0     Trap12RamISR  0000072A     Trap13        000000B4     
Trap13RamISR  0000073E     Trap14        000000B8     Trap14RamISR  00000752     
Trap15        000000BC     Trap15RamISR  00000844     Trap1RamISR   0000064E     
Trap2         00000088     Trap2RamISR   00000662     Trap3         0000008C     
Trap3RamISR   00000676     Trap4         00000090     Trap4RamISR   0000068A     
Trap5         00000094     Trap5RamISR   0000069E     Trap6         00000098     
Trap6RamISR   000006B2     Trap7         0000009C     Trap7RamISR   000006C6     
Trap8         000000A0     Trap8RamISR   000006DA     Trap9         000000A4     
Trap9RamISR   000006EE     TrapV         0000001C     ULDIV         000060C6     
ULMUL         00006014     Unassigned1   00000030     Unassigned10  00000058     
Unassigned11  0000005C     Unassigned2   00000034     Unassigned3   00000038     
Unassigned4   00000040     Unassigned5   00000044     Unassigned6   00000048     
Unassigned7   0000004C     Unassigned8   00000050     Unassigned9   00000054     
Uninit_IRQ    0000003C     VAddressError 0084000C     VBusError     00840008     
VCheck        00840018     VDividebyZero 00840014     VIllegalInstr 00840010     
VInitialPC    00840004     VInitialSP    00840000     VL1IRQ        00840064     
VL2IRQ        00840068     VL3IRQ        0084006C     VL4IRQ        00840070     
VL5IRQ        00840074     VL6IRQ        00840078     VL7IRQ        0084007C     
VLine1010emul 00840028     VLine1111emul 0084002C     VPrivilege    00840020     
VSpuriousIRQ  00840060     VTrace        00840024     VTrap0        00840080     
VTrap1        00840084     VTrap10       008400A8     VTrap11       008400AC     
VTrap12       008400B0     VTrap13       008400B4     VTrap14       008400B8     
VTrap15       008400BC     VTrap2        00840088     VTrap3        0084008C     
VTrap4        00840090     VTrap5        00840094     VTrap6        00840098     
VTrap7        0084009C     VTrap8        008400A0     VTrap9        008400A4     
VTrapV        0084001C     VUnassigned1  00840030     VUnassigned10 00840058     
VUnassigned11 0084005C     VUnassigned2  00840034     VUnassigned3  00840038     
VUnassigned4  00840040     VUnassigned5  00840044     VUnassigned6  00840048     
VUnassigned7  0084004C     VUnassigned8  00840050     VUnassigned9  00840054     
VUninit_IRQ   0084003C     Wait1ms_1     00000994     Wait1ms_3     000009A0     
Wait3ms_1     000009AC     Wait3ms_3     000009BA     WatchP..ear_1 00002006     
WatchP..ear_3 00001FF8     WatchP..ear_4 00002052     WatchP..ear_5 00002044     
WatchP..ear_6 0000204E     WatchP..lay_1 00001E3E     WatchP..ay_10 00001ECC     
WatchP..ay_11 00001EC8     WatchP..lay_3 00001E62     WatchP..lay_4 00001E5E     
WatchP..lay_6 00001E80     WatchP..lay_7 00001E8A     WatchP..lay_8 00001E8C     
Watchpoint_1  0000252E     Watchpoint_10 0000257C     Watchpoint_3  00002560     
Watchpoint_5  0000255E     Watchpoint_7  0000256C     Watchpoint_9  00002578     
_AddressError 000029CE     _Break..dress 00840128     _Break..Clear 00001EDC     
_Break..splay 00001D38     _Break..ction 00840148     _Break..eared 00840158     
_Breakpoint   0000248E     _BusError     000029C0     _CallD..nitor 0000247C     
_Chang..sters 00001A84     _Check        000029F8     _Clearln      00000A12     
_DMenu        00002582     _Decod..dSize 00002E42     _Decod..ister 00002ED6     
_Decod..ister 00002E9E     _Decod..dMode 00003510     _Decode6BitEA 000030DE     
_Decod..pCode 00002FCE     _Decod..rMove 00002F06     _Decod..ition 000035AA     
_Disab..oints 00002058     _Disas..ction 00003700     _Disas..ogram 00000D42     
_Dividebyzero 000029EA     _DumpMemory   00000F24     _DumpR..sters 00001578     
_DumpR..Pause 00001A44     _Enabl..oints 000020B0     _EnterString  00002A3E     
_Erase..hChip 00005602     _FillMemory   00001022     _FlashProgram 0000560E     
_FlashRead    00005616     _FlashReset   00005604     _Flash..Erase 00005606     
_Flush..board 00000BF6     _Forma..ction 00002DA2     _Forma..Trace 000014EE     
_Get2H..igits 00000C58     _Get4H..igits 00000CA8     _Get6H..igits 00000CCA     
_Get8H..igits 00000CEE     _GoFlag       008400DA     _Handl..Point 000023A6     
_Help         000025C4     _IRQMessage   0000293C     _Illeg..ction 000029DC     
_Init_LCD     000009C0     _Init_RS232   00000B66     _Insta..ndler 00000A8E     
_Instruction  008404DC     _Instr..nSize 00840178     _KillA..oints 000020FC     
_KillA..oints 00002168     _LoadF..hChip 0000141A     _Load_..dFile 0000109C     
_MemoryChange 00001208     _MemoryTest   00002A94     _Oline0       00000A38     
_Oline1       00000A62     _OutMess      000009EA     _Outchar      000009D6     
_PC           0084011A     _PortA_Count  008400D2     _Print..Abort 00002914     
_PrivError    00002A14     _Progr..hChip 00001302     _SR           00840126     
_SSP          0084011E     _SetBr..Point 0000219C     _SetWa..Point 000022D0     
_Spurious     00002A30     _SwitchTest   00000B02     _TempString   00840540     
_TestLEDS     00000AAE     _Trace        008400D6     _Trapv        00002A06     
_USP          00840122     _Unhan..dIRQ1 00002964     _Unhan..dIRQ2 0000296E     
_Unhan..dIRQ3 00002978     _Unhan..dIRQ4 00002982     _Unhan..dIRQ5 0000298C     
_Unhan..dIRQ6 00002996     _Unhan..dIRQ7 000029A8     _Unhan..dTrap 000029B2     
_UnitIRQ      00002A22     _Unkno..mmand 0000246A     _Wait1ms      0000098E     
_Wait3ms      000009A6     _Watch..dress 0084017C     _Watch..Clear 00001FB6     
_Watch..splay 00001E30     _Watch..eared 0084019C     _Watch..tring 008401BC     
_Watchpoint   00002508     __allocp      008400C2     __getch       00000BBC     
__heap        008400C2     __putch       00000B90     __ungetbuf    008400C0     
_a0           008400FE     _a1           00840102     _a2           00840106     
_a3           0084010A     _a4           0084010E     _a5           00840112     
_a6           00840116     _d0           008400DE     _d1           008400E2     
_d2           008400E6     _d3           008400EA     _d4           008400EE     
_d5           008400F2     _d6           008400F6     _d7           008400FA     
_getch        00005698     _getch_1      00000BC0     _getch_3      00000BD2     
_go           00000914     _i            008400C2     _itoa         00005FF8     
_kbhit        00000B78     _ltoa         00005F2E     _main         00002AD4     
_menu         000026A8     _printf       00005776     _putch        00005668     
_putch_1      00000B94     _putch_3      00000BA6     _puts         00005630     
_sprintf      00005700     _stop         00000912     _strcat       00005734     
_strca..ction 00000D12     _strcpy       00005620     _strcp..ction 00000D2A     
_strlen       000060B4     _tolower      000056D4     _toupper      0000574A     
_ultoa        00005FB2     _vsprintf     0000585A     _x            008400C6     
_xtod         00000C22     _y            008400CA     _z            008400CE     
bss           00840000     bssEnd        008405A4     dodiv         00006120     
dodiv_1       00006140     dodiv_2       0000615E     dodiv_3       0000617E     
dodiv_4       0000619A     dodiv_5       0000619E     domul         00006060     
domul_1       00006074     domul_2       0000607E     domul_3       00006080     
domul_4       00006094     getch_1       000056BC     getch_3       000056CC     
heap          008405A4     kbhit_1       00000B8C     kbhit_3       00000B8E     
ldiv_1        000060FA     ldiv_2        00006106     ldiv_3        0000610E     
ldiv_4        00006110     lmul_1        00006044     lmul_2        0000604A     
lmul_3        00006052     lmul_4        00006054     ltoa_1        00005F5A     
ltoa_3        00005F54     ltoa_4        00005FAA     ltoa_5        00005F94     
ltoa_7        00005F8C     main_1        00002BAC     main_10       00002D26     
main_12       00002D68     main_3        00002C00     main_4        00002C02     
main_6        00002C18     main_7        00002C22     main_9        00002C38     
mainloop      000004AE     menu_1        000026C4     menu_10       0000271E     
menu_12       0000274A     menu_14       00002758     menu_16       00002766     
menu_18       00002774     menu_20       00002782     menu_22       00002790     
menu_24       0000279E     menu_26       000027E6     menu_28       000027C6     
menu_30       000027D2     menu_32       000027DE     menu_33       000027E2     
menu_34       00002822     menu_36       00002814     menu_38       0000290E     
menu_39       000028B4     menu_4        000026F4     menu_41       0000287E     
menu_42       000028B0     menu_43       000028FA     menu_45       00002906     
menu_46       0000290A     menu_6        00002702     menu_8        00002710     
putch_1       00005686     puts_1        00005638     puts_3        00005654     
start         00000400     strcat_0      0000573E     strcat_1      00005744     
strcpy_1      0000562A     strlen_1      000060BA     tolower_1     000056F6     
toupper_1     0000576C     ultoa_1       00005FD8     ultoa_3       00005FD4     
ultoa_4       00005FF0     vsprintf_1    00005872     vsprintf_102  00005D9A     
vsprintf_104  00005DB8     vsprintf_105  00005DBE     vsprintf_107  00005DDA     
vsprintf_108  00005DE2     vsprintf_11   0000590A     vsprintf_110  00005DFC     
vsprintf_112  00005E48     vsprintf_113  00005E4A     vsprintf_115  00005E46     
vsprintf_116  00005E22     vsprintf_119  00005E30     vsprintf_12   00005916     
vsprintf_123  00005E62     vsprintf_125  00005E80     vsprintf_126  00005EB2     
vsprintf_13   00005922     vsprintf_14   0000592E     vsprintf_15   00005900     
vsprintf_16   0000595A     vsprintf_18   00005990     vsprintf_2    00005E9A     
vsprintf_20   000059AC     vsprintf_22   00005B44     vsprintf_23   00005B52     
vsprintf_24   00005A1E     vsprintf_26   00005A5A     vsprintf_27   00005A92     
vsprintf_28   00005ACA     vsprintf_3    00005E9E     vsprintf_30   00005B02     
vsprintf_31   00005B26     vsprintf_33   000059F6     vsprintf_34   000059EA     
vsprintf_35   00005A10     vsprintf_36   00005A3E     vsprintf_37   00005A56     
vsprintf_38   00005A78     vsprintf_39   00005A8E     vsprintf_4    000058AA     
vsprintf_40   00005AB0     vsprintf_41   00005AC6     vsprintf_42   00005AE8     
vsprintf_43   00005AFE     vsprintf_44   00005B1E     vsprintf_45   00005B20     
vsprintf_46   00005B42     vsprintf_48   00005B86     vsprintf_50   00005B82     
vsprintf_51   00005B84     vsprintf_54   00005BA0     vsprintf_56   00005BBE     
vsprintf_59   00005BEC     vsprintf_6    000058D4     vsprintf_60   00005C30     
vsprintf_62   00005C04     vsprintf_63   00005C22     vsprintf_64   00005C2A     
vsprintf_65   00005C60     vsprintf_67   00005C56     vsprintf_68   00005C5E     
vsprintf_7    0000593C     vsprintf_73   00005C94     vsprintf_76   00005C88     
vsprintf_77   00005CCC     vsprintf_79   00005CC2     vsprintf_8    0000593E     
vsprintf_80   00005E82     vsprintf_81   00005E96     vsprintf_82   00005D58     
vsprintf_9    0000593A     vsprintf_93   00005D28     vsprintf_94   00005D0E     
vsprintf_95   00005D4C     vsprintf_96   00005D72     vsprintf_98   00005D82     
xtod_1        00000C3C     xtod_3        00000C50     xtod_4        00000C4A     
